{"mappings":"IWII,EAAI,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,S,E,C,E,O,G,E,U,C,E,O,C,C,C,IqBOG,EAkBC,EAmCD,EAQC,EF9DA,EAOA,ElBfuB,EAAG,E,EoBS3B,EAkBC,EAmCD,EAQC,EF9DA,EAOA,E,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E7BbX,IAAA,EAAA,EAAA,S,E,E,S,E,E,SAaD,SAAS,EAAU,CAAI,CAAE,CAAO,EAE9B,OAAO,AADG,IAAI,EAAU,GACb,OAAO,CAAC,EACrB,CAGA,AADA,CAAA,EAAU,EAAO,OAAO,CAAG,CAA3B,EACQ,SAAS,CAAG,EACpB,EAAQ,SAAS,CAAG,EAEnB,AAAA,WACC,IAAK,IAAI,KAAK,EACZ,CAAO,CAAC,EAAE,CAAG,CAAO,CAAC,EAAE,CAEzB,IAAK,IAAI,KAAK,EACZ,CAAO,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,AAE1B,IAGsB,aAAlB,OAAO,QACT,CAAA,OAAO,SAAS,CAAG,EAAO,OAAO,AAAP,EAMR,aAAhB,OAAO,MACP,AAAsC,aAAtC,OAAO,4BACP,gBAAgB,4BAIlB,CAAA,KAAK,SAAS,CAAG,EAAO,OAAO,AAAP,C,G,E,Q,S,C,C,C,E,E,E,O,C,Y,I,E,A,G,E,G,E,E,O,C,sB,I,E,A,G,E,G,E,E,O,C,Q,I,E,A,G,E,G,E,E,O,C,c,I,E,A,G,E,G,E,E,O,C,Y,I,E,A,G,E,G,E,E,O,C,kB,I,E,A,G,E,G,E,E,O,C,gB,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,c,I,E,A,G,E,G,E,E,O,C,gB,I,E,A,G,E,G,E,E,O,C,qB,I,E,A,G,E,G,E,E,O,C,4B,I,E,A,G,E,G,E,E,O,C,6B,I,E,A,G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","sources":["<anon>","node_modules/xss/lib/index.js","node_modules/xss/lib/default.js","node_modules/cssfilter/lib/index.js","node_modules/cssfilter/lib/default.js","node_modules/cssfilter/lib/css.js","node_modules/cssfilter/lib/parser.js","node_modules/cssfilter/lib/util.js","node_modules/xss/lib/util.js","node_modules/xss/lib/parser.js","node_modules/xss/lib/xss.js","loadCorrectPage.js","connectToWebSocket.js","post.js","node_modules/markdown-it/index.mjs","node_modules/markdown-it/lib/index.mjs","node_modules/markdown-it/lib/common/utils.mjs","node_modules/mdurl/index.mjs","node_modules/mdurl/lib/decode.mjs","node_modules/mdurl/lib/encode.mjs","node_modules/mdurl/lib/format.mjs","node_modules/mdurl/lib/parse.mjs","node_modules/uc.micro/index.mjs","node_modules/uc.micro/properties/Any/regex.mjs","node_modules/uc.micro/categories/Cc/regex.mjs","node_modules/uc.micro/categories/Cf/regex.mjs","node_modules/uc.micro/categories/P/regex.mjs","node_modules/uc.micro/categories/S/regex.mjs","node_modules/uc.micro/categories/Z/regex.mjs","node_modules/entities/lib/esm/index.js","node_modules/entities/lib/esm/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/index.ts","node_modules/entities/lib/esm/decode.js","node_modules/entities/lib/esm/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode.ts","node_modules/entities/lib/esm/generated/decode-data-html.js","node_modules/entities/lib/esm/generated/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/generated/decode-data-html.ts","node_modules/entities/lib/esm/generated/decode-data-xml.js","node_modules/entities/lib/esm/generated/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/generated/decode-data-xml.ts","node_modules/entities/lib/esm/decode_codepoint.js","node_modules/entities/lib/esm/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode_codepoint.ts","node_modules/entities/lib/esm/encode.js","node_modules/entities/lib/esm/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/encode.ts","node_modules/entities/lib/esm/generated/encode-html.js","node_modules/entities/lib/esm/generated/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/generated/encode-html.ts","node_modules/entities/lib/esm/escape.js","node_modules/entities/lib/esm/https:/raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/escape.ts","node_modules/markdown-it/lib/helpers/index.mjs","node_modules/markdown-it/lib/helpers/parse_link_label.mjs","node_modules/markdown-it/lib/helpers/parse_link_destination.mjs","node_modules/markdown-it/lib/helpers/parse_link_title.mjs","node_modules/markdown-it/lib/renderer.mjs","node_modules/markdown-it/lib/parser_core.mjs","node_modules/markdown-it/lib/ruler.mjs","node_modules/markdown-it/lib/rules_core/state_core.mjs","node_modules/markdown-it/lib/token.mjs","node_modules/markdown-it/lib/rules_core/normalize.mjs","node_modules/markdown-it/lib/rules_core/block.mjs","node_modules/markdown-it/lib/rules_core/inline.mjs","node_modules/markdown-it/lib/rules_core/linkify.mjs","node_modules/markdown-it/lib/rules_core/replacements.mjs","node_modules/markdown-it/lib/rules_core/smartquotes.mjs","node_modules/markdown-it/lib/rules_core/text_join.mjs","node_modules/markdown-it/lib/parser_block.mjs","node_modules/markdown-it/lib/rules_block/state_block.mjs","node_modules/markdown-it/lib/rules_block/table.mjs","node_modules/markdown-it/lib/rules_block/code.mjs","node_modules/markdown-it/lib/rules_block/fence.mjs","node_modules/markdown-it/lib/rules_block/blockquote.mjs","node_modules/markdown-it/lib/rules_block/hr.mjs","node_modules/markdown-it/lib/rules_block/list.mjs","node_modules/markdown-it/lib/rules_block/reference.mjs","node_modules/markdown-it/lib/rules_block/html_block.mjs","node_modules/markdown-it/lib/common/html_blocks.mjs","node_modules/markdown-it/lib/common/html_re.mjs","node_modules/markdown-it/lib/rules_block/heading.mjs","node_modules/markdown-it/lib/rules_block/lheading.mjs","node_modules/markdown-it/lib/rules_block/paragraph.mjs","node_modules/markdown-it/lib/parser_inline.mjs","node_modules/markdown-it/lib/rules_inline/state_inline.mjs","node_modules/markdown-it/lib/rules_inline/text.mjs","node_modules/markdown-it/lib/rules_inline/linkify.mjs","node_modules/markdown-it/lib/rules_inline/newline.mjs","node_modules/markdown-it/lib/rules_inline/escape.mjs","node_modules/markdown-it/lib/rules_inline/backticks.mjs","node_modules/markdown-it/lib/rules_inline/strikethrough.mjs","node_modules/markdown-it/lib/rules_inline/emphasis.mjs","node_modules/markdown-it/lib/rules_inline/link.mjs","node_modules/markdown-it/lib/rules_inline/image.mjs","node_modules/markdown-it/lib/rules_inline/autolink.mjs","node_modules/markdown-it/lib/rules_inline/html_inline.mjs","node_modules/markdown-it/lib/rules_inline/entity.mjs","node_modules/markdown-it/lib/rules_inline/balance_pairs.mjs","node_modules/markdown-it/lib/rules_inline/fragments_join.mjs","node_modules/linkify-it/index.mjs","node_modules/linkify-it/lib/re.mjs","node_modules/punycode.js/punycode.es6.js","node_modules/markdown-it/lib/presets/default.mjs","node_modules/markdown-it/lib/presets/zero.mjs","node_modules/markdown-it/lib/presets/commonmark.mjs"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"baC4Q\", function(module, exports) {\n/**\n * xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ \nvar $b3GRM = parcelRequire(\"b3GRM\");\n\nvar $6rMz3 = parcelRequire(\"6rMz3\");\n\nvar $hJaXz = parcelRequire(\"hJaXz\");\n/**\n * filter xss function\n *\n * @param {String} html\n * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }\n * @return {String}\n */ function filterXSS(html, options) {\n    var xss = new $hJaXz(options);\n    return xss.process(html);\n}\nexports = module.exports = filterXSS;\nexports.filterXSS = filterXSS;\nexports.FilterXSS = $hJaXz;\n(function() {\n    for(var i in $b3GRM)exports[i] = $b3GRM[i];\n    for(var j in $6rMz3)exports[j] = $6rMz3[j];\n})();\n// using `xss` on the browser, output `filterXSS` to the globals\nif (typeof window !== \"undefined\") window.filterXSS = module.exports;\n// using `xss` on the WebWorker, output `filterXSS` to the globals\nfunction isWorkerEnv() {\n    return typeof self !== \"undefined\" && typeof DedicatedWorkerGlobalScope !== \"undefined\" && self instanceof DedicatedWorkerGlobalScope;\n}\nif (isWorkerEnv()) self.filterXSS = module.exports;\n\n});\nparcelRegister(\"b3GRM\", function(module, exports) {\n\n$parcel$export(module.exports, \"whiteList\", () => $80d139ea8f389177$export$81959c441b85a1ce, (v) => $80d139ea8f389177$export$81959c441b85a1ce = v);\n$parcel$export(module.exports, \"getDefaultWhiteList\", () => $80d139ea8f389177$export$df33d771471df647, (v) => $80d139ea8f389177$export$df33d771471df647 = v);\n$parcel$export(module.exports, \"onTag\", () => $80d139ea8f389177$export$8ee080b6f5c498c5, (v) => $80d139ea8f389177$export$8ee080b6f5c498c5 = v);\n$parcel$export(module.exports, \"onIgnoreTag\", () => $80d139ea8f389177$export$6a8dcd2af568ef73, (v) => $80d139ea8f389177$export$6a8dcd2af568ef73 = v);\n$parcel$export(module.exports, \"onTagAttr\", () => $80d139ea8f389177$export$68f34a033c535f39, (v) => $80d139ea8f389177$export$68f34a033c535f39 = v);\n$parcel$export(module.exports, \"onIgnoreTagAttr\", () => $80d139ea8f389177$export$c08c9f0d730a9b5f, (v) => $80d139ea8f389177$export$c08c9f0d730a9b5f = v);\n$parcel$export(module.exports, \"safeAttrValue\", () => $80d139ea8f389177$export$3b380fb6422d8d92, (v) => $80d139ea8f389177$export$3b380fb6422d8d92 = v);\n$parcel$export(module.exports, \"escapeHtml\", () => $80d139ea8f389177$export$4cf11838cdc2a8a8, (v) => $80d139ea8f389177$export$4cf11838cdc2a8a8 = v);\n$parcel$export(module.exports, \"escapeQuote\", () => $80d139ea8f389177$export$b34053251219d4d, (v) => $80d139ea8f389177$export$b34053251219d4d = v);\n$parcel$export(module.exports, \"unescapeQuote\", () => $80d139ea8f389177$export$b8b43266c0fd884b, (v) => $80d139ea8f389177$export$b8b43266c0fd884b = v);\n$parcel$export(module.exports, \"escapeHtmlEntities\", () => $80d139ea8f389177$export$2bf939f54de7f222, (v) => $80d139ea8f389177$export$2bf939f54de7f222 = v);\n$parcel$export(module.exports, \"escapeDangerHtml5Entities\", () => $80d139ea8f389177$export$23813bdaf7b05b02, (v) => $80d139ea8f389177$export$23813bdaf7b05b02 = v);\n$parcel$export(module.exports, \"clearNonPrintableCharacter\", () => $80d139ea8f389177$export$a940bb329b7402b7, (v) => $80d139ea8f389177$export$a940bb329b7402b7 = v);\n$parcel$export(module.exports, \"friendlyAttrValue\", () => $80d139ea8f389177$export$474346ac3b97b91e, (v) => $80d139ea8f389177$export$474346ac3b97b91e = v);\n$parcel$export(module.exports, \"escapeAttrValue\", () => $80d139ea8f389177$export$3182ddfe050dbeb2, (v) => $80d139ea8f389177$export$3182ddfe050dbeb2 = v);\n$parcel$export(module.exports, \"onIgnoreTagStripAll\", () => $80d139ea8f389177$export$8662d7a29d0836de, (v) => $80d139ea8f389177$export$8662d7a29d0836de = v);\n$parcel$export(module.exports, \"StripTagBody\", () => $80d139ea8f389177$export$c5207ac5d2688c71, (v) => $80d139ea8f389177$export$c5207ac5d2688c71 = v);\n$parcel$export(module.exports, \"stripCommentTag\", () => $80d139ea8f389177$export$89570102812ee0df, (v) => $80d139ea8f389177$export$89570102812ee0df = v);\n$parcel$export(module.exports, \"stripBlankChar\", () => $80d139ea8f389177$export$d540559455185e53, (v) => $80d139ea8f389177$export$d540559455185e53 = v);\n$parcel$export(module.exports, \"attributeWrapSign\", () => $80d139ea8f389177$export$8581cab6b127478e, (v) => $80d139ea8f389177$export$8581cab6b127478e = v);\n$parcel$export(module.exports, \"cssFilter\", () => $80d139ea8f389177$export$39da57ce707585be, (v) => $80d139ea8f389177$export$39da57ce707585be = v);\n$parcel$export(module.exports, \"getDefaultCSSWhiteList\", () => $80d139ea8f389177$export$c47b8d41609c6a49, (v) => $80d139ea8f389177$export$c47b8d41609c6a49 = v);\n/**\n * default settings\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ var $80d139ea8f389177$export$81959c441b85a1ce;\nvar $80d139ea8f389177$export$df33d771471df647;\nvar $80d139ea8f389177$export$8ee080b6f5c498c5;\nvar $80d139ea8f389177$export$6a8dcd2af568ef73;\nvar $80d139ea8f389177$export$68f34a033c535f39;\nvar $80d139ea8f389177$export$c08c9f0d730a9b5f;\nvar $80d139ea8f389177$export$3b380fb6422d8d92;\nvar $80d139ea8f389177$export$4cf11838cdc2a8a8;\nvar $80d139ea8f389177$export$b34053251219d4d;\nvar $80d139ea8f389177$export$b8b43266c0fd884b;\nvar $80d139ea8f389177$export$2bf939f54de7f222;\nvar $80d139ea8f389177$export$23813bdaf7b05b02;\nvar $80d139ea8f389177$export$a940bb329b7402b7;\nvar $80d139ea8f389177$export$474346ac3b97b91e;\nvar $80d139ea8f389177$export$3182ddfe050dbeb2;\nvar $80d139ea8f389177$export$8662d7a29d0836de;\nvar $80d139ea8f389177$export$c5207ac5d2688c71;\nvar $80d139ea8f389177$export$89570102812ee0df;\nvar $80d139ea8f389177$export$d540559455185e53;\nvar $80d139ea8f389177$export$8581cab6b127478e;\nvar $80d139ea8f389177$export$39da57ce707585be;\nvar $80d139ea8f389177$export$c47b8d41609c6a49;\n\nvar $1uar2 = parcelRequire(\"1uar2\");\nvar $80d139ea8f389177$require$FilterCSS = $1uar2.FilterCSS;\n\nvar $1uar2 = parcelRequire(\"1uar2\");\nvar $80d139ea8f389177$require$getDefaultCSSWhiteList = $1uar2.getDefaultWhiteList;\n\nvar $5HyOV = parcelRequire(\"5HyOV\");\nfunction $80d139ea8f389177$var$getDefaultWhiteList() {\n    return {\n        a: [\n            \"target\",\n            \"href\",\n            \"title\"\n        ],\n        abbr: [\n            \"title\"\n        ],\n        address: [],\n        area: [\n            \"shape\",\n            \"coords\",\n            \"href\",\n            \"alt\"\n        ],\n        article: [],\n        aside: [],\n        audio: [\n            \"autoplay\",\n            \"controls\",\n            \"crossorigin\",\n            \"loop\",\n            \"muted\",\n            \"preload\",\n            \"src\"\n        ],\n        b: [],\n        bdi: [\n            \"dir\"\n        ],\n        bdo: [\n            \"dir\"\n        ],\n        big: [],\n        blockquote: [\n            \"cite\"\n        ],\n        br: [],\n        caption: [],\n        center: [],\n        cite: [],\n        code: [],\n        col: [\n            \"align\",\n            \"valign\",\n            \"span\",\n            \"width\"\n        ],\n        colgroup: [\n            \"align\",\n            \"valign\",\n            \"span\",\n            \"width\"\n        ],\n        dd: [],\n        del: [\n            \"datetime\"\n        ],\n        details: [\n            \"open\"\n        ],\n        div: [],\n        dl: [],\n        dt: [],\n        em: [],\n        figcaption: [],\n        figure: [],\n        font: [\n            \"color\",\n            \"size\",\n            \"face\"\n        ],\n        footer: [],\n        h1: [],\n        h2: [],\n        h3: [],\n        h4: [],\n        h5: [],\n        h6: [],\n        header: [],\n        hr: [],\n        i: [],\n        img: [\n            \"src\",\n            \"alt\",\n            \"title\",\n            \"width\",\n            \"height\",\n            \"loading\"\n        ],\n        ins: [\n            \"datetime\"\n        ],\n        kbd: [],\n        li: [],\n        mark: [],\n        nav: [],\n        ol: [],\n        p: [],\n        pre: [],\n        s: [],\n        section: [],\n        small: [],\n        span: [],\n        sub: [],\n        summary: [],\n        sup: [],\n        strong: [],\n        strike: [],\n        table: [\n            \"width\",\n            \"border\",\n            \"align\",\n            \"valign\"\n        ],\n        tbody: [\n            \"align\",\n            \"valign\"\n        ],\n        td: [\n            \"width\",\n            \"rowspan\",\n            \"colspan\",\n            \"align\",\n            \"valign\"\n        ],\n        tfoot: [\n            \"align\",\n            \"valign\"\n        ],\n        th: [\n            \"width\",\n            \"rowspan\",\n            \"colspan\",\n            \"align\",\n            \"valign\"\n        ],\n        thead: [\n            \"align\",\n            \"valign\"\n        ],\n        tr: [\n            \"rowspan\",\n            \"align\",\n            \"valign\"\n        ],\n        tt: [],\n        u: [],\n        ul: [],\n        video: [\n            \"autoplay\",\n            \"controls\",\n            \"crossorigin\",\n            \"loop\",\n            \"muted\",\n            \"playsinline\",\n            \"poster\",\n            \"preload\",\n            \"src\",\n            \"height\",\n            \"width\"\n        ]\n    };\n}\nvar $80d139ea8f389177$var$defaultCSSFilter = new $80d139ea8f389177$require$FilterCSS();\n/**\n * default onTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */ function $80d139ea8f389177$var$onTag(tag, html, options) {\n// do nothing\n}\n/**\n * default onIgnoreTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */ function $80d139ea8f389177$var$onIgnoreTag(tag, html, options) {\n// do nothing\n}\n/**\n * default onTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */ function $80d139ea8f389177$var$onTagAttr(tag, name, value) {\n// do nothing\n}\n/**\n * default onIgnoreTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */ function $80d139ea8f389177$var$onIgnoreTagAttr(tag, name, value) {\n// do nothing\n}\n/**\n * default escapeHtml function\n *\n * @param {String} html\n */ function $80d139ea8f389177$var$escapeHtml(html) {\n    return html.replace($80d139ea8f389177$var$REGEXP_LT, \"&lt;\").replace($80d139ea8f389177$var$REGEXP_GT, \"&gt;\");\n}\n/**\n * default safeAttrValue function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @param {Object} cssFilter\n * @return {String}\n */ function $80d139ea8f389177$var$safeAttrValue(tag, name, value, cssFilter) {\n    // unescape attribute value firstly\n    value = $80d139ea8f389177$var$friendlyAttrValue(value);\n    if (name === \"href\" || name === \"src\") {\n        // filter `href` and `src` attribute\n        // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`\n        value = $5HyOV.trim(value);\n        if (value === \"#\") return \"#\";\n        if (!(value.substr(0, 7) === \"http://\" || value.substr(0, 8) === \"https://\" || value.substr(0, 7) === \"mailto:\" || value.substr(0, 4) === \"tel:\" || value.substr(0, 11) === \"data:image/\" || value.substr(0, 6) === \"ftp://\" || value.substr(0, 2) === \"./\" || value.substr(0, 3) === \"../\" || value[0] === \"#\" || value[0] === \"/\")) return \"\";\n    } else if (name === \"background\") {\n        // filter `background` attribute (maybe no use)\n        // `javascript:`\n        $80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n        if ($80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) return \"\";\n    } else if (name === \"style\") {\n        // `expression()`\n        $80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;\n        if ($80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) return \"\";\n        // `url()`\n        $80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;\n        if ($80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {\n            $80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n            if ($80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) return \"\";\n        }\n        if (cssFilter !== false) {\n            cssFilter = cssFilter || $80d139ea8f389177$var$defaultCSSFilter;\n            value = cssFilter.process(value);\n        }\n    }\n    // escape `<>\"` before returns\n    value = $80d139ea8f389177$var$escapeAttrValue(value);\n    return value;\n}\n// RegExp list\nvar $80d139ea8f389177$var$REGEXP_LT = /</g;\nvar $80d139ea8f389177$var$REGEXP_GT = />/g;\nvar $80d139ea8f389177$var$REGEXP_QUOTE = /\"/g;\nvar $80d139ea8f389177$var$REGEXP_QUOTE_2 = /&quot;/g;\nvar $80d139ea8f389177$var$REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;\nvar $80d139ea8f389177$var$REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;\nvar $80d139ea8f389177$var$REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\\/\\*|\\*\\//gm;\nvar $80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\\s*a\\s*v\\s*a|v\\s*b|l\\s*i\\s*v\\s*e)\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*|m\\s*o\\s*c\\s*h\\s*a):/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:\\s*image\\//gi;\nvar $80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\\s*x\\s*p\\s*r\\s*e\\s*s\\s*s\\s*i\\s*o\\s*n\\s*\\(.*/gi;\nvar $80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\\s*r\\s*l\\s*\\(.*/gi;\n/**\n * escape double quote\n *\n * @param {String} str\n * @return {String} str\n */ function $80d139ea8f389177$var$escapeQuote(str) {\n    return str.replace($80d139ea8f389177$var$REGEXP_QUOTE, \"&quot;\");\n}\n/**\n * unescape double quote\n *\n * @param {String} str\n * @return {String} str\n */ function $80d139ea8f389177$var$unescapeQuote(str) {\n    return str.replace($80d139ea8f389177$var$REGEXP_QUOTE_2, '\"');\n}\n/**\n * escape html entities\n *\n * @param {String} str\n * @return {String}\n */ function $80d139ea8f389177$var$escapeHtmlEntities(str) {\n    return str.replace($80d139ea8f389177$var$REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {\n        return code[0] === \"x\" || code[0] === \"X\" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));\n    });\n}\n/**\n * escape html5 new danger entities\n *\n * @param {String} str\n * @return {String}\n */ function $80d139ea8f389177$var$escapeDangerHtml5Entities(str) {\n    return str.replace($80d139ea8f389177$var$REGEXP_ATTR_VALUE_COLON, \":\").replace($80d139ea8f389177$var$REGEXP_ATTR_VALUE_NEWLINE, \" \");\n}\n/**\n * clear nonprintable characters\n *\n * @param {String} str\n * @return {String}\n */ function $80d139ea8f389177$var$clearNonPrintableCharacter(str) {\n    var str2 = \"\";\n    for(var i = 0, len = str.length; i < len; i++)str2 += str.charCodeAt(i) < 32 ? \" \" : str.charAt(i);\n    return $5HyOV.trim(str2);\n}\n/**\n * get friendly attribute value\n *\n * @param {String} str\n * @return {String}\n */ function $80d139ea8f389177$var$friendlyAttrValue(str) {\n    str = $80d139ea8f389177$var$unescapeQuote(str);\n    str = $80d139ea8f389177$var$escapeHtmlEntities(str);\n    str = $80d139ea8f389177$var$escapeDangerHtml5Entities(str);\n    str = $80d139ea8f389177$var$clearNonPrintableCharacter(str);\n    return str;\n}\n/**\n * unescape attribute value\n *\n * @param {String} str\n * @return {String}\n */ function $80d139ea8f389177$var$escapeAttrValue(str) {\n    str = $80d139ea8f389177$var$escapeQuote(str);\n    str = $80d139ea8f389177$var$escapeHtml(str);\n    return str;\n}\n/**\n * `onIgnoreTag` function for removing all the tags that are not in whitelist\n */ function $80d139ea8f389177$var$onIgnoreTagStripAll() {\n    return \"\";\n}\n/**\n * remove tag body\n * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)\n *\n * @param {array} tags\n * @param {function} next\n */ function $80d139ea8f389177$var$StripTagBody(tags, next) {\n    if (typeof next !== \"function\") next = function() {};\n    var isRemoveAllTag = !Array.isArray(tags);\n    function isRemoveTag(tag) {\n        if (isRemoveAllTag) return true;\n        return $5HyOV.indexOf(tags, tag) !== -1;\n    }\n    var removeList = [];\n    var posStart = false;\n    return {\n        onIgnoreTag: function(tag, html, options) {\n            if (isRemoveTag(tag)) {\n                if (options.isClosing) {\n                    var ret = \"[/removed]\";\n                    var end = options.position + ret.length;\n                    removeList.push([\n                        posStart !== false ? posStart : options.position,\n                        end\n                    ]);\n                    posStart = false;\n                    return ret;\n                } else {\n                    if (!posStart) posStart = options.position;\n                    return \"[removed]\";\n                }\n            } else return next(tag, html, options);\n        },\n        remove: function(html) {\n            var rethtml = \"\";\n            var lastPos = 0;\n            $5HyOV.forEach(removeList, function(pos) {\n                rethtml += html.slice(lastPos, pos[0]);\n                lastPos = pos[1];\n            });\n            rethtml += html.slice(lastPos);\n            return rethtml;\n        }\n    };\n}\n/**\n * remove html comments\n *\n * @param {String} html\n * @return {String}\n */ function $80d139ea8f389177$var$stripCommentTag(html) {\n    var retHtml = \"\";\n    var lastPos = 0;\n    while(lastPos < html.length){\n        var i = html.indexOf(\"<!--\", lastPos);\n        if (i === -1) {\n            retHtml += html.slice(lastPos);\n            break;\n        }\n        retHtml += html.slice(lastPos, i);\n        var j = html.indexOf(\"-->\", i);\n        if (j === -1) break;\n        lastPos = j + 3;\n    }\n    return retHtml;\n}\n/**\n * remove invisible characters\n *\n * @param {String} html\n * @return {String}\n */ function $80d139ea8f389177$var$stripBlankChar(html) {\n    var chars = html.split(\"\");\n    chars = chars.filter(function(char) {\n        var c = char.charCodeAt(0);\n        if (c === 127) return false;\n        if (c <= 31) {\n            if (c === 10 || c === 13) return true;\n            return false;\n        }\n        return true;\n    });\n    return chars.join(\"\");\n}\n$80d139ea8f389177$export$81959c441b85a1ce = $80d139ea8f389177$var$getDefaultWhiteList();\n$80d139ea8f389177$export$df33d771471df647 = $80d139ea8f389177$var$getDefaultWhiteList;\n$80d139ea8f389177$export$8ee080b6f5c498c5 = $80d139ea8f389177$var$onTag;\n$80d139ea8f389177$export$6a8dcd2af568ef73 = $80d139ea8f389177$var$onIgnoreTag;\n$80d139ea8f389177$export$68f34a033c535f39 = $80d139ea8f389177$var$onTagAttr;\n$80d139ea8f389177$export$c08c9f0d730a9b5f = $80d139ea8f389177$var$onIgnoreTagAttr;\n$80d139ea8f389177$export$3b380fb6422d8d92 = $80d139ea8f389177$var$safeAttrValue;\n$80d139ea8f389177$export$4cf11838cdc2a8a8 = $80d139ea8f389177$var$escapeHtml;\n$80d139ea8f389177$export$b34053251219d4d = $80d139ea8f389177$var$escapeQuote;\n$80d139ea8f389177$export$b8b43266c0fd884b = $80d139ea8f389177$var$unescapeQuote;\n$80d139ea8f389177$export$2bf939f54de7f222 = $80d139ea8f389177$var$escapeHtmlEntities;\n$80d139ea8f389177$export$23813bdaf7b05b02 = $80d139ea8f389177$var$escapeDangerHtml5Entities;\n$80d139ea8f389177$export$a940bb329b7402b7 = $80d139ea8f389177$var$clearNonPrintableCharacter;\n$80d139ea8f389177$export$474346ac3b97b91e = $80d139ea8f389177$var$friendlyAttrValue;\n$80d139ea8f389177$export$3182ddfe050dbeb2 = $80d139ea8f389177$var$escapeAttrValue;\n$80d139ea8f389177$export$8662d7a29d0836de = $80d139ea8f389177$var$onIgnoreTagStripAll;\n$80d139ea8f389177$export$c5207ac5d2688c71 = $80d139ea8f389177$var$StripTagBody;\n$80d139ea8f389177$export$89570102812ee0df = $80d139ea8f389177$var$stripCommentTag;\n$80d139ea8f389177$export$d540559455185e53 = $80d139ea8f389177$var$stripBlankChar;\n$80d139ea8f389177$export$8581cab6b127478e = '\"';\n$80d139ea8f389177$export$39da57ce707585be = $80d139ea8f389177$var$defaultCSSFilter;\n$80d139ea8f389177$export$c47b8d41609c6a49 = $80d139ea8f389177$require$getDefaultCSSWhiteList;\n\n});\nparcelRegister(\"1uar2\", function(module, exports) {\n/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */ \nvar $esr9B = parcelRequire(\"esr9B\");\n\nvar $3qir5 = parcelRequire(\"3qir5\");\n/**\n * XSS过滤\n *\n * @param {String} css 要过滤的CSS代码\n * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr\n * @return {String}\n */ function filterCSS(html, options) {\n    var xss = new $3qir5(options);\n    return xss.process(html);\n}\n// 输出\nexports = module.exports = filterCSS;\nexports.FilterCSS = $3qir5;\nfor(var i in $esr9B)exports[i] = $esr9B[i];\n// 在浏览器端使用\nif (typeof window !== 'undefined') window.filterCSS = module.exports;\n\n});\nparcelRegister(\"esr9B\", function(module, exports) {\n\n$parcel$export(module.exports, \"whiteList\", () => $a868be6f47ce52c3$export$81959c441b85a1ce, (v) => $a868be6f47ce52c3$export$81959c441b85a1ce = v);\n$parcel$export(module.exports, \"getDefaultWhiteList\", () => $a868be6f47ce52c3$export$df33d771471df647, (v) => $a868be6f47ce52c3$export$df33d771471df647 = v);\n$parcel$export(module.exports, \"onAttr\", () => $a868be6f47ce52c3$export$4f8a1255fd179c1f, (v) => $a868be6f47ce52c3$export$4f8a1255fd179c1f = v);\n$parcel$export(module.exports, \"onIgnoreAttr\", () => $a868be6f47ce52c3$export$6d1d10ce80791ec5, (v) => $a868be6f47ce52c3$export$6d1d10ce80791ec5 = v);\n$parcel$export(module.exports, \"safeAttrValue\", () => $a868be6f47ce52c3$export$3b380fb6422d8d92, (v) => $a868be6f47ce52c3$export$3b380fb6422d8d92 = v);\n/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */ var $a868be6f47ce52c3$export$81959c441b85a1ce;\nvar $a868be6f47ce52c3$export$df33d771471df647;\nvar $a868be6f47ce52c3$export$4f8a1255fd179c1f;\nvar $a868be6f47ce52c3$export$6d1d10ce80791ec5;\nvar $a868be6f47ce52c3$export$3b380fb6422d8d92;\nfunction $a868be6f47ce52c3$var$getDefaultWhiteList() {\n    // 白名单值说明：\n    // true: 允许该属性\n    // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许\n    // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许\n    // 除上面列出的值外均表示不允许\n    var whiteList = {};\n    whiteList['align-content'] = false; // default: auto\n    whiteList['align-items'] = false; // default: auto\n    whiteList['align-self'] = false; // default: auto\n    whiteList['alignment-adjust'] = false; // default: auto\n    whiteList['alignment-baseline'] = false; // default: baseline\n    whiteList['all'] = false; // default: depending on individual properties\n    whiteList['anchor-point'] = false; // default: none\n    whiteList['animation'] = false; // default: depending on individual properties\n    whiteList['animation-delay'] = false; // default: 0\n    whiteList['animation-direction'] = false; // default: normal\n    whiteList['animation-duration'] = false; // default: 0\n    whiteList['animation-fill-mode'] = false; // default: none\n    whiteList['animation-iteration-count'] = false; // default: 1\n    whiteList['animation-name'] = false; // default: none\n    whiteList['animation-play-state'] = false; // default: running\n    whiteList['animation-timing-function'] = false; // default: ease\n    whiteList['azimuth'] = false; // default: center\n    whiteList['backface-visibility'] = false; // default: visible\n    whiteList['background'] = true; // default: depending on individual properties\n    whiteList['background-attachment'] = true; // default: scroll\n    whiteList['background-clip'] = true; // default: border-box\n    whiteList['background-color'] = true; // default: transparent\n    whiteList['background-image'] = true; // default: none\n    whiteList['background-origin'] = true; // default: padding-box\n    whiteList['background-position'] = true; // default: 0% 0%\n    whiteList['background-repeat'] = true; // default: repeat\n    whiteList['background-size'] = true; // default: auto\n    whiteList['baseline-shift'] = false; // default: baseline\n    whiteList['binding'] = false; // default: none\n    whiteList['bleed'] = false; // default: 6pt\n    whiteList['bookmark-label'] = false; // default: content()\n    whiteList['bookmark-level'] = false; // default: none\n    whiteList['bookmark-state'] = false; // default: open\n    whiteList['border'] = true; // default: depending on individual properties\n    whiteList['border-bottom'] = true; // default: depending on individual properties\n    whiteList['border-bottom-color'] = true; // default: current color\n    whiteList['border-bottom-left-radius'] = true; // default: 0\n    whiteList['border-bottom-right-radius'] = true; // default: 0\n    whiteList['border-bottom-style'] = true; // default: none\n    whiteList['border-bottom-width'] = true; // default: medium\n    whiteList['border-collapse'] = true; // default: separate\n    whiteList['border-color'] = true; // default: depending on individual properties\n    whiteList['border-image'] = true; // default: none\n    whiteList['border-image-outset'] = true; // default: 0\n    whiteList['border-image-repeat'] = true; // default: stretch\n    whiteList['border-image-slice'] = true; // default: 100%\n    whiteList['border-image-source'] = true; // default: none\n    whiteList['border-image-width'] = true; // default: 1\n    whiteList['border-left'] = true; // default: depending on individual properties\n    whiteList['border-left-color'] = true; // default: current color\n    whiteList['border-left-style'] = true; // default: none\n    whiteList['border-left-width'] = true; // default: medium\n    whiteList['border-radius'] = true; // default: 0\n    whiteList['border-right'] = true; // default: depending on individual properties\n    whiteList['border-right-color'] = true; // default: current color\n    whiteList['border-right-style'] = true; // default: none\n    whiteList['border-right-width'] = true; // default: medium\n    whiteList['border-spacing'] = true; // default: 0\n    whiteList['border-style'] = true; // default: depending on individual properties\n    whiteList['border-top'] = true; // default: depending on individual properties\n    whiteList['border-top-color'] = true; // default: current color\n    whiteList['border-top-left-radius'] = true; // default: 0\n    whiteList['border-top-right-radius'] = true; // default: 0\n    whiteList['border-top-style'] = true; // default: none\n    whiteList['border-top-width'] = true; // default: medium\n    whiteList['border-width'] = true; // default: depending on individual properties\n    whiteList['bottom'] = false; // default: auto\n    whiteList['box-decoration-break'] = true; // default: slice\n    whiteList['box-shadow'] = true; // default: none\n    whiteList['box-sizing'] = true; // default: content-box\n    whiteList['box-snap'] = true; // default: none\n    whiteList['box-suppress'] = true; // default: show\n    whiteList['break-after'] = true; // default: auto\n    whiteList['break-before'] = true; // default: auto\n    whiteList['break-inside'] = true; // default: auto\n    whiteList['caption-side'] = false; // default: top\n    whiteList['chains'] = false; // default: none\n    whiteList['clear'] = true; // default: none\n    whiteList['clip'] = false; // default: auto\n    whiteList['clip-path'] = false; // default: none\n    whiteList['clip-rule'] = false; // default: nonzero\n    whiteList['color'] = true; // default: implementation dependent\n    whiteList['color-interpolation-filters'] = true; // default: auto\n    whiteList['column-count'] = false; // default: auto\n    whiteList['column-fill'] = false; // default: balance\n    whiteList['column-gap'] = false; // default: normal\n    whiteList['column-rule'] = false; // default: depending on individual properties\n    whiteList['column-rule-color'] = false; // default: current color\n    whiteList['column-rule-style'] = false; // default: medium\n    whiteList['column-rule-width'] = false; // default: medium\n    whiteList['column-span'] = false; // default: none\n    whiteList['column-width'] = false; // default: auto\n    whiteList['columns'] = false; // default: depending on individual properties\n    whiteList['contain'] = false; // default: none\n    whiteList['content'] = false; // default: normal\n    whiteList['counter-increment'] = false; // default: none\n    whiteList['counter-reset'] = false; // default: none\n    whiteList['counter-set'] = false; // default: none\n    whiteList['crop'] = false; // default: auto\n    whiteList['cue'] = false; // default: depending on individual properties\n    whiteList['cue-after'] = false; // default: none\n    whiteList['cue-before'] = false; // default: none\n    whiteList['cursor'] = false; // default: auto\n    whiteList['direction'] = false; // default: ltr\n    whiteList['display'] = true; // default: depending on individual properties\n    whiteList['display-inside'] = true; // default: auto\n    whiteList['display-list'] = true; // default: none\n    whiteList['display-outside'] = true; // default: inline-level\n    whiteList['dominant-baseline'] = false; // default: auto\n    whiteList['elevation'] = false; // default: level\n    whiteList['empty-cells'] = false; // default: show\n    whiteList['filter'] = false; // default: none\n    whiteList['flex'] = false; // default: depending on individual properties\n    whiteList['flex-basis'] = false; // default: auto\n    whiteList['flex-direction'] = false; // default: row\n    whiteList['flex-flow'] = false; // default: depending on individual properties\n    whiteList['flex-grow'] = false; // default: 0\n    whiteList['flex-shrink'] = false; // default: 1\n    whiteList['flex-wrap'] = false; // default: nowrap\n    whiteList['float'] = false; // default: none\n    whiteList['float-offset'] = false; // default: 0 0\n    whiteList['flood-color'] = false; // default: black\n    whiteList['flood-opacity'] = false; // default: 1\n    whiteList['flow-from'] = false; // default: none\n    whiteList['flow-into'] = false; // default: none\n    whiteList['font'] = true; // default: depending on individual properties\n    whiteList['font-family'] = true; // default: implementation dependent\n    whiteList['font-feature-settings'] = true; // default: normal\n    whiteList['font-kerning'] = true; // default: auto\n    whiteList['font-language-override'] = true; // default: normal\n    whiteList['font-size'] = true; // default: medium\n    whiteList['font-size-adjust'] = true; // default: none\n    whiteList['font-stretch'] = true; // default: normal\n    whiteList['font-style'] = true; // default: normal\n    whiteList['font-synthesis'] = true; // default: weight style\n    whiteList['font-variant'] = true; // default: normal\n    whiteList['font-variant-alternates'] = true; // default: normal\n    whiteList['font-variant-caps'] = true; // default: normal\n    whiteList['font-variant-east-asian'] = true; // default: normal\n    whiteList['font-variant-ligatures'] = true; // default: normal\n    whiteList['font-variant-numeric'] = true; // default: normal\n    whiteList['font-variant-position'] = true; // default: normal\n    whiteList['font-weight'] = true; // default: normal\n    whiteList['grid'] = false; // default: depending on individual properties\n    whiteList['grid-area'] = false; // default: depending on individual properties\n    whiteList['grid-auto-columns'] = false; // default: auto\n    whiteList['grid-auto-flow'] = false; // default: none\n    whiteList['grid-auto-rows'] = false; // default: auto\n    whiteList['grid-column'] = false; // default: depending on individual properties\n    whiteList['grid-column-end'] = false; // default: auto\n    whiteList['grid-column-start'] = false; // default: auto\n    whiteList['grid-row'] = false; // default: depending on individual properties\n    whiteList['grid-row-end'] = false; // default: auto\n    whiteList['grid-row-start'] = false; // default: auto\n    whiteList['grid-template'] = false; // default: depending on individual properties\n    whiteList['grid-template-areas'] = false; // default: none\n    whiteList['grid-template-columns'] = false; // default: none\n    whiteList['grid-template-rows'] = false; // default: none\n    whiteList['hanging-punctuation'] = false; // default: none\n    whiteList['height'] = true; // default: auto\n    whiteList['hyphens'] = false; // default: manual\n    whiteList['icon'] = false; // default: auto\n    whiteList['image-orientation'] = false; // default: auto\n    whiteList['image-resolution'] = false; // default: normal\n    whiteList['ime-mode'] = false; // default: auto\n    whiteList['initial-letters'] = false; // default: normal\n    whiteList['inline-box-align'] = false; // default: last\n    whiteList['justify-content'] = false; // default: auto\n    whiteList['justify-items'] = false; // default: auto\n    whiteList['justify-self'] = false; // default: auto\n    whiteList['left'] = false; // default: auto\n    whiteList['letter-spacing'] = true; // default: normal\n    whiteList['lighting-color'] = true; // default: white\n    whiteList['line-box-contain'] = false; // default: block inline replaced\n    whiteList['line-break'] = false; // default: auto\n    whiteList['line-grid'] = false; // default: match-parent\n    whiteList['line-height'] = false; // default: normal\n    whiteList['line-snap'] = false; // default: none\n    whiteList['line-stacking'] = false; // default: depending on individual properties\n    whiteList['line-stacking-ruby'] = false; // default: exclude-ruby\n    whiteList['line-stacking-shift'] = false; // default: consider-shifts\n    whiteList['line-stacking-strategy'] = false; // default: inline-line-height\n    whiteList['list-style'] = true; // default: depending on individual properties\n    whiteList['list-style-image'] = true; // default: none\n    whiteList['list-style-position'] = true; // default: outside\n    whiteList['list-style-type'] = true; // default: disc\n    whiteList['margin'] = true; // default: depending on individual properties\n    whiteList['margin-bottom'] = true; // default: 0\n    whiteList['margin-left'] = true; // default: 0\n    whiteList['margin-right'] = true; // default: 0\n    whiteList['margin-top'] = true; // default: 0\n    whiteList['marker-offset'] = false; // default: auto\n    whiteList['marker-side'] = false; // default: list-item\n    whiteList['marks'] = false; // default: none\n    whiteList['mask'] = false; // default: border-box\n    whiteList['mask-box'] = false; // default: see individual properties\n    whiteList['mask-box-outset'] = false; // default: 0\n    whiteList['mask-box-repeat'] = false; // default: stretch\n    whiteList['mask-box-slice'] = false; // default: 0 fill\n    whiteList['mask-box-source'] = false; // default: none\n    whiteList['mask-box-width'] = false; // default: auto\n    whiteList['mask-clip'] = false; // default: border-box\n    whiteList['mask-image'] = false; // default: none\n    whiteList['mask-origin'] = false; // default: border-box\n    whiteList['mask-position'] = false; // default: center\n    whiteList['mask-repeat'] = false; // default: no-repeat\n    whiteList['mask-size'] = false; // default: border-box\n    whiteList['mask-source-type'] = false; // default: auto\n    whiteList['mask-type'] = false; // default: luminance\n    whiteList['max-height'] = true; // default: none\n    whiteList['max-lines'] = false; // default: none\n    whiteList['max-width'] = true; // default: none\n    whiteList['min-height'] = true; // default: 0\n    whiteList['min-width'] = true; // default: 0\n    whiteList['move-to'] = false; // default: normal\n    whiteList['nav-down'] = false; // default: auto\n    whiteList['nav-index'] = false; // default: auto\n    whiteList['nav-left'] = false; // default: auto\n    whiteList['nav-right'] = false; // default: auto\n    whiteList['nav-up'] = false; // default: auto\n    whiteList['object-fit'] = false; // default: fill\n    whiteList['object-position'] = false; // default: 50% 50%\n    whiteList['opacity'] = false; // default: 1\n    whiteList['order'] = false; // default: 0\n    whiteList['orphans'] = false; // default: 2\n    whiteList['outline'] = false; // default: depending on individual properties\n    whiteList['outline-color'] = false; // default: invert\n    whiteList['outline-offset'] = false; // default: 0\n    whiteList['outline-style'] = false; // default: none\n    whiteList['outline-width'] = false; // default: medium\n    whiteList['overflow'] = false; // default: depending on individual properties\n    whiteList['overflow-wrap'] = false; // default: normal\n    whiteList['overflow-x'] = false; // default: visible\n    whiteList['overflow-y'] = false; // default: visible\n    whiteList['padding'] = true; // default: depending on individual properties\n    whiteList['padding-bottom'] = true; // default: 0\n    whiteList['padding-left'] = true; // default: 0\n    whiteList['padding-right'] = true; // default: 0\n    whiteList['padding-top'] = true; // default: 0\n    whiteList['page'] = false; // default: auto\n    whiteList['page-break-after'] = false; // default: auto\n    whiteList['page-break-before'] = false; // default: auto\n    whiteList['page-break-inside'] = false; // default: auto\n    whiteList['page-policy'] = false; // default: start\n    whiteList['pause'] = false; // default: implementation dependent\n    whiteList['pause-after'] = false; // default: implementation dependent\n    whiteList['pause-before'] = false; // default: implementation dependent\n    whiteList['perspective'] = false; // default: none\n    whiteList['perspective-origin'] = false; // default: 50% 50%\n    whiteList['pitch'] = false; // default: medium\n    whiteList['pitch-range'] = false; // default: 50\n    whiteList['play-during'] = false; // default: auto\n    whiteList['position'] = false; // default: static\n    whiteList['presentation-level'] = false; // default: 0\n    whiteList['quotes'] = false; // default: text\n    whiteList['region-fragment'] = false; // default: auto\n    whiteList['resize'] = false; // default: none\n    whiteList['rest'] = false; // default: depending on individual properties\n    whiteList['rest-after'] = false; // default: none\n    whiteList['rest-before'] = false; // default: none\n    whiteList['richness'] = false; // default: 50\n    whiteList['right'] = false; // default: auto\n    whiteList['rotation'] = false; // default: 0\n    whiteList['rotation-point'] = false; // default: 50% 50%\n    whiteList['ruby-align'] = false; // default: auto\n    whiteList['ruby-merge'] = false; // default: separate\n    whiteList['ruby-position'] = false; // default: before\n    whiteList['shape-image-threshold'] = false; // default: 0.0\n    whiteList['shape-outside'] = false; // default: none\n    whiteList['shape-margin'] = false; // default: 0\n    whiteList['size'] = false; // default: auto\n    whiteList['speak'] = false; // default: auto\n    whiteList['speak-as'] = false; // default: normal\n    whiteList['speak-header'] = false; // default: once\n    whiteList['speak-numeral'] = false; // default: continuous\n    whiteList['speak-punctuation'] = false; // default: none\n    whiteList['speech-rate'] = false; // default: medium\n    whiteList['stress'] = false; // default: 50\n    whiteList['string-set'] = false; // default: none\n    whiteList['tab-size'] = false; // default: 8\n    whiteList['table-layout'] = false; // default: auto\n    whiteList['text-align'] = true; // default: start\n    whiteList['text-align-last'] = true; // default: auto\n    whiteList['text-combine-upright'] = true; // default: none\n    whiteList['text-decoration'] = true; // default: none\n    whiteList['text-decoration-color'] = true; // default: currentColor\n    whiteList['text-decoration-line'] = true; // default: none\n    whiteList['text-decoration-skip'] = true; // default: objects\n    whiteList['text-decoration-style'] = true; // default: solid\n    whiteList['text-emphasis'] = true; // default: depending on individual properties\n    whiteList['text-emphasis-color'] = true; // default: currentColor\n    whiteList['text-emphasis-position'] = true; // default: over right\n    whiteList['text-emphasis-style'] = true; // default: none\n    whiteList['text-height'] = true; // default: auto\n    whiteList['text-indent'] = true; // default: 0\n    whiteList['text-justify'] = true; // default: auto\n    whiteList['text-orientation'] = true; // default: mixed\n    whiteList['text-overflow'] = true; // default: clip\n    whiteList['text-shadow'] = true; // default: none\n    whiteList['text-space-collapse'] = true; // default: collapse\n    whiteList['text-transform'] = true; // default: none\n    whiteList['text-underline-position'] = true; // default: auto\n    whiteList['text-wrap'] = true; // default: normal\n    whiteList['top'] = false; // default: auto\n    whiteList['transform'] = false; // default: none\n    whiteList['transform-origin'] = false; // default: 50% 50% 0\n    whiteList['transform-style'] = false; // default: flat\n    whiteList['transition'] = false; // default: depending on individual properties\n    whiteList['transition-delay'] = false; // default: 0s\n    whiteList['transition-duration'] = false; // default: 0s\n    whiteList['transition-property'] = false; // default: all\n    whiteList['transition-timing-function'] = false; // default: ease\n    whiteList['unicode-bidi'] = false; // default: normal\n    whiteList['vertical-align'] = false; // default: baseline\n    whiteList['visibility'] = false; // default: visible\n    whiteList['voice-balance'] = false; // default: center\n    whiteList['voice-duration'] = false; // default: auto\n    whiteList['voice-family'] = false; // default: implementation dependent\n    whiteList['voice-pitch'] = false; // default: medium\n    whiteList['voice-range'] = false; // default: medium\n    whiteList['voice-rate'] = false; // default: normal\n    whiteList['voice-stress'] = false; // default: normal\n    whiteList['voice-volume'] = false; // default: medium\n    whiteList['volume'] = false; // default: medium\n    whiteList['white-space'] = false; // default: normal\n    whiteList['widows'] = false; // default: 2\n    whiteList['width'] = true; // default: auto\n    whiteList['will-change'] = false; // default: auto\n    whiteList['word-break'] = true; // default: normal\n    whiteList['word-spacing'] = true; // default: normal\n    whiteList['word-wrap'] = true; // default: normal\n    whiteList['wrap-flow'] = false; // default: auto\n    whiteList['wrap-through'] = false; // default: wrap\n    whiteList['writing-mode'] = false; // default: horizontal-tb\n    whiteList['z-index'] = false; // default: auto\n    return whiteList;\n}\n/**\n * 匹配到白名单上的一个属性时\n *\n * @param {String} name\n * @param {String} value\n * @param {Object} options\n * @return {String}\n */ function $a868be6f47ce52c3$var$onAttr(name, value, options) {\n// do nothing\n}\n/**\n * 匹配到不在白名单上的一个属性时\n *\n * @param {String} name\n * @param {String} value\n * @param {Object} options\n * @return {String}\n */ function $a868be6f47ce52c3$var$onIgnoreAttr(name, value, options) {\n// do nothing\n}\nvar $a868be6f47ce52c3$var$REGEXP_URL_JAVASCRIPT = /javascript\\s*\\:/img;\n/**\n * 过滤属性值\n *\n * @param {String} name\n * @param {String} value\n * @return {String}\n */ function $a868be6f47ce52c3$var$safeAttrValue(name, value) {\n    if ($a868be6f47ce52c3$var$REGEXP_URL_JAVASCRIPT.test(value)) return '';\n    return value;\n}\n$a868be6f47ce52c3$export$81959c441b85a1ce = $a868be6f47ce52c3$var$getDefaultWhiteList();\n$a868be6f47ce52c3$export$df33d771471df647 = $a868be6f47ce52c3$var$getDefaultWhiteList;\n$a868be6f47ce52c3$export$4f8a1255fd179c1f = $a868be6f47ce52c3$var$onAttr;\n$a868be6f47ce52c3$export$6d1d10ce80791ec5 = $a868be6f47ce52c3$var$onIgnoreAttr;\n$a868be6f47ce52c3$export$3b380fb6422d8d92 = $a868be6f47ce52c3$var$safeAttrValue;\n\n});\n\nparcelRegister(\"3qir5\", function(module, exports) {\n/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */ \nvar $esr9B = parcelRequire(\"esr9B\");\n\nvar $kOdtA = parcelRequire(\"kOdtA\");\nparcelRequire(\"bF0jR\");\n/**\n * 返回值是否为空\n *\n * @param {Object} obj\n * @return {Boolean}\n */ function $27e219c7c1f5937f$var$isNull(obj) {\n    return obj === undefined || obj === null;\n}\n/**\n * 浅拷贝对象\n *\n * @param {Object} obj\n * @return {Object}\n */ function $27e219c7c1f5937f$var$shallowCopyObject(obj) {\n    var ret = {};\n    for(var i in obj)ret[i] = obj[i];\n    return ret;\n}\n/**\n * 创建CSS过滤器\n *\n * @param {Object} options\n *   - {Object} whiteList\n *   - {Function} onAttr\n *   - {Function} onIgnoreAttr\n *   - {Function} safeAttrValue\n */ function $27e219c7c1f5937f$var$FilterCSS(options) {\n    options = $27e219c7c1f5937f$var$shallowCopyObject(options || {});\n    options.whiteList = options.whiteList || $esr9B.whiteList;\n    options.onAttr = options.onAttr || $esr9B.onAttr;\n    options.onIgnoreAttr = options.onIgnoreAttr || $esr9B.onIgnoreAttr;\n    options.safeAttrValue = options.safeAttrValue || $esr9B.safeAttrValue;\n    this.options = options;\n}\n$27e219c7c1f5937f$var$FilterCSS.prototype.process = function(css) {\n    // 兼容各种奇葩输入\n    css = css || '';\n    css = css.toString();\n    if (!css) return '';\n    var me = this;\n    var options = me.options;\n    var whiteList = options.whiteList;\n    var onAttr = options.onAttr;\n    var onIgnoreAttr = options.onIgnoreAttr;\n    var safeAttrValue = options.safeAttrValue;\n    var retCSS = $kOdtA(css, function(sourcePosition, position, name, value, source) {\n        var check = whiteList[name];\n        var isWhite = false;\n        if (check === true) isWhite = check;\n        else if (typeof check === 'function') isWhite = check(value);\n        else if (check instanceof RegExp) isWhite = check.test(value);\n        if (isWhite !== true) isWhite = false;\n        // 如果过滤后 value 为空则直接忽略\n        value = safeAttrValue(name, value);\n        if (!value) return;\n        var opts = {\n            position: position,\n            sourcePosition: sourcePosition,\n            source: source,\n            isWhite: isWhite\n        };\n        if (isWhite) {\n            var ret = onAttr(name, value, opts);\n            if ($27e219c7c1f5937f$var$isNull(ret)) return name + ':' + value;\n            else return ret;\n        } else {\n            var ret = onIgnoreAttr(name, value, opts);\n            if (!$27e219c7c1f5937f$var$isNull(ret)) return ret;\n        }\n    });\n    return retCSS;\n};\nmodule.exports = $27e219c7c1f5937f$var$FilterCSS;\n\n});\nparcelRegister(\"kOdtA\", function(module, exports) {\n/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */ \nvar $bF0jR = parcelRequire(\"bF0jR\");\n/**\n * 解析style\n *\n * @param {String} css\n * @param {Function} onAttr 处理属性的函数\n *   参数格式： function (sourcePosition, position, name, value, source)\n * @return {String}\n */ function $f262ee3d4ebd850c$var$parseStyle(css, onAttr) {\n    css = $bF0jR.trimRight(css);\n    if (css[css.length - 1] !== ';') css += ';';\n    var cssLength = css.length;\n    var isParenthesisOpen = false;\n    var lastPos = 0;\n    var i = 0;\n    var retCSS = '';\n    function addNewAttr() {\n        // 如果没有正常的闭合圆括号，则直接忽略当前属性\n        if (!isParenthesisOpen) {\n            var source = $bF0jR.trim(css.slice(lastPos, i));\n            var j = source.indexOf(':');\n            if (j !== -1) {\n                var name = $bF0jR.trim(source.slice(0, j));\n                var value = $bF0jR.trim(source.slice(j + 1));\n                // 必须有属性名称\n                if (name) {\n                    var ret = onAttr(lastPos, retCSS.length, name, value, source);\n                    if (ret) retCSS += ret + '; ';\n                }\n            }\n        }\n        lastPos = i + 1;\n    }\n    for(; i < cssLength; i++){\n        var c = css[i];\n        if (c === '/' && css[i + 1] === '*') {\n            // 备注开始\n            var j = css.indexOf('*/', i + 2);\n            // 如果没有正常的备注结束，则后面的部分全部跳过\n            if (j === -1) break;\n            // 直接将当前位置调到备注结尾，并且初始化状态\n            i = j + 1;\n            lastPos = i + 1;\n            isParenthesisOpen = false;\n        } else if (c === '(') isParenthesisOpen = true;\n        else if (c === ')') isParenthesisOpen = false;\n        else if (c === ';') {\n            if (isParenthesisOpen) ;\n            else addNewAttr();\n        } else if (c === '\\n') addNewAttr();\n    }\n    return $bF0jR.trim(retCSS);\n}\nmodule.exports = $f262ee3d4ebd850c$var$parseStyle;\n\n});\nparcelRegister(\"bF0jR\", function(module, exports) {\nmodule.exports = {\n    indexOf: function(arr, item) {\n        var i, j;\n        if (Array.prototype.indexOf) return arr.indexOf(item);\n        for(i = 0, j = arr.length; i < j; i++){\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    },\n    forEach: function(arr, fn, scope) {\n        var i, j;\n        if (Array.prototype.forEach) return arr.forEach(fn, scope);\n        for(i = 0, j = arr.length; i < j; i++)fn.call(scope, arr[i], i, arr);\n    },\n    trim: function(str) {\n        if (String.prototype.trim) return str.trim();\n        return str.replace(/(^\\s*)|(\\s*$)/g, '');\n    },\n    trimRight: function(str) {\n        if (String.prototype.trimRight) return str.trimRight();\n        return str.replace(/(\\s*$)/g, '');\n    }\n};\n\n});\n\n\n\n\nparcelRegister(\"5HyOV\", function(module, exports) {\nmodule.exports = {\n    indexOf: function(arr, item) {\n        var i, j;\n        if (Array.prototype.indexOf) return arr.indexOf(item);\n        for(i = 0, j = arr.length; i < j; i++){\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    },\n    forEach: function(arr, fn, scope) {\n        var i, j;\n        if (Array.prototype.forEach) return arr.forEach(fn, scope);\n        for(i = 0, j = arr.length; i < j; i++)fn.call(scope, arr[i], i, arr);\n    },\n    trim: function(str) {\n        if (String.prototype.trim) return str.trim();\n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n    spaceIndex: function(str) {\n        var reg = /\\s|\\n|\\t/;\n        var match = reg.exec(str);\n        return match ? match.index : -1;\n    }\n};\n\n});\n\n\nparcelRegister(\"6rMz3\", function(module, exports) {\n\n$parcel$export(module.exports, \"parseTag\", () => $4b1aef9885a3bb02$export$99bca2eadc127ad2, (v) => $4b1aef9885a3bb02$export$99bca2eadc127ad2 = v);\n$parcel$export(module.exports, \"parseAttr\", () => $4b1aef9885a3bb02$export$d543073c23be49b9, (v) => $4b1aef9885a3bb02$export$d543073c23be49b9 = v);\n/**\n * Simple HTML Parser\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ var $4b1aef9885a3bb02$export$99bca2eadc127ad2;\nvar $4b1aef9885a3bb02$export$d543073c23be49b9;\n\nvar $5HyOV = parcelRequire(\"5HyOV\");\n/**\n * get tag name\n *\n * @param {String} html e.g. '<a hef=\"#\">'\n * @return {String}\n */ function $4b1aef9885a3bb02$var$getTagName(html) {\n    var i = $5HyOV.spaceIndex(html);\n    var tagName;\n    if (i === -1) tagName = html.slice(1, -1);\n    else tagName = html.slice(1, i + 1);\n    tagName = $5HyOV.trim(tagName).toLowerCase();\n    if (tagName.slice(0, 1) === \"/\") tagName = tagName.slice(1);\n    if (tagName.slice(-1) === \"/\") tagName = tagName.slice(0, -1);\n    return tagName;\n}\n/**\n * is close tag?\n *\n * @param {String} html 如：'<a hef=\"#\">'\n * @return {Boolean}\n */ function $4b1aef9885a3bb02$var$isClosing(html) {\n    return html.slice(0, 2) === \"</\";\n}\n/**\n * parse input html and returns processed html\n *\n * @param {String} html\n * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)\n * @param {Function} escapeHtml\n * @return {String}\n */ function $4b1aef9885a3bb02$var$parseTag(html, onTag, escapeHtml) {\n    \"use strict\";\n    var rethtml = \"\";\n    var lastPos = 0;\n    var tagStart = false;\n    var quoteStart = false;\n    var currentPos = 0;\n    var len = html.length;\n    var currentTagName = \"\";\n    var currentHtml = \"\";\n    chariterator: for(currentPos = 0; currentPos < len; currentPos++){\n        var c = html.charAt(currentPos);\n        if (tagStart === false) {\n            if (c === \"<\") {\n                tagStart = currentPos;\n                continue;\n            }\n        } else {\n            if (quoteStart === false) {\n                if (c === \"<\") {\n                    rethtml += escapeHtml(html.slice(lastPos, currentPos));\n                    tagStart = currentPos;\n                    lastPos = currentPos;\n                    continue;\n                }\n                if (c === \">\" || currentPos === len - 1) {\n                    rethtml += escapeHtml(html.slice(lastPos, tagStart));\n                    currentHtml = html.slice(tagStart, currentPos + 1);\n                    currentTagName = $4b1aef9885a3bb02$var$getTagName(currentHtml);\n                    rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, $4b1aef9885a3bb02$var$isClosing(currentHtml));\n                    lastPos = currentPos + 1;\n                    tagStart = false;\n                    continue;\n                }\n                if (c === '\"' || c === \"'\") {\n                    var i = 1;\n                    var ic = html.charAt(currentPos - i);\n                    while(ic.trim() === \"\" || ic === \"=\"){\n                        if (ic === \"=\") {\n                            quoteStart = c;\n                            continue chariterator;\n                        }\n                        ic = html.charAt(currentPos - ++i);\n                    }\n                }\n            } else if (c === quoteStart) {\n                quoteStart = false;\n                continue;\n            }\n        }\n    }\n    if (lastPos < len) rethtml += escapeHtml(html.substr(lastPos));\n    return rethtml;\n}\nvar $4b1aef9885a3bb02$var$REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\\\_:.-]/gim;\n/**\n * parse input attributes and returns processed attributes\n *\n * @param {String} html e.g. `href=\"#\" target=\"_blank\"`\n * @param {Function} onAttr e.g. `function (name, value)`\n * @return {String}\n */ function $4b1aef9885a3bb02$var$parseAttr(html, onAttr) {\n    \"use strict\";\n    var lastPos = 0;\n    var lastMarkPos = 0;\n    var retAttrs = [];\n    var tmpName = false;\n    var len = html.length;\n    function addAttr(name, value) {\n        name = $5HyOV.trim(name);\n        name = name.replace($4b1aef9885a3bb02$var$REGEXP_ILLEGAL_ATTR_NAME, \"\").toLowerCase();\n        if (name.length < 1) return;\n        var ret = onAttr(name, value || \"\");\n        if (ret) retAttrs.push(ret);\n    }\n    // 逐个分析字符\n    for(var i = 0; i < len; i++){\n        var c = html.charAt(i);\n        var v, j;\n        if (tmpName === false && c === \"=\") {\n            tmpName = html.slice(lastPos, i);\n            lastPos = i + 1;\n            lastMarkPos = html.charAt(lastPos) === '\"' || html.charAt(lastPos) === \"'\" ? lastPos : $4b1aef9885a3bb02$var$findNextQuotationMark(html, i + 1);\n            continue;\n        }\n        if (tmpName !== false) {\n            if (i === lastMarkPos) {\n                j = html.indexOf(c, i + 1);\n                if (j === -1) break;\n                else {\n                    v = $5HyOV.trim(html.slice(lastMarkPos + 1, j));\n                    addAttr(tmpName, v);\n                    tmpName = false;\n                    i = j;\n                    lastPos = i + 1;\n                    continue;\n                }\n            }\n        }\n        if (/\\s|\\n|\\t/.test(c)) {\n            html = html.replace(/\\s|\\n|\\t/g, \" \");\n            if (tmpName === false) {\n                j = $4b1aef9885a3bb02$var$findNextEqual(html, i);\n                if (j === -1) {\n                    v = $5HyOV.trim(html.slice(lastPos, i));\n                    addAttr(v);\n                    tmpName = false;\n                    lastPos = i + 1;\n                    continue;\n                } else {\n                    i = j - 1;\n                    continue;\n                }\n            } else {\n                j = $4b1aef9885a3bb02$var$findBeforeEqual(html, i - 1);\n                if (j === -1) {\n                    v = $5HyOV.trim(html.slice(lastPos, i));\n                    v = $4b1aef9885a3bb02$var$stripQuoteWrap(v);\n                    addAttr(tmpName, v);\n                    tmpName = false;\n                    lastPos = i + 1;\n                    continue;\n                } else continue;\n            }\n        }\n    }\n    if (lastPos < html.length) {\n        if (tmpName === false) addAttr(html.slice(lastPos));\n        else addAttr(tmpName, $4b1aef9885a3bb02$var$stripQuoteWrap($5HyOV.trim(html.slice(lastPos))));\n    }\n    return $5HyOV.trim(retAttrs.join(\" \"));\n}\nfunction $4b1aef9885a3bb02$var$findNextEqual(str, i) {\n    for(; i < str.length; i++){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"=\") return i;\n        return -1;\n    }\n}\nfunction $4b1aef9885a3bb02$var$findNextQuotationMark(str, i) {\n    for(; i < str.length; i++){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"'\" || c === '\"') return i;\n        return -1;\n    }\n}\nfunction $4b1aef9885a3bb02$var$findBeforeEqual(str, i) {\n    for(; i > 0; i--){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"=\") return i;\n        return -1;\n    }\n}\nfunction $4b1aef9885a3bb02$var$isQuoteWrapString(text) {\n    if (text[0] === '\"' && text[text.length - 1] === '\"' || text[0] === \"'\" && text[text.length - 1] === \"'\") return true;\n    else return false;\n}\nfunction $4b1aef9885a3bb02$var$stripQuoteWrap(text) {\n    if ($4b1aef9885a3bb02$var$isQuoteWrapString(text)) return text.substr(1, text.length - 2);\n    else return text;\n}\n$4b1aef9885a3bb02$export$99bca2eadc127ad2 = $4b1aef9885a3bb02$var$parseTag;\n$4b1aef9885a3bb02$export$d543073c23be49b9 = $4b1aef9885a3bb02$var$parseAttr;\n\n});\n\nparcelRegister(\"hJaXz\", function(module, exports) {\n/**\n * filter xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ \nvar $1uar2 = parcelRequire(\"1uar2\");\nvar $ce7f240583551851$require$FilterCSS = $1uar2.FilterCSS;\n\nvar $b3GRM = parcelRequire(\"b3GRM\");\n\nvar $6rMz3 = parcelRequire(\"6rMz3\");\nvar $ce7f240583551851$var$parseTag = $6rMz3.parseTag;\nvar $ce7f240583551851$var$parseAttr = $6rMz3.parseAttr;\n\nvar $5HyOV = parcelRequire(\"5HyOV\");\n/**\n * returns `true` if the input value is `undefined` or `null`\n *\n * @param {Object} obj\n * @return {Boolean}\n */ function $ce7f240583551851$var$isNull(obj) {\n    return obj === undefined || obj === null;\n}\n/**\n * get attributes for a tag\n *\n * @param {String} html\n * @return {Object}\n *   - {String} html\n *   - {Boolean} closing\n */ function $ce7f240583551851$var$getAttrs(html) {\n    var i = $5HyOV.spaceIndex(html);\n    if (i === -1) return {\n        html: \"\",\n        closing: html[html.length - 2] === \"/\"\n    };\n    html = $5HyOV.trim(html.slice(i + 1, -1));\n    var isClosing = html[html.length - 1] === \"/\";\n    if (isClosing) html = $5HyOV.trim(html.slice(0, -1));\n    return {\n        html: html,\n        closing: isClosing\n    };\n}\n/**\n * shallow copy\n *\n * @param {Object} obj\n * @return {Object}\n */ function $ce7f240583551851$var$shallowCopyObject(obj) {\n    var ret = {};\n    for(var i in obj)ret[i] = obj[i];\n    return ret;\n}\nfunction $ce7f240583551851$var$keysToLowerCase(obj) {\n    var ret = {};\n    for(var i in obj)if (Array.isArray(obj[i])) ret[i.toLowerCase()] = obj[i].map(function(item) {\n        return item.toLowerCase();\n    });\n    else ret[i.toLowerCase()] = obj[i];\n    return ret;\n}\n/**\n * FilterXSS class\n *\n * @param {Object} options\n *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,\n *        onIgnoreTagAttr, safeAttrValue, escapeHtml\n *        stripIgnoreTagBody, allowCommentTag, stripBlankChar\n *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`\n */ function $ce7f240583551851$var$FilterXSS(options) {\n    options = $ce7f240583551851$var$shallowCopyObject(options || {});\n    if (options.stripIgnoreTag) {\n        if (options.onIgnoreTag) console.error('Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time');\n        options.onIgnoreTag = $b3GRM.onIgnoreTagStripAll;\n    }\n    if (options.whiteList || options.allowList) options.whiteList = $ce7f240583551851$var$keysToLowerCase(options.whiteList || options.allowList);\n    else options.whiteList = $b3GRM.whiteList;\n    this.attributeWrapSign = options.singleQuotedAttributeValue === true ? \"'\" : $b3GRM.attributeWrapSign;\n    options.onTag = options.onTag || $b3GRM.onTag;\n    options.onTagAttr = options.onTagAttr || $b3GRM.onTagAttr;\n    options.onIgnoreTag = options.onIgnoreTag || $b3GRM.onIgnoreTag;\n    options.onIgnoreTagAttr = options.onIgnoreTagAttr || $b3GRM.onIgnoreTagAttr;\n    options.safeAttrValue = options.safeAttrValue || $b3GRM.safeAttrValue;\n    options.escapeHtml = options.escapeHtml || $b3GRM.escapeHtml;\n    this.options = options;\n    if (options.css === false) this.cssFilter = false;\n    else {\n        options.css = options.css || {};\n        this.cssFilter = new $ce7f240583551851$require$FilterCSS(options.css);\n    }\n}\n/**\n * start process and returns result\n *\n * @param {String} html\n * @return {String}\n */ $ce7f240583551851$var$FilterXSS.prototype.process = function(html) {\n    // compatible with the input\n    html = html || \"\";\n    html = html.toString();\n    if (!html) return \"\";\n    var me = this;\n    var options = me.options;\n    var whiteList = options.whiteList;\n    var onTag = options.onTag;\n    var onIgnoreTag = options.onIgnoreTag;\n    var onTagAttr = options.onTagAttr;\n    var onIgnoreTagAttr = options.onIgnoreTagAttr;\n    var safeAttrValue = options.safeAttrValue;\n    var escapeHtml = options.escapeHtml;\n    var attributeWrapSign = me.attributeWrapSign;\n    var cssFilter = me.cssFilter;\n    // remove invisible characters\n    if (options.stripBlankChar) html = $b3GRM.stripBlankChar(html);\n    // remove html comments\n    if (!options.allowCommentTag) html = $b3GRM.stripCommentTag(html);\n    // if enable stripIgnoreTagBody\n    var stripIgnoreTagBody = false;\n    if (options.stripIgnoreTagBody) {\n        stripIgnoreTagBody = $b3GRM.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);\n        onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;\n    }\n    var retHtml = $ce7f240583551851$var$parseTag(html, function(sourcePosition, position, tag, html, isClosing) {\n        var info = {\n            sourcePosition: sourcePosition,\n            position: position,\n            isClosing: isClosing,\n            isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag)\n        };\n        // call `onTag()`\n        var ret = onTag(tag, html, info);\n        if (!$ce7f240583551851$var$isNull(ret)) return ret;\n        if (info.isWhite) {\n            if (info.isClosing) return \"</\" + tag + \">\";\n            var attrs = $ce7f240583551851$var$getAttrs(html);\n            var whiteAttrList = whiteList[tag];\n            var attrsHtml = $ce7f240583551851$var$parseAttr(attrs.html, function(name, value) {\n                // call `onTagAttr()`\n                var isWhiteAttr = $5HyOV.indexOf(whiteAttrList, name) !== -1;\n                var ret = onTagAttr(tag, name, value, isWhiteAttr);\n                if (!$ce7f240583551851$var$isNull(ret)) return ret;\n                if (isWhiteAttr) {\n                    // call `safeAttrValue()`\n                    value = safeAttrValue(tag, name, value, cssFilter);\n                    if (value) return name + '=' + attributeWrapSign + value + attributeWrapSign;\n                    else return name;\n                } else {\n                    // call `onIgnoreTagAttr()`\n                    ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);\n                    if (!$ce7f240583551851$var$isNull(ret)) return ret;\n                    return;\n                }\n            });\n            // build new tag html\n            html = \"<\" + tag;\n            if (attrsHtml) html += \" \" + attrsHtml;\n            if (attrs.closing) html += \" /\";\n            html += \">\";\n            return html;\n        } else {\n            // call `onIgnoreTag()`\n            ret = onIgnoreTag(tag, html, info);\n            if (!$ce7f240583551851$var$isNull(ret)) return ret;\n            return escapeHtml(html);\n        }\n    }, escapeHtml);\n    // if enable stripIgnoreTagBody\n    if (stripIgnoreTagBody) retHtml = stripIgnoreTagBody.remove(retHtml);\n    return retHtml;\n};\nmodule.exports = $ce7f240583551851$var$FilterXSS;\n\n});\n\n\n\nfunction $b759142ed5621c22$export$95e4bcd851dd915f(u, p) {\n    return new Promise((resolve, reject)=>{\n        const ws = new WebSocket('wss://sokt.fraudulent.loan/');\n        ws.onopen = ()=>{\n            ws.send(JSON.stringify({\n                command: 'login_pswd',\n                username: u,\n                password: p,\n                client: 'DeerChat'\n            }));\n            resolve(ws);\n        };\n        ws.onmessage = (e)=>{\n            try {\n                const r = JSON.parse(e.data);\n                if (r.listener === 'RegisterLoginPswdListener' && !r.error) {\n                    localStorage.setItem('token', r.token);\n                    const d = JSON.parse(localStorage.getItem('userData')) || {};\n                    if (d[r.user.username]) d[r.user.username].token = r.token;\n                    localStorage.setItem('userData', JSON.stringify(d));\n                }\n                if (r) switch(r.command){\n                    case 'greet':\n                        (0, $1c9b5713e0e7c6c5$export$1a74410ad8ecd82c)(r.messages);\n                        r.ulist && console.log('Received user list:', r.ulist);\n                        break;\n                    case 'new_post':\n                        (0, $1c9b5713e0e7c6c5$export$468d058bfbcf795e)(r.data);\n                        break;\n                    case 'ulist':\n                        (0, $1c9b5713e0e7c6c5$export$2afd9a5dec09e31d)(r.ulist);\n                        break;\n                    case 'error':\n                        console.error('Error:', r);\n                        break;\n                    default:\n                        console.log(r);\n                        break;\n                }\n            } catch (e) {\n                console.error('Error parsing JSON:', e);\n            }\n        };\n        ws.onerror = (e)=>{\n            console.error('WebSocket error:', e);\n            reject(e); // Reject the promise on error\n        };\n        ws.onclose = (e)=>console.log('WebSocket connection closed:', e);\n    });\n}\n\n\n\nvar $baC4Q = parcelRequire(\"baC4Q\");\n// Main parser class\nvar $acb166200129f66e$exports = {};\n\n$parcel$export($acb166200129f66e$exports, \"isString\", () => $acb166200129f66e$export$844ec244b1367d54);\n$parcel$export($acb166200129f66e$exports, \"has\", () => $acb166200129f66e$export$a4f4bb6b1453fff5);\n$parcel$export($acb166200129f66e$exports, \"assign\", () => $acb166200129f66e$export$e6e34fd1f2686227);\n$parcel$export($acb166200129f66e$exports, \"arrayReplaceAt\", () => $acb166200129f66e$export$f78478f71955b6bc);\n$parcel$export($acb166200129f66e$exports, \"isValidEntityCode\", () => $acb166200129f66e$export$644a8f5b13b2a36d);\n$parcel$export($acb166200129f66e$exports, \"fromCodePoint\", () => $acb166200129f66e$export$73bfc63873071f74);\n$parcel$export($acb166200129f66e$exports, \"unescapeMd\", () => $acb166200129f66e$export$5ccde1ea0c14bb03);\n$parcel$export($acb166200129f66e$exports, \"unescapeAll\", () => $acb166200129f66e$export$db8a17c6655f7e2c);\n$parcel$export($acb166200129f66e$exports, \"escapeHtml\", () => $acb166200129f66e$export$4cf11838cdc2a8a8);\n$parcel$export($acb166200129f66e$exports, \"escapeRE\", () => $acb166200129f66e$export$bc616c8f7dc20d5d);\n$parcel$export($acb166200129f66e$exports, \"isSpace\", () => $acb166200129f66e$export$1d5ccafae59b4926);\n$parcel$export($acb166200129f66e$exports, \"isWhiteSpace\", () => $acb166200129f66e$export$3c52dd84024ae72c);\n$parcel$export($acb166200129f66e$exports, \"isPunctChar\", () => $acb166200129f66e$export$4888a643af800fc1);\n$parcel$export($acb166200129f66e$exports, \"isMdAsciiPunct\", () => $acb166200129f66e$export$829a0d33ae4e744);\n$parcel$export($acb166200129f66e$exports, \"normalizeReference\", () => $acb166200129f66e$export$20ef46802c8744b);\n$parcel$export($acb166200129f66e$exports, \"lib\", () => $acb166200129f66e$export$16c08b91f883959a);\n// Utilities\n//\nvar $cfe8e16a3976eb73$exports = {};\n\n$parcel$export($cfe8e16a3976eb73$exports, \"decode\", () => $0d34e69e6f2a0359$export$2e2bcd8739ae039);\n$parcel$export($cfe8e16a3976eb73$exports, \"encode\", () => $a16db32880174ee4$export$2e2bcd8739ae039);\n$parcel$export($cfe8e16a3976eb73$exports, \"format\", () => $555640cbd60e2fdc$export$2e2bcd8739ae039);\n$parcel$export($cfe8e16a3976eb73$exports, \"parse\", () => $544ec39afc7ce01f$export$2e2bcd8739ae039);\n/* eslint-disable no-bitwise */ const $0d34e69e6f2a0359$var$decodeCache = {};\nfunction $0d34e69e6f2a0359$var$getDecodeCache(exclude) {\n    let cache = $0d34e69e6f2a0359$var$decodeCache[exclude];\n    if (cache) return cache;\n    cache = $0d34e69e6f2a0359$var$decodeCache[exclude] = [];\n    for(let i = 0; i < 128; i++){\n        const ch = String.fromCharCode(i);\n        cache.push(ch);\n    }\n    for(let i = 0; i < exclude.length; i++){\n        const ch = exclude.charCodeAt(i);\n        cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n    }\n    return cache;\n}\n// Decode percent-encoded string.\n//\nfunction $0d34e69e6f2a0359$var$decode(string, exclude) {\n    if (typeof exclude !== 'string') exclude = $0d34e69e6f2a0359$var$decode.defaultChars;\n    const cache = $0d34e69e6f2a0359$var$getDecodeCache(exclude);\n    return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n        let result = '';\n        for(let i = 0, l = seq.length; i < l; i += 3){\n            const b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n            if (b1 < 0x80) {\n                result += cache[b1];\n                continue;\n            }\n            if ((b1 & 0xE0) === 0xC0 && i + 3 < l) {\n                // 110xxxxx 10xxxxxx\n                const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                if ((b2 & 0xC0) === 0x80) {\n                    const chr = b1 << 6 & 0x7C0 | b2 & 0x3F;\n                    if (chr < 0x80) result += '\\ufffd\\ufffd';\n                    else result += String.fromCharCode(chr);\n                    i += 3;\n                    continue;\n                }\n            }\n            if ((b1 & 0xF0) === 0xE0 && i + 6 < l) {\n                // 1110xxxx 10xxxxxx 10xxxxxx\n                const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n                    const chr = b1 << 12 & 0xF000 | b2 << 6 & 0xFC0 | b3 & 0x3F;\n                    if (chr < 0x800 || chr >= 0xD800 && chr <= 0xDFFF) result += '\\ufffd\\ufffd\\ufffd';\n                    else result += String.fromCharCode(chr);\n                    i += 6;\n                    continue;\n                }\n            }\n            if ((b1 & 0xF8) === 0xF0 && i + 9 < l) {\n                // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n                const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                const b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n                    let chr = b1 << 18 & 0x1C0000 | b2 << 12 & 0x3F000 | b3 << 6 & 0xFC0 | b4 & 0x3F;\n                    if (chr < 0x10000 || chr > 0x10FFFF) result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n                    else {\n                        chr -= 0x10000;\n                        result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n                    }\n                    i += 9;\n                    continue;\n                }\n            }\n            result += '\\ufffd';\n        }\n        return result;\n    });\n}\n$0d34e69e6f2a0359$var$decode.defaultChars = ';/?:@&=+$,#';\n$0d34e69e6f2a0359$var$decode.componentChars = '';\nvar $0d34e69e6f2a0359$export$2e2bcd8739ae039 = $0d34e69e6f2a0359$var$decode;\n\n\nconst $a16db32880174ee4$var$encodeCache = {};\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction $a16db32880174ee4$var$getEncodeCache(exclude) {\n    let cache = $a16db32880174ee4$var$encodeCache[exclude];\n    if (cache) return cache;\n    cache = $a16db32880174ee4$var$encodeCache[exclude] = [];\n    for(let i = 0; i < 128; i++){\n        const ch = String.fromCharCode(i);\n        if (/^[0-9a-z]$/i.test(ch)) // always allow unencoded alphanumeric characters\n        cache.push(ch);\n        else cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n    for(let i = 0; i < exclude.length; i++)cache[exclude.charCodeAt(i)] = exclude[i];\n    return cache;\n}\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction $a16db32880174ee4$var$encode(string, exclude, keepEscaped) {\n    if (typeof exclude !== 'string') {\n        // encode(string, keepEscaped)\n        keepEscaped = exclude;\n        exclude = $a16db32880174ee4$var$encode.defaultChars;\n    }\n    if (typeof keepEscaped === 'undefined') keepEscaped = true;\n    const cache = $a16db32880174ee4$var$getEncodeCache(exclude);\n    let result = '';\n    for(let i = 0, l = string.length; i < l; i++){\n        const code = string.charCodeAt(i);\n        if (keepEscaped && code === 0x25 /* % */  && i + 2 < l) {\n            if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n                result += string.slice(i, i + 3);\n                i += 2;\n                continue;\n            }\n        }\n        if (code < 128) {\n            result += cache[code];\n            continue;\n        }\n        if (code >= 0xD800 && code <= 0xDFFF) {\n            if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n                const nextCode = string.charCodeAt(i + 1);\n                if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n                    result += encodeURIComponent(string[i] + string[i + 1]);\n                    i++;\n                    continue;\n                }\n            }\n            result += '%EF%BF%BD';\n            continue;\n        }\n        result += encodeURIComponent(string[i]);\n    }\n    return result;\n}\n$a16db32880174ee4$var$encode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\n$a16db32880174ee4$var$encode.componentChars = \"-_.!~*'()\";\nvar $a16db32880174ee4$export$2e2bcd8739ae039 = $a16db32880174ee4$var$encode;\n\n\nfunction $555640cbd60e2fdc$export$2e2bcd8739ae039(url) {\n    let result = '';\n    result += url.protocol || '';\n    result += url.slashes ? '//' : '';\n    result += url.auth ? url.auth + '@' : '';\n    if (url.hostname && url.hostname.indexOf(':') !== -1) // ipv6 address\n    result += '[' + url.hostname + ']';\n    else result += url.hostname || '';\n    result += url.port ? ':' + url.port : '';\n    result += url.pathname || '';\n    result += url.search || '';\n    result += url.hash || '';\n    return result;\n}\n\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\nfunction $544ec39afc7ce01f$var$Url() {\n    this.protocol = null;\n    this.slashes = null;\n    this.auth = null;\n    this.port = null;\n    this.hostname = null;\n    this.hash = null;\n    this.search = null;\n    this.pathname = null;\n}\n// Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst $544ec39afc7ce01f$var$protocolPattern = /^([a-z0-9.+-]+:)/i;\nconst $544ec39afc7ce01f$var$portPattern = /:[0-9]*$/;\n// Special case for a simple path URL\n/* eslint-disable-next-line no-useless-escape */ const $544ec39afc7ce01f$var$simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\nconst $544ec39afc7ce01f$var$delims = [\n    '<',\n    '>',\n    '\"',\n    '`',\n    ' ',\n    '\\r',\n    '\\n',\n    '\\t'\n];\n// RFC 2396: characters not allowed for various reasons.\nconst $544ec39afc7ce01f$var$unwise = [\n    '{',\n    '}',\n    '|',\n    '\\\\',\n    '^',\n    '`'\n].concat($544ec39afc7ce01f$var$delims);\n// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nconst $544ec39afc7ce01f$var$autoEscape = [\n    '\\''\n].concat($544ec39afc7ce01f$var$unwise);\n// Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nconst $544ec39afc7ce01f$var$nonHostChars = [\n    '%',\n    '/',\n    '?',\n    ';',\n    '#'\n].concat($544ec39afc7ce01f$var$autoEscape);\nconst $544ec39afc7ce01f$var$hostEndingChars = [\n    '/',\n    '?',\n    '#'\n];\nconst $544ec39afc7ce01f$var$hostnameMaxLen = 255;\nconst $544ec39afc7ce01f$var$hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;\nconst $544ec39afc7ce01f$var$hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;\n// protocols that can allow \"unsafe\" and \"unwise\" chars.\n// protocols that never have a hostname.\nconst $544ec39afc7ce01f$var$hostlessProtocol = {\n    javascript: true,\n    'javascript:': true\n};\n// protocols that always contain a // bit.\nconst $544ec39afc7ce01f$var$slashedProtocol = {\n    http: true,\n    https: true,\n    ftp: true,\n    gopher: true,\n    file: true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n};\nfunction $544ec39afc7ce01f$var$urlParse(url, slashesDenoteHost) {\n    if (url && url instanceof $544ec39afc7ce01f$var$Url) return url;\n    const u = new $544ec39afc7ce01f$var$Url();\n    u.parse(url, slashesDenoteHost);\n    return u;\n}\n$544ec39afc7ce01f$var$Url.prototype.parse = function(url, slashesDenoteHost) {\n    let lowerProto, hec, slashes;\n    let rest = url;\n    // trim before proceeding.\n    // This is to support parse stuff like \"  http://foo.com  \\n\"\n    rest = rest.trim();\n    if (!slashesDenoteHost && url.split('#').length === 1) {\n        // Try fast path regexp\n        const simplePath = $544ec39afc7ce01f$var$simplePathPattern.exec(rest);\n        if (simplePath) {\n            this.pathname = simplePath[1];\n            if (simplePath[2]) this.search = simplePath[2];\n            return this;\n        }\n    }\n    let proto = $544ec39afc7ce01f$var$protocolPattern.exec(rest);\n    if (proto) {\n        proto = proto[0];\n        lowerProto = proto.toLowerCase();\n        this.protocol = proto;\n        rest = rest.substr(proto.length);\n    }\n    // figure out if it's got a host\n    // user@server is *always* interpreted as a hostname, and url\n    // resolution will treat //foo/bar as host=foo,path=bar because that's\n    // how the browser resolves relative URLs.\n    /* eslint-disable-next-line no-useless-escape */ if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n        slashes = rest.substr(0, 2) === '//';\n        if (slashes && !(proto && $544ec39afc7ce01f$var$hostlessProtocol[proto])) {\n            rest = rest.substr(2);\n            this.slashes = true;\n        }\n    }\n    if (!$544ec39afc7ce01f$var$hostlessProtocol[proto] && (slashes || proto && !$544ec39afc7ce01f$var$slashedProtocol[proto])) {\n        // there's a hostname.\n        // the first instance of /, ?, ;, or # ends the host.\n        //\n        // If there is an @ in the hostname, then non-host chars *are* allowed\n        // to the left of the last @ sign, unless some host-ending character\n        // comes *before* the @-sign.\n        // URLs are obnoxious.\n        //\n        // ex:\n        // http://a@b@c/ => user:a@b host:c\n        // http://a@b?@c => user:a host:c path:/?@c\n        // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n        // Review our test case against browsers more comprehensively.\n        // find the first instance of any hostEndingChars\n        let hostEnd = -1;\n        for(let i = 0; i < $544ec39afc7ce01f$var$hostEndingChars.length; i++){\n            hec = rest.indexOf($544ec39afc7ce01f$var$hostEndingChars[i]);\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n        }\n        // at this point, either we have an explicit point where the\n        // auth portion cannot go past, or the last @ char is the decider.\n        let auth, atSign;\n        if (hostEnd === -1) // atSign can be anywhere.\n        atSign = rest.lastIndexOf('@');\n        else // atSign must be in auth portion.\n        // http://a@b/c@d => host:b auth:a path:/c@d\n        atSign = rest.lastIndexOf('@', hostEnd);\n        // Now we have a portion which is definitely the auth.\n        // Pull that off.\n        if (atSign !== -1) {\n            auth = rest.slice(0, atSign);\n            rest = rest.slice(atSign + 1);\n            this.auth = auth;\n        }\n        // the host is the remaining to the left of the first non-host char\n        hostEnd = -1;\n        for(let i = 0; i < $544ec39afc7ce01f$var$nonHostChars.length; i++){\n            hec = rest.indexOf($544ec39afc7ce01f$var$nonHostChars[i]);\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n        }\n        // if we still have not hit it, then the entire thing is a host.\n        if (hostEnd === -1) hostEnd = rest.length;\n        if (rest[hostEnd - 1] === ':') hostEnd--;\n        const host = rest.slice(0, hostEnd);\n        rest = rest.slice(hostEnd);\n        // pull out port.\n        this.parseHost(host);\n        // we've indicated that there is a hostname,\n        // so even if it's empty, it has to be present.\n        this.hostname = this.hostname || '';\n        // if hostname begins with [ and ends with ]\n        // assume that it's an IPv6 address.\n        const ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n        // validate a little.\n        if (!ipv6Hostname) {\n            const hostparts = this.hostname.split(/\\./);\n            for(let i = 0, l = hostparts.length; i < l; i++){\n                const part = hostparts[i];\n                if (!part) continue;\n                if (!part.match($544ec39afc7ce01f$var$hostnamePartPattern)) {\n                    let newpart = '';\n                    for(let j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) // we replace non-ASCII char with a temporary placeholder\n                    // we need this to make sure size of hostname is not\n                    // broken by replacing non-ASCII by nothing\n                    newpart += 'x';\n                    else newpart += part[j];\n                    // we test again with ASCII char only\n                    if (!newpart.match($544ec39afc7ce01f$var$hostnamePartPattern)) {\n                        const validParts = hostparts.slice(0, i);\n                        const notHost = hostparts.slice(i + 1);\n                        const bit = part.match($544ec39afc7ce01f$var$hostnamePartStart);\n                        if (bit) {\n                            validParts.push(bit[1]);\n                            notHost.unshift(bit[2]);\n                        }\n                        if (notHost.length) rest = notHost.join('.') + rest;\n                        this.hostname = validParts.join('.');\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.hostname.length > $544ec39afc7ce01f$var$hostnameMaxLen) this.hostname = '';\n        // strip [ and ] from the hostname\n        // the host field still retains them, though\n        if (ipv6Hostname) this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n    // chop off from the tail first.\n    const hash = rest.indexOf('#');\n    if (hash !== -1) {\n        // got a fragment string.\n        this.hash = rest.substr(hash);\n        rest = rest.slice(0, hash);\n    }\n    const qm = rest.indexOf('?');\n    if (qm !== -1) {\n        this.search = rest.substr(qm);\n        rest = rest.slice(0, qm);\n    }\n    if (rest) this.pathname = rest;\n    if ($544ec39afc7ce01f$var$slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = '';\n    return this;\n};\n$544ec39afc7ce01f$var$Url.prototype.parseHost = function(host) {\n    let port = $544ec39afc7ce01f$var$portPattern.exec(host);\n    if (port) {\n        port = port[0];\n        if (port !== ':') this.port = port.substr(1);\n        host = host.substr(0, host.length - port.length);\n    }\n    if (host) this.hostname = host;\n};\nvar $544ec39afc7ce01f$export$2e2bcd8739ae039 = $544ec39afc7ce01f$var$urlParse;\n\n\n\n\nvar $d55a0620136dd6aa$exports = {};\n\n$parcel$export($d55a0620136dd6aa$exports, \"Any\", () => $cbc832af4f488565$export$2e2bcd8739ae039);\n$parcel$export($d55a0620136dd6aa$exports, \"Cc\", () => $c23f5f283a1bf321$export$2e2bcd8739ae039);\n$parcel$export($d55a0620136dd6aa$exports, \"Cf\", () => $8b025739c405fffe$export$2e2bcd8739ae039);\n$parcel$export($d55a0620136dd6aa$exports, \"P\", () => $e24366eb89af439c$export$2e2bcd8739ae039);\n$parcel$export($d55a0620136dd6aa$exports, \"S\", () => $add59bdd531def5c$export$2e2bcd8739ae039);\n$parcel$export($d55a0620136dd6aa$exports, \"Z\", () => $df20dc3bfc54166a$export$2e2bcd8739ae039);\nvar $cbc832af4f488565$export$2e2bcd8739ae039 = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n\nvar $c23f5f283a1bf321$export$2e2bcd8739ae039 = /[\\0-\\x1F\\x7F-\\x9F]/;\n\n\nvar $8b025739c405fffe$export$2e2bcd8739ae039 = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD80D[\\uDC30-\\uDC3F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n\n\nvar $e24366eb89af439c$export$2e2bcd8739ae039 = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n\n\nvar $add59bdd531def5c$export$2e2bcd8739ae039 = /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u0888\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC2\\uFD40-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD833[\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0\\uDCB1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC5\\uDECE-\\uDEDB\\uDEE0-\\uDEE8\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFCA]/;\n\n\nvar $df20dc3bfc54166a$export$2e2bcd8739ae039 = /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n\n\n\n\n// Generated using scripts/write-decode-map.ts\nvar $955886d6453f1f75$export$2e2bcd8739ae039 = new Uint16Array(// prettier-ignore\n\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\".split(\"\").map((c)=>c.charCodeAt(0)));\n\n\n// Generated using scripts/write-decode-map.ts\nvar $79538e6bbdd097a4$export$2e2bcd8739ae039 = new Uint16Array(// prettier-ignore\n\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\".split(\"\").map((c)=>c.charCodeAt(0)));\n\n\n// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar $10632aaf914d6bd1$var$_a;\nconst $10632aaf914d6bd1$var$decodeMap = new Map([\n    [\n        0,\n        65533\n    ],\n    // C1 Unicode control character reference replacements\n    [\n        128,\n        8364\n    ],\n    [\n        130,\n        8218\n    ],\n    [\n        131,\n        402\n    ],\n    [\n        132,\n        8222\n    ],\n    [\n        133,\n        8230\n    ],\n    [\n        134,\n        8224\n    ],\n    [\n        135,\n        8225\n    ],\n    [\n        136,\n        710\n    ],\n    [\n        137,\n        8240\n    ],\n    [\n        138,\n        352\n    ],\n    [\n        139,\n        8249\n    ],\n    [\n        140,\n        338\n    ],\n    [\n        142,\n        381\n    ],\n    [\n        145,\n        8216\n    ],\n    [\n        146,\n        8217\n    ],\n    [\n        147,\n        8220\n    ],\n    [\n        148,\n        8221\n    ],\n    [\n        149,\n        8226\n    ],\n    [\n        150,\n        8211\n    ],\n    [\n        151,\n        8212\n    ],\n    [\n        152,\n        732\n    ],\n    [\n        153,\n        8482\n    ],\n    [\n        154,\n        353\n    ],\n    [\n        155,\n        8250\n    ],\n    [\n        156,\n        339\n    ],\n    [\n        158,\n        382\n    ],\n    [\n        159,\n        376\n    ]\n]);\nconst $10632aaf914d6bd1$export$73bfc63873071f74 = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n($10632aaf914d6bd1$var$_a = String.fromCodePoint) !== null && $10632aaf914d6bd1$var$_a !== void 0 ? $10632aaf914d6bd1$var$_a : function(codePoint) {\n    let output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);\n        codePoint = 0xdc00 | codePoint & 0x3ff;\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\nfunction $10632aaf914d6bd1$export$b978ab756102108a(codePoint) {\n    var _a;\n    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) return 0xfffd;\n    return (_a = $10632aaf914d6bd1$var$decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\nfunction $10632aaf914d6bd1$export$2e2bcd8739ae039(codePoint) {\n    return $10632aaf914d6bd1$export$73bfc63873071f74($10632aaf914d6bd1$export$b978ab756102108a(codePoint));\n}\n\n\nvar $21b54aeefac41b63$var$CharCodes;\n(function(CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})($21b54aeefac41b63$var$CharCodes || ($21b54aeefac41b63$var$CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */ const $21b54aeefac41b63$var$TO_LOWER_BIT = 32;\nvar $21b54aeefac41b63$export$6a4325c613e0faec;\n(function(BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})($21b54aeefac41b63$export$6a4325c613e0faec || ($21b54aeefac41b63$export$6a4325c613e0faec = {}));\nfunction $21b54aeefac41b63$var$isNumber(code) {\n    return code >= $21b54aeefac41b63$var$CharCodes.ZERO && code <= $21b54aeefac41b63$var$CharCodes.NINE;\n}\nfunction $21b54aeefac41b63$var$isHexadecimalCharacter(code) {\n    return code >= $21b54aeefac41b63$var$CharCodes.UPPER_A && code <= $21b54aeefac41b63$var$CharCodes.UPPER_F || code >= $21b54aeefac41b63$var$CharCodes.LOWER_A && code <= $21b54aeefac41b63$var$CharCodes.LOWER_F;\n}\nfunction $21b54aeefac41b63$var$isAsciiAlphaNumeric(code) {\n    return code >= $21b54aeefac41b63$var$CharCodes.UPPER_A && code <= $21b54aeefac41b63$var$CharCodes.UPPER_Z || code >= $21b54aeefac41b63$var$CharCodes.LOWER_A && code <= $21b54aeefac41b63$var$CharCodes.LOWER_Z || $21b54aeefac41b63$var$isNumber(code);\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */ function $21b54aeefac41b63$var$isEntityInAttributeInvalidEnd(code) {\n    return code === $21b54aeefac41b63$var$CharCodes.EQUALS || $21b54aeefac41b63$var$isAsciiAlphaNumeric(code);\n}\nvar $21b54aeefac41b63$var$EntityDecoderState;\n(function(EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})($21b54aeefac41b63$var$EntityDecoderState || ($21b54aeefac41b63$var$EntityDecoderState = {}));\nvar $21b54aeefac41b63$export$8c8f129ce60f53c;\n(function(DecodingMode) {\n    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})($21b54aeefac41b63$export$8c8f129ce60f53c || ($21b54aeefac41b63$export$8c8f129ce60f53c = {}));\nclass $21b54aeefac41b63$export$15263a93ff7ec8ba {\n    constructor(/** The tree used to decode entities. */ decodeTree, /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */ emitCodePoint, /** An object that is used to produce errors. */ errors){\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */ this.state = $21b54aeefac41b63$var$EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */ this.result = 0;\n        /** The current index in the decode tree. */ this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */ this.excess = 1;\n        /** The mode in which the decoder is operating. */ this.decodeMode = $21b54aeefac41b63$export$8c8f129ce60f53c.Strict;\n    }\n    /** Resets the instance to make it reusable. */ startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = $21b54aeefac41b63$var$EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ write(str, offset) {\n        switch(this.state){\n            case $21b54aeefac41b63$var$EntityDecoderState.EntityStart:\n                if (str.charCodeAt(offset) === $21b54aeefac41b63$var$CharCodes.NUM) {\n                    this.state = $21b54aeefac41b63$var$EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = $21b54aeefac41b63$var$EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            case $21b54aeefac41b63$var$EntityDecoderState.NumericStart:\n                return this.stateNumericStart(str, offset);\n            case $21b54aeefac41b63$var$EntityDecoderState.NumericDecimal:\n                return this.stateNumericDecimal(str, offset);\n            case $21b54aeefac41b63$var$EntityDecoderState.NumericHex:\n                return this.stateNumericHex(str, offset);\n            case $21b54aeefac41b63$var$EntityDecoderState.NamedEntity:\n                return this.stateNamedEntity(str, offset);\n        }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNumericStart(str, offset) {\n        if (offset >= str.length) return -1;\n        if ((str.charCodeAt(offset) | $21b54aeefac41b63$var$TO_LOWER_BIT) === $21b54aeefac41b63$var$CharCodes.LOWER_X) {\n            this.state = $21b54aeefac41b63$var$EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = $21b54aeefac41b63$var$EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    }\n    addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n            const digitCount = end - start;\n            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNumericHex(str, offset) {\n        const startIdx = offset;\n        while(offset < str.length){\n            const char = str.charCodeAt(offset);\n            if ($21b54aeefac41b63$var$isNumber(char) || $21b54aeefac41b63$var$isHexadecimalCharacter(char)) offset += 1;\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNumericDecimal(str, offset) {\n        const startIdx = offset;\n        while(offset < str.length){\n            const char = str.charCodeAt(offset);\n            if ($21b54aeefac41b63$var$isNumber(char)) offset += 1;\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */ emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 || _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === $21b54aeefac41b63$var$CharCodes.SEMI) this.consumed += 1;\n        else if (this.decodeMode === $21b54aeefac41b63$export$8c8f129ce60f53c.Strict) return 0;\n        this.emitCodePoint((0, $10632aaf914d6bd1$export$b978ab756102108a)(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== $21b54aeefac41b63$var$CharCodes.SEMI) this.errors.missingSemicolonAfterCharacterReference();\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNamedEntity(str, offset) {\n        const { decodeTree: decodeTree } = this;\n        let current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        let valueLength = (current & $21b54aeefac41b63$export$6a4325c613e0faec.VALUE_LENGTH) >> 14;\n        for(; offset < str.length; offset++, this.excess++){\n            const char = str.charCodeAt(offset);\n            this.treeIndex = $21b54aeefac41b63$export$44c08d99945e6276(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) return this.result === 0 || // If we are parsing an attribute\n            this.decodeMode === $21b54aeefac41b63$export$8c8f129ce60f53c.Attribute && // We shouldn't have consumed any characters after the entity,\n            (valueLength === 0 || // And there should be no invalid characters.\n            $21b54aeefac41b63$var$isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & $21b54aeefac41b63$export$6a4325c613e0faec.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === $21b54aeefac41b63$var$CharCodes.SEMI) return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== $21b54aeefac41b63$export$8c8f129ce60f53c.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */ emitNotTerminatedNamedEntity() {\n        var _a;\n        const { result: result, decodeTree: decodeTree } = this;\n        const valueLength = (decodeTree[result] & $21b54aeefac41b63$export$6a4325c613e0faec.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 || _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */ emitNamedEntityData(result, valueLength, consumed) {\n        const { decodeTree: decodeTree } = this;\n        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~$21b54aeefac41b63$export$6a4325c613e0faec.VALUE_LENGTH : decodeTree[result + 1], consumed);\n        if (valueLength === 3) // For multi-byte values, we need to emit the second byte.\n        this.emitCodePoint(decodeTree[result + 2], consumed);\n        return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */ end() {\n        var _a;\n        switch(this.state){\n            case $21b54aeefac41b63$var$EntityDecoderState.NamedEntity:\n                // Emit a named entity if we have one.\n                return this.result !== 0 && (this.decodeMode !== $21b54aeefac41b63$export$8c8f129ce60f53c.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n            // Otherwise, emit a numeric entity if we have one.\n            case $21b54aeefac41b63$var$EntityDecoderState.NumericDecimal:\n                return this.emitNumericEntity(0, 2);\n            case $21b54aeefac41b63$var$EntityDecoderState.NumericHex:\n                return this.emitNumericEntity(0, 3);\n            case $21b54aeefac41b63$var$EntityDecoderState.NumericStart:\n                (_a = this.errors) === null || _a === void 0 || _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            case $21b54aeefac41b63$var$EntityDecoderState.EntityStart:\n                // Return 0 if we have no entity.\n                return 0;\n        }\n    }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */ function $21b54aeefac41b63$var$getDecoder(decodeTree) {\n    let ret = \"\";\n    const decoder = new $21b54aeefac41b63$export$15263a93ff7ec8ba(decodeTree, (str)=>ret += (0, $10632aaf914d6bd1$export$73bfc63873071f74)(str));\n    return function decodeWithTrie(str, decodeMode) {\n        let lastIndex = 0;\n        let offset = 0;\n        while((offset = str.indexOf(\"&\", offset)) >= 0){\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            const len = decoder.write(str, // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        const result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\nfunction $21b54aeefac41b63$export$44c08d99945e6276(decodeTree, current, nodeIdx, char) {\n    const branchCount = (current & $21b54aeefac41b63$export$6a4325c613e0faec.BRANCH_LENGTH) >> 7;\n    const jumpOffset = current & $21b54aeefac41b63$export$6a4325c613e0faec.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        const value = char - jumpOffset;\n        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    let lo = nodeIdx;\n    let hi = lo + branchCount - 1;\n    while(lo <= hi){\n        const mid = lo + hi >>> 1;\n        const midVal = decodeTree[mid];\n        if (midVal < char) lo = mid + 1;\n        else if (midVal > char) hi = mid - 1;\n        else return decodeTree[mid + branchCount];\n    }\n    return -1;\n}\nconst $21b54aeefac41b63$var$htmlDecoder = $21b54aeefac41b63$var$getDecoder((0, $955886d6453f1f75$export$2e2bcd8739ae039));\nconst $21b54aeefac41b63$var$xmlDecoder = $21b54aeefac41b63$var$getDecoder((0, $79538e6bbdd097a4$export$2e2bcd8739ae039));\nfunction $21b54aeefac41b63$export$f045cb747ce77a19(str, mode = $21b54aeefac41b63$export$8c8f129ce60f53c.Legacy) {\n    return $21b54aeefac41b63$var$htmlDecoder(str, mode);\n}\nfunction $21b54aeefac41b63$export$49f5e8089adb006a(str) {\n    return $21b54aeefac41b63$var$htmlDecoder(str, $21b54aeefac41b63$export$8c8f129ce60f53c.Attribute);\n}\nfunction $21b54aeefac41b63$export$da52f4371b3f37de(str) {\n    return $21b54aeefac41b63$var$htmlDecoder(str, $21b54aeefac41b63$export$8c8f129ce60f53c.Strict);\n}\nfunction $21b54aeefac41b63$export$88e3b9643a8bd06e(str) {\n    return $21b54aeefac41b63$var$xmlDecoder(str, $21b54aeefac41b63$export$8c8f129ce60f53c.Strict);\n}\n\n\n// Generated using scripts/write-encode-map.ts\nfunction $70fecd720f63c751$var$restoreDiff(arr) {\n    for(let i = 1; i < arr.length; i++)arr[i][0] += arr[i - 1][0] + 1;\n    return arr;\n}\nvar // prettier-ignore\n$70fecd720f63c751$export$2e2bcd8739ae039 = new Map(/* #__PURE__ */ $70fecd720f63c751$var$restoreDiff([\n    [\n        9,\n        \"&Tab;\"\n    ],\n    [\n        0,\n        \"&NewLine;\"\n    ],\n    [\n        22,\n        \"&excl;\"\n    ],\n    [\n        0,\n        \"&quot;\"\n    ],\n    [\n        0,\n        \"&num;\"\n    ],\n    [\n        0,\n        \"&dollar;\"\n    ],\n    [\n        0,\n        \"&percnt;\"\n    ],\n    [\n        0,\n        \"&amp;\"\n    ],\n    [\n        0,\n        \"&apos;\"\n    ],\n    [\n        0,\n        \"&lpar;\"\n    ],\n    [\n        0,\n        \"&rpar;\"\n    ],\n    [\n        0,\n        \"&ast;\"\n    ],\n    [\n        0,\n        \"&plus;\"\n    ],\n    [\n        0,\n        \"&comma;\"\n    ],\n    [\n        1,\n        \"&period;\"\n    ],\n    [\n        0,\n        \"&sol;\"\n    ],\n    [\n        10,\n        \"&colon;\"\n    ],\n    [\n        0,\n        \"&semi;\"\n    ],\n    [\n        0,\n        {\n            v: \"&lt;\",\n            n: 8402,\n            o: \"&nvlt;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&equals;\",\n            n: 8421,\n            o: \"&bne;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gt;\",\n            n: 8402,\n            o: \"&nvgt;\"\n        }\n    ],\n    [\n        0,\n        \"&quest;\"\n    ],\n    [\n        0,\n        \"&commat;\"\n    ],\n    [\n        26,\n        \"&lbrack;\"\n    ],\n    [\n        0,\n        \"&bsol;\"\n    ],\n    [\n        0,\n        \"&rbrack;\"\n    ],\n    [\n        0,\n        \"&Hat;\"\n    ],\n    [\n        0,\n        \"&lowbar;\"\n    ],\n    [\n        0,\n        \"&DiacriticalGrave;\"\n    ],\n    [\n        5,\n        {\n            n: 106,\n            o: \"&fjlig;\"\n        }\n    ],\n    [\n        20,\n        \"&lbrace;\"\n    ],\n    [\n        0,\n        \"&verbar;\"\n    ],\n    [\n        0,\n        \"&rbrace;\"\n    ],\n    [\n        34,\n        \"&nbsp;\"\n    ],\n    [\n        0,\n        \"&iexcl;\"\n    ],\n    [\n        0,\n        \"&cent;\"\n    ],\n    [\n        0,\n        \"&pound;\"\n    ],\n    [\n        0,\n        \"&curren;\"\n    ],\n    [\n        0,\n        \"&yen;\"\n    ],\n    [\n        0,\n        \"&brvbar;\"\n    ],\n    [\n        0,\n        \"&sect;\"\n    ],\n    [\n        0,\n        \"&die;\"\n    ],\n    [\n        0,\n        \"&copy;\"\n    ],\n    [\n        0,\n        \"&ordf;\"\n    ],\n    [\n        0,\n        \"&laquo;\"\n    ],\n    [\n        0,\n        \"&not;\"\n    ],\n    [\n        0,\n        \"&shy;\"\n    ],\n    [\n        0,\n        \"&circledR;\"\n    ],\n    [\n        0,\n        \"&macr;\"\n    ],\n    [\n        0,\n        \"&deg;\"\n    ],\n    [\n        0,\n        \"&PlusMinus;\"\n    ],\n    [\n        0,\n        \"&sup2;\"\n    ],\n    [\n        0,\n        \"&sup3;\"\n    ],\n    [\n        0,\n        \"&acute;\"\n    ],\n    [\n        0,\n        \"&micro;\"\n    ],\n    [\n        0,\n        \"&para;\"\n    ],\n    [\n        0,\n        \"&centerdot;\"\n    ],\n    [\n        0,\n        \"&cedil;\"\n    ],\n    [\n        0,\n        \"&sup1;\"\n    ],\n    [\n        0,\n        \"&ordm;\"\n    ],\n    [\n        0,\n        \"&raquo;\"\n    ],\n    [\n        0,\n        \"&frac14;\"\n    ],\n    [\n        0,\n        \"&frac12;\"\n    ],\n    [\n        0,\n        \"&frac34;\"\n    ],\n    [\n        0,\n        \"&iquest;\"\n    ],\n    [\n        0,\n        \"&Agrave;\"\n    ],\n    [\n        0,\n        \"&Aacute;\"\n    ],\n    [\n        0,\n        \"&Acirc;\"\n    ],\n    [\n        0,\n        \"&Atilde;\"\n    ],\n    [\n        0,\n        \"&Auml;\"\n    ],\n    [\n        0,\n        \"&angst;\"\n    ],\n    [\n        0,\n        \"&AElig;\"\n    ],\n    [\n        0,\n        \"&Ccedil;\"\n    ],\n    [\n        0,\n        \"&Egrave;\"\n    ],\n    [\n        0,\n        \"&Eacute;\"\n    ],\n    [\n        0,\n        \"&Ecirc;\"\n    ],\n    [\n        0,\n        \"&Euml;\"\n    ],\n    [\n        0,\n        \"&Igrave;\"\n    ],\n    [\n        0,\n        \"&Iacute;\"\n    ],\n    [\n        0,\n        \"&Icirc;\"\n    ],\n    [\n        0,\n        \"&Iuml;\"\n    ],\n    [\n        0,\n        \"&ETH;\"\n    ],\n    [\n        0,\n        \"&Ntilde;\"\n    ],\n    [\n        0,\n        \"&Ograve;\"\n    ],\n    [\n        0,\n        \"&Oacute;\"\n    ],\n    [\n        0,\n        \"&Ocirc;\"\n    ],\n    [\n        0,\n        \"&Otilde;\"\n    ],\n    [\n        0,\n        \"&Ouml;\"\n    ],\n    [\n        0,\n        \"&times;\"\n    ],\n    [\n        0,\n        \"&Oslash;\"\n    ],\n    [\n        0,\n        \"&Ugrave;\"\n    ],\n    [\n        0,\n        \"&Uacute;\"\n    ],\n    [\n        0,\n        \"&Ucirc;\"\n    ],\n    [\n        0,\n        \"&Uuml;\"\n    ],\n    [\n        0,\n        \"&Yacute;\"\n    ],\n    [\n        0,\n        \"&THORN;\"\n    ],\n    [\n        0,\n        \"&szlig;\"\n    ],\n    [\n        0,\n        \"&agrave;\"\n    ],\n    [\n        0,\n        \"&aacute;\"\n    ],\n    [\n        0,\n        \"&acirc;\"\n    ],\n    [\n        0,\n        \"&atilde;\"\n    ],\n    [\n        0,\n        \"&auml;\"\n    ],\n    [\n        0,\n        \"&aring;\"\n    ],\n    [\n        0,\n        \"&aelig;\"\n    ],\n    [\n        0,\n        \"&ccedil;\"\n    ],\n    [\n        0,\n        \"&egrave;\"\n    ],\n    [\n        0,\n        \"&eacute;\"\n    ],\n    [\n        0,\n        \"&ecirc;\"\n    ],\n    [\n        0,\n        \"&euml;\"\n    ],\n    [\n        0,\n        \"&igrave;\"\n    ],\n    [\n        0,\n        \"&iacute;\"\n    ],\n    [\n        0,\n        \"&icirc;\"\n    ],\n    [\n        0,\n        \"&iuml;\"\n    ],\n    [\n        0,\n        \"&eth;\"\n    ],\n    [\n        0,\n        \"&ntilde;\"\n    ],\n    [\n        0,\n        \"&ograve;\"\n    ],\n    [\n        0,\n        \"&oacute;\"\n    ],\n    [\n        0,\n        \"&ocirc;\"\n    ],\n    [\n        0,\n        \"&otilde;\"\n    ],\n    [\n        0,\n        \"&ouml;\"\n    ],\n    [\n        0,\n        \"&div;\"\n    ],\n    [\n        0,\n        \"&oslash;\"\n    ],\n    [\n        0,\n        \"&ugrave;\"\n    ],\n    [\n        0,\n        \"&uacute;\"\n    ],\n    [\n        0,\n        \"&ucirc;\"\n    ],\n    [\n        0,\n        \"&uuml;\"\n    ],\n    [\n        0,\n        \"&yacute;\"\n    ],\n    [\n        0,\n        \"&thorn;\"\n    ],\n    [\n        0,\n        \"&yuml;\"\n    ],\n    [\n        0,\n        \"&Amacr;\"\n    ],\n    [\n        0,\n        \"&amacr;\"\n    ],\n    [\n        0,\n        \"&Abreve;\"\n    ],\n    [\n        0,\n        \"&abreve;\"\n    ],\n    [\n        0,\n        \"&Aogon;\"\n    ],\n    [\n        0,\n        \"&aogon;\"\n    ],\n    [\n        0,\n        \"&Cacute;\"\n    ],\n    [\n        0,\n        \"&cacute;\"\n    ],\n    [\n        0,\n        \"&Ccirc;\"\n    ],\n    [\n        0,\n        \"&ccirc;\"\n    ],\n    [\n        0,\n        \"&Cdot;\"\n    ],\n    [\n        0,\n        \"&cdot;\"\n    ],\n    [\n        0,\n        \"&Ccaron;\"\n    ],\n    [\n        0,\n        \"&ccaron;\"\n    ],\n    [\n        0,\n        \"&Dcaron;\"\n    ],\n    [\n        0,\n        \"&dcaron;\"\n    ],\n    [\n        0,\n        \"&Dstrok;\"\n    ],\n    [\n        0,\n        \"&dstrok;\"\n    ],\n    [\n        0,\n        \"&Emacr;\"\n    ],\n    [\n        0,\n        \"&emacr;\"\n    ],\n    [\n        2,\n        \"&Edot;\"\n    ],\n    [\n        0,\n        \"&edot;\"\n    ],\n    [\n        0,\n        \"&Eogon;\"\n    ],\n    [\n        0,\n        \"&eogon;\"\n    ],\n    [\n        0,\n        \"&Ecaron;\"\n    ],\n    [\n        0,\n        \"&ecaron;\"\n    ],\n    [\n        0,\n        \"&Gcirc;\"\n    ],\n    [\n        0,\n        \"&gcirc;\"\n    ],\n    [\n        0,\n        \"&Gbreve;\"\n    ],\n    [\n        0,\n        \"&gbreve;\"\n    ],\n    [\n        0,\n        \"&Gdot;\"\n    ],\n    [\n        0,\n        \"&gdot;\"\n    ],\n    [\n        0,\n        \"&Gcedil;\"\n    ],\n    [\n        1,\n        \"&Hcirc;\"\n    ],\n    [\n        0,\n        \"&hcirc;\"\n    ],\n    [\n        0,\n        \"&Hstrok;\"\n    ],\n    [\n        0,\n        \"&hstrok;\"\n    ],\n    [\n        0,\n        \"&Itilde;\"\n    ],\n    [\n        0,\n        \"&itilde;\"\n    ],\n    [\n        0,\n        \"&Imacr;\"\n    ],\n    [\n        0,\n        \"&imacr;\"\n    ],\n    [\n        2,\n        \"&Iogon;\"\n    ],\n    [\n        0,\n        \"&iogon;\"\n    ],\n    [\n        0,\n        \"&Idot;\"\n    ],\n    [\n        0,\n        \"&imath;\"\n    ],\n    [\n        0,\n        \"&IJlig;\"\n    ],\n    [\n        0,\n        \"&ijlig;\"\n    ],\n    [\n        0,\n        \"&Jcirc;\"\n    ],\n    [\n        0,\n        \"&jcirc;\"\n    ],\n    [\n        0,\n        \"&Kcedil;\"\n    ],\n    [\n        0,\n        \"&kcedil;\"\n    ],\n    [\n        0,\n        \"&kgreen;\"\n    ],\n    [\n        0,\n        \"&Lacute;\"\n    ],\n    [\n        0,\n        \"&lacute;\"\n    ],\n    [\n        0,\n        \"&Lcedil;\"\n    ],\n    [\n        0,\n        \"&lcedil;\"\n    ],\n    [\n        0,\n        \"&Lcaron;\"\n    ],\n    [\n        0,\n        \"&lcaron;\"\n    ],\n    [\n        0,\n        \"&Lmidot;\"\n    ],\n    [\n        0,\n        \"&lmidot;\"\n    ],\n    [\n        0,\n        \"&Lstrok;\"\n    ],\n    [\n        0,\n        \"&lstrok;\"\n    ],\n    [\n        0,\n        \"&Nacute;\"\n    ],\n    [\n        0,\n        \"&nacute;\"\n    ],\n    [\n        0,\n        \"&Ncedil;\"\n    ],\n    [\n        0,\n        \"&ncedil;\"\n    ],\n    [\n        0,\n        \"&Ncaron;\"\n    ],\n    [\n        0,\n        \"&ncaron;\"\n    ],\n    [\n        0,\n        \"&napos;\"\n    ],\n    [\n        0,\n        \"&ENG;\"\n    ],\n    [\n        0,\n        \"&eng;\"\n    ],\n    [\n        0,\n        \"&Omacr;\"\n    ],\n    [\n        0,\n        \"&omacr;\"\n    ],\n    [\n        2,\n        \"&Odblac;\"\n    ],\n    [\n        0,\n        \"&odblac;\"\n    ],\n    [\n        0,\n        \"&OElig;\"\n    ],\n    [\n        0,\n        \"&oelig;\"\n    ],\n    [\n        0,\n        \"&Racute;\"\n    ],\n    [\n        0,\n        \"&racute;\"\n    ],\n    [\n        0,\n        \"&Rcedil;\"\n    ],\n    [\n        0,\n        \"&rcedil;\"\n    ],\n    [\n        0,\n        \"&Rcaron;\"\n    ],\n    [\n        0,\n        \"&rcaron;\"\n    ],\n    [\n        0,\n        \"&Sacute;\"\n    ],\n    [\n        0,\n        \"&sacute;\"\n    ],\n    [\n        0,\n        \"&Scirc;\"\n    ],\n    [\n        0,\n        \"&scirc;\"\n    ],\n    [\n        0,\n        \"&Scedil;\"\n    ],\n    [\n        0,\n        \"&scedil;\"\n    ],\n    [\n        0,\n        \"&Scaron;\"\n    ],\n    [\n        0,\n        \"&scaron;\"\n    ],\n    [\n        0,\n        \"&Tcedil;\"\n    ],\n    [\n        0,\n        \"&tcedil;\"\n    ],\n    [\n        0,\n        \"&Tcaron;\"\n    ],\n    [\n        0,\n        \"&tcaron;\"\n    ],\n    [\n        0,\n        \"&Tstrok;\"\n    ],\n    [\n        0,\n        \"&tstrok;\"\n    ],\n    [\n        0,\n        \"&Utilde;\"\n    ],\n    [\n        0,\n        \"&utilde;\"\n    ],\n    [\n        0,\n        \"&Umacr;\"\n    ],\n    [\n        0,\n        \"&umacr;\"\n    ],\n    [\n        0,\n        \"&Ubreve;\"\n    ],\n    [\n        0,\n        \"&ubreve;\"\n    ],\n    [\n        0,\n        \"&Uring;\"\n    ],\n    [\n        0,\n        \"&uring;\"\n    ],\n    [\n        0,\n        \"&Udblac;\"\n    ],\n    [\n        0,\n        \"&udblac;\"\n    ],\n    [\n        0,\n        \"&Uogon;\"\n    ],\n    [\n        0,\n        \"&uogon;\"\n    ],\n    [\n        0,\n        \"&Wcirc;\"\n    ],\n    [\n        0,\n        \"&wcirc;\"\n    ],\n    [\n        0,\n        \"&Ycirc;\"\n    ],\n    [\n        0,\n        \"&ycirc;\"\n    ],\n    [\n        0,\n        \"&Yuml;\"\n    ],\n    [\n        0,\n        \"&Zacute;\"\n    ],\n    [\n        0,\n        \"&zacute;\"\n    ],\n    [\n        0,\n        \"&Zdot;\"\n    ],\n    [\n        0,\n        \"&zdot;\"\n    ],\n    [\n        0,\n        \"&Zcaron;\"\n    ],\n    [\n        0,\n        \"&zcaron;\"\n    ],\n    [\n        19,\n        \"&fnof;\"\n    ],\n    [\n        34,\n        \"&imped;\"\n    ],\n    [\n        63,\n        \"&gacute;\"\n    ],\n    [\n        65,\n        \"&jmath;\"\n    ],\n    [\n        142,\n        \"&circ;\"\n    ],\n    [\n        0,\n        \"&caron;\"\n    ],\n    [\n        16,\n        \"&breve;\"\n    ],\n    [\n        0,\n        \"&DiacriticalDot;\"\n    ],\n    [\n        0,\n        \"&ring;\"\n    ],\n    [\n        0,\n        \"&ogon;\"\n    ],\n    [\n        0,\n        \"&DiacriticalTilde;\"\n    ],\n    [\n        0,\n        \"&dblac;\"\n    ],\n    [\n        51,\n        \"&DownBreve;\"\n    ],\n    [\n        127,\n        \"&Alpha;\"\n    ],\n    [\n        0,\n        \"&Beta;\"\n    ],\n    [\n        0,\n        \"&Gamma;\"\n    ],\n    [\n        0,\n        \"&Delta;\"\n    ],\n    [\n        0,\n        \"&Epsilon;\"\n    ],\n    [\n        0,\n        \"&Zeta;\"\n    ],\n    [\n        0,\n        \"&Eta;\"\n    ],\n    [\n        0,\n        \"&Theta;\"\n    ],\n    [\n        0,\n        \"&Iota;\"\n    ],\n    [\n        0,\n        \"&Kappa;\"\n    ],\n    [\n        0,\n        \"&Lambda;\"\n    ],\n    [\n        0,\n        \"&Mu;\"\n    ],\n    [\n        0,\n        \"&Nu;\"\n    ],\n    [\n        0,\n        \"&Xi;\"\n    ],\n    [\n        0,\n        \"&Omicron;\"\n    ],\n    [\n        0,\n        \"&Pi;\"\n    ],\n    [\n        0,\n        \"&Rho;\"\n    ],\n    [\n        1,\n        \"&Sigma;\"\n    ],\n    [\n        0,\n        \"&Tau;\"\n    ],\n    [\n        0,\n        \"&Upsilon;\"\n    ],\n    [\n        0,\n        \"&Phi;\"\n    ],\n    [\n        0,\n        \"&Chi;\"\n    ],\n    [\n        0,\n        \"&Psi;\"\n    ],\n    [\n        0,\n        \"&ohm;\"\n    ],\n    [\n        7,\n        \"&alpha;\"\n    ],\n    [\n        0,\n        \"&beta;\"\n    ],\n    [\n        0,\n        \"&gamma;\"\n    ],\n    [\n        0,\n        \"&delta;\"\n    ],\n    [\n        0,\n        \"&epsi;\"\n    ],\n    [\n        0,\n        \"&zeta;\"\n    ],\n    [\n        0,\n        \"&eta;\"\n    ],\n    [\n        0,\n        \"&theta;\"\n    ],\n    [\n        0,\n        \"&iota;\"\n    ],\n    [\n        0,\n        \"&kappa;\"\n    ],\n    [\n        0,\n        \"&lambda;\"\n    ],\n    [\n        0,\n        \"&mu;\"\n    ],\n    [\n        0,\n        \"&nu;\"\n    ],\n    [\n        0,\n        \"&xi;\"\n    ],\n    [\n        0,\n        \"&omicron;\"\n    ],\n    [\n        0,\n        \"&pi;\"\n    ],\n    [\n        0,\n        \"&rho;\"\n    ],\n    [\n        0,\n        \"&sigmaf;\"\n    ],\n    [\n        0,\n        \"&sigma;\"\n    ],\n    [\n        0,\n        \"&tau;\"\n    ],\n    [\n        0,\n        \"&upsi;\"\n    ],\n    [\n        0,\n        \"&phi;\"\n    ],\n    [\n        0,\n        \"&chi;\"\n    ],\n    [\n        0,\n        \"&psi;\"\n    ],\n    [\n        0,\n        \"&omega;\"\n    ],\n    [\n        7,\n        \"&thetasym;\"\n    ],\n    [\n        0,\n        \"&Upsi;\"\n    ],\n    [\n        2,\n        \"&phiv;\"\n    ],\n    [\n        0,\n        \"&piv;\"\n    ],\n    [\n        5,\n        \"&Gammad;\"\n    ],\n    [\n        0,\n        \"&digamma;\"\n    ],\n    [\n        18,\n        \"&kappav;\"\n    ],\n    [\n        0,\n        \"&rhov;\"\n    ],\n    [\n        3,\n        \"&epsiv;\"\n    ],\n    [\n        0,\n        \"&backepsilon;\"\n    ],\n    [\n        10,\n        \"&IOcy;\"\n    ],\n    [\n        0,\n        \"&DJcy;\"\n    ],\n    [\n        0,\n        \"&GJcy;\"\n    ],\n    [\n        0,\n        \"&Jukcy;\"\n    ],\n    [\n        0,\n        \"&DScy;\"\n    ],\n    [\n        0,\n        \"&Iukcy;\"\n    ],\n    [\n        0,\n        \"&YIcy;\"\n    ],\n    [\n        0,\n        \"&Jsercy;\"\n    ],\n    [\n        0,\n        \"&LJcy;\"\n    ],\n    [\n        0,\n        \"&NJcy;\"\n    ],\n    [\n        0,\n        \"&TSHcy;\"\n    ],\n    [\n        0,\n        \"&KJcy;\"\n    ],\n    [\n        1,\n        \"&Ubrcy;\"\n    ],\n    [\n        0,\n        \"&DZcy;\"\n    ],\n    [\n        0,\n        \"&Acy;\"\n    ],\n    [\n        0,\n        \"&Bcy;\"\n    ],\n    [\n        0,\n        \"&Vcy;\"\n    ],\n    [\n        0,\n        \"&Gcy;\"\n    ],\n    [\n        0,\n        \"&Dcy;\"\n    ],\n    [\n        0,\n        \"&IEcy;\"\n    ],\n    [\n        0,\n        \"&ZHcy;\"\n    ],\n    [\n        0,\n        \"&Zcy;\"\n    ],\n    [\n        0,\n        \"&Icy;\"\n    ],\n    [\n        0,\n        \"&Jcy;\"\n    ],\n    [\n        0,\n        \"&Kcy;\"\n    ],\n    [\n        0,\n        \"&Lcy;\"\n    ],\n    [\n        0,\n        \"&Mcy;\"\n    ],\n    [\n        0,\n        \"&Ncy;\"\n    ],\n    [\n        0,\n        \"&Ocy;\"\n    ],\n    [\n        0,\n        \"&Pcy;\"\n    ],\n    [\n        0,\n        \"&Rcy;\"\n    ],\n    [\n        0,\n        \"&Scy;\"\n    ],\n    [\n        0,\n        \"&Tcy;\"\n    ],\n    [\n        0,\n        \"&Ucy;\"\n    ],\n    [\n        0,\n        \"&Fcy;\"\n    ],\n    [\n        0,\n        \"&KHcy;\"\n    ],\n    [\n        0,\n        \"&TScy;\"\n    ],\n    [\n        0,\n        \"&CHcy;\"\n    ],\n    [\n        0,\n        \"&SHcy;\"\n    ],\n    [\n        0,\n        \"&SHCHcy;\"\n    ],\n    [\n        0,\n        \"&HARDcy;\"\n    ],\n    [\n        0,\n        \"&Ycy;\"\n    ],\n    [\n        0,\n        \"&SOFTcy;\"\n    ],\n    [\n        0,\n        \"&Ecy;\"\n    ],\n    [\n        0,\n        \"&YUcy;\"\n    ],\n    [\n        0,\n        \"&YAcy;\"\n    ],\n    [\n        0,\n        \"&acy;\"\n    ],\n    [\n        0,\n        \"&bcy;\"\n    ],\n    [\n        0,\n        \"&vcy;\"\n    ],\n    [\n        0,\n        \"&gcy;\"\n    ],\n    [\n        0,\n        \"&dcy;\"\n    ],\n    [\n        0,\n        \"&iecy;\"\n    ],\n    [\n        0,\n        \"&zhcy;\"\n    ],\n    [\n        0,\n        \"&zcy;\"\n    ],\n    [\n        0,\n        \"&icy;\"\n    ],\n    [\n        0,\n        \"&jcy;\"\n    ],\n    [\n        0,\n        \"&kcy;\"\n    ],\n    [\n        0,\n        \"&lcy;\"\n    ],\n    [\n        0,\n        \"&mcy;\"\n    ],\n    [\n        0,\n        \"&ncy;\"\n    ],\n    [\n        0,\n        \"&ocy;\"\n    ],\n    [\n        0,\n        \"&pcy;\"\n    ],\n    [\n        0,\n        \"&rcy;\"\n    ],\n    [\n        0,\n        \"&scy;\"\n    ],\n    [\n        0,\n        \"&tcy;\"\n    ],\n    [\n        0,\n        \"&ucy;\"\n    ],\n    [\n        0,\n        \"&fcy;\"\n    ],\n    [\n        0,\n        \"&khcy;\"\n    ],\n    [\n        0,\n        \"&tscy;\"\n    ],\n    [\n        0,\n        \"&chcy;\"\n    ],\n    [\n        0,\n        \"&shcy;\"\n    ],\n    [\n        0,\n        \"&shchcy;\"\n    ],\n    [\n        0,\n        \"&hardcy;\"\n    ],\n    [\n        0,\n        \"&ycy;\"\n    ],\n    [\n        0,\n        \"&softcy;\"\n    ],\n    [\n        0,\n        \"&ecy;\"\n    ],\n    [\n        0,\n        \"&yucy;\"\n    ],\n    [\n        0,\n        \"&yacy;\"\n    ],\n    [\n        1,\n        \"&iocy;\"\n    ],\n    [\n        0,\n        \"&djcy;\"\n    ],\n    [\n        0,\n        \"&gjcy;\"\n    ],\n    [\n        0,\n        \"&jukcy;\"\n    ],\n    [\n        0,\n        \"&dscy;\"\n    ],\n    [\n        0,\n        \"&iukcy;\"\n    ],\n    [\n        0,\n        \"&yicy;\"\n    ],\n    [\n        0,\n        \"&jsercy;\"\n    ],\n    [\n        0,\n        \"&ljcy;\"\n    ],\n    [\n        0,\n        \"&njcy;\"\n    ],\n    [\n        0,\n        \"&tshcy;\"\n    ],\n    [\n        0,\n        \"&kjcy;\"\n    ],\n    [\n        1,\n        \"&ubrcy;\"\n    ],\n    [\n        0,\n        \"&dzcy;\"\n    ],\n    [\n        7074,\n        \"&ensp;\"\n    ],\n    [\n        0,\n        \"&emsp;\"\n    ],\n    [\n        0,\n        \"&emsp13;\"\n    ],\n    [\n        0,\n        \"&emsp14;\"\n    ],\n    [\n        1,\n        \"&numsp;\"\n    ],\n    [\n        0,\n        \"&puncsp;\"\n    ],\n    [\n        0,\n        \"&ThinSpace;\"\n    ],\n    [\n        0,\n        \"&hairsp;\"\n    ],\n    [\n        0,\n        \"&NegativeMediumSpace;\"\n    ],\n    [\n        0,\n        \"&zwnj;\"\n    ],\n    [\n        0,\n        \"&zwj;\"\n    ],\n    [\n        0,\n        \"&lrm;\"\n    ],\n    [\n        0,\n        \"&rlm;\"\n    ],\n    [\n        0,\n        \"&dash;\"\n    ],\n    [\n        2,\n        \"&ndash;\"\n    ],\n    [\n        0,\n        \"&mdash;\"\n    ],\n    [\n        0,\n        \"&horbar;\"\n    ],\n    [\n        0,\n        \"&Verbar;\"\n    ],\n    [\n        1,\n        \"&lsquo;\"\n    ],\n    [\n        0,\n        \"&CloseCurlyQuote;\"\n    ],\n    [\n        0,\n        \"&lsquor;\"\n    ],\n    [\n        1,\n        \"&ldquo;\"\n    ],\n    [\n        0,\n        \"&CloseCurlyDoubleQuote;\"\n    ],\n    [\n        0,\n        \"&bdquo;\"\n    ],\n    [\n        1,\n        \"&dagger;\"\n    ],\n    [\n        0,\n        \"&Dagger;\"\n    ],\n    [\n        0,\n        \"&bull;\"\n    ],\n    [\n        2,\n        \"&nldr;\"\n    ],\n    [\n        0,\n        \"&hellip;\"\n    ],\n    [\n        9,\n        \"&permil;\"\n    ],\n    [\n        0,\n        \"&pertenk;\"\n    ],\n    [\n        0,\n        \"&prime;\"\n    ],\n    [\n        0,\n        \"&Prime;\"\n    ],\n    [\n        0,\n        \"&tprime;\"\n    ],\n    [\n        0,\n        \"&backprime;\"\n    ],\n    [\n        3,\n        \"&lsaquo;\"\n    ],\n    [\n        0,\n        \"&rsaquo;\"\n    ],\n    [\n        3,\n        \"&oline;\"\n    ],\n    [\n        2,\n        \"&caret;\"\n    ],\n    [\n        1,\n        \"&hybull;\"\n    ],\n    [\n        0,\n        \"&frasl;\"\n    ],\n    [\n        10,\n        \"&bsemi;\"\n    ],\n    [\n        7,\n        \"&qprime;\"\n    ],\n    [\n        7,\n        {\n            v: \"&MediumSpace;\",\n            n: 8202,\n            o: \"&ThickSpace;\"\n        }\n    ],\n    [\n        0,\n        \"&NoBreak;\"\n    ],\n    [\n        0,\n        \"&af;\"\n    ],\n    [\n        0,\n        \"&InvisibleTimes;\"\n    ],\n    [\n        0,\n        \"&ic;\"\n    ],\n    [\n        72,\n        \"&euro;\"\n    ],\n    [\n        46,\n        \"&tdot;\"\n    ],\n    [\n        0,\n        \"&DotDot;\"\n    ],\n    [\n        37,\n        \"&complexes;\"\n    ],\n    [\n        2,\n        \"&incare;\"\n    ],\n    [\n        4,\n        \"&gscr;\"\n    ],\n    [\n        0,\n        \"&hamilt;\"\n    ],\n    [\n        0,\n        \"&Hfr;\"\n    ],\n    [\n        0,\n        \"&Hopf;\"\n    ],\n    [\n        0,\n        \"&planckh;\"\n    ],\n    [\n        0,\n        \"&hbar;\"\n    ],\n    [\n        0,\n        \"&imagline;\"\n    ],\n    [\n        0,\n        \"&Ifr;\"\n    ],\n    [\n        0,\n        \"&lagran;\"\n    ],\n    [\n        0,\n        \"&ell;\"\n    ],\n    [\n        1,\n        \"&naturals;\"\n    ],\n    [\n        0,\n        \"&numero;\"\n    ],\n    [\n        0,\n        \"&copysr;\"\n    ],\n    [\n        0,\n        \"&weierp;\"\n    ],\n    [\n        0,\n        \"&Popf;\"\n    ],\n    [\n        0,\n        \"&Qopf;\"\n    ],\n    [\n        0,\n        \"&realine;\"\n    ],\n    [\n        0,\n        \"&real;\"\n    ],\n    [\n        0,\n        \"&reals;\"\n    ],\n    [\n        0,\n        \"&rx;\"\n    ],\n    [\n        3,\n        \"&trade;\"\n    ],\n    [\n        1,\n        \"&integers;\"\n    ],\n    [\n        2,\n        \"&mho;\"\n    ],\n    [\n        0,\n        \"&zeetrf;\"\n    ],\n    [\n        0,\n        \"&iiota;\"\n    ],\n    [\n        2,\n        \"&bernou;\"\n    ],\n    [\n        0,\n        \"&Cayleys;\"\n    ],\n    [\n        1,\n        \"&escr;\"\n    ],\n    [\n        0,\n        \"&Escr;\"\n    ],\n    [\n        0,\n        \"&Fouriertrf;\"\n    ],\n    [\n        1,\n        \"&Mellintrf;\"\n    ],\n    [\n        0,\n        \"&order;\"\n    ],\n    [\n        0,\n        \"&alefsym;\"\n    ],\n    [\n        0,\n        \"&beth;\"\n    ],\n    [\n        0,\n        \"&gimel;\"\n    ],\n    [\n        0,\n        \"&daleth;\"\n    ],\n    [\n        12,\n        \"&CapitalDifferentialD;\"\n    ],\n    [\n        0,\n        \"&dd;\"\n    ],\n    [\n        0,\n        \"&ee;\"\n    ],\n    [\n        0,\n        \"&ii;\"\n    ],\n    [\n        10,\n        \"&frac13;\"\n    ],\n    [\n        0,\n        \"&frac23;\"\n    ],\n    [\n        0,\n        \"&frac15;\"\n    ],\n    [\n        0,\n        \"&frac25;\"\n    ],\n    [\n        0,\n        \"&frac35;\"\n    ],\n    [\n        0,\n        \"&frac45;\"\n    ],\n    [\n        0,\n        \"&frac16;\"\n    ],\n    [\n        0,\n        \"&frac56;\"\n    ],\n    [\n        0,\n        \"&frac18;\"\n    ],\n    [\n        0,\n        \"&frac38;\"\n    ],\n    [\n        0,\n        \"&frac58;\"\n    ],\n    [\n        0,\n        \"&frac78;\"\n    ],\n    [\n        49,\n        \"&larr;\"\n    ],\n    [\n        0,\n        \"&ShortUpArrow;\"\n    ],\n    [\n        0,\n        \"&rarr;\"\n    ],\n    [\n        0,\n        \"&darr;\"\n    ],\n    [\n        0,\n        \"&harr;\"\n    ],\n    [\n        0,\n        \"&updownarrow;\"\n    ],\n    [\n        0,\n        \"&nwarr;\"\n    ],\n    [\n        0,\n        \"&nearr;\"\n    ],\n    [\n        0,\n        \"&LowerRightArrow;\"\n    ],\n    [\n        0,\n        \"&LowerLeftArrow;\"\n    ],\n    [\n        0,\n        \"&nlarr;\"\n    ],\n    [\n        0,\n        \"&nrarr;\"\n    ],\n    [\n        1,\n        {\n            v: \"&rarrw;\",\n            n: 824,\n            o: \"&nrarrw;\"\n        }\n    ],\n    [\n        0,\n        \"&Larr;\"\n    ],\n    [\n        0,\n        \"&Uarr;\"\n    ],\n    [\n        0,\n        \"&Rarr;\"\n    ],\n    [\n        0,\n        \"&Darr;\"\n    ],\n    [\n        0,\n        \"&larrtl;\"\n    ],\n    [\n        0,\n        \"&rarrtl;\"\n    ],\n    [\n        0,\n        \"&LeftTeeArrow;\"\n    ],\n    [\n        0,\n        \"&mapstoup;\"\n    ],\n    [\n        0,\n        \"&map;\"\n    ],\n    [\n        0,\n        \"&DownTeeArrow;\"\n    ],\n    [\n        1,\n        \"&hookleftarrow;\"\n    ],\n    [\n        0,\n        \"&hookrightarrow;\"\n    ],\n    [\n        0,\n        \"&larrlp;\"\n    ],\n    [\n        0,\n        \"&looparrowright;\"\n    ],\n    [\n        0,\n        \"&harrw;\"\n    ],\n    [\n        0,\n        \"&nharr;\"\n    ],\n    [\n        1,\n        \"&lsh;\"\n    ],\n    [\n        0,\n        \"&rsh;\"\n    ],\n    [\n        0,\n        \"&ldsh;\"\n    ],\n    [\n        0,\n        \"&rdsh;\"\n    ],\n    [\n        1,\n        \"&crarr;\"\n    ],\n    [\n        0,\n        \"&cularr;\"\n    ],\n    [\n        0,\n        \"&curarr;\"\n    ],\n    [\n        2,\n        \"&circlearrowleft;\"\n    ],\n    [\n        0,\n        \"&circlearrowright;\"\n    ],\n    [\n        0,\n        \"&leftharpoonup;\"\n    ],\n    [\n        0,\n        \"&DownLeftVector;\"\n    ],\n    [\n        0,\n        \"&RightUpVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpVector;\"\n    ],\n    [\n        0,\n        \"&rharu;\"\n    ],\n    [\n        0,\n        \"&DownRightVector;\"\n    ],\n    [\n        0,\n        \"&dharr;\"\n    ],\n    [\n        0,\n        \"&dharl;\"\n    ],\n    [\n        0,\n        \"&RightArrowLeftArrow;\"\n    ],\n    [\n        0,\n        \"&udarr;\"\n    ],\n    [\n        0,\n        \"&LeftArrowRightArrow;\"\n    ],\n    [\n        0,\n        \"&leftleftarrows;\"\n    ],\n    [\n        0,\n        \"&upuparrows;\"\n    ],\n    [\n        0,\n        \"&rightrightarrows;\"\n    ],\n    [\n        0,\n        \"&ddarr;\"\n    ],\n    [\n        0,\n        \"&leftrightharpoons;\"\n    ],\n    [\n        0,\n        \"&Equilibrium;\"\n    ],\n    [\n        0,\n        \"&nlArr;\"\n    ],\n    [\n        0,\n        \"&nhArr;\"\n    ],\n    [\n        0,\n        \"&nrArr;\"\n    ],\n    [\n        0,\n        \"&DoubleLeftArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleUpArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleRightArrow;\"\n    ],\n    [\n        0,\n        \"&dArr;\"\n    ],\n    [\n        0,\n        \"&DoubleLeftRightArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleUpDownArrow;\"\n    ],\n    [\n        0,\n        \"&nwArr;\"\n    ],\n    [\n        0,\n        \"&neArr;\"\n    ],\n    [\n        0,\n        \"&seArr;\"\n    ],\n    [\n        0,\n        \"&swArr;\"\n    ],\n    [\n        0,\n        \"&lAarr;\"\n    ],\n    [\n        0,\n        \"&rAarr;\"\n    ],\n    [\n        1,\n        \"&zigrarr;\"\n    ],\n    [\n        6,\n        \"&larrb;\"\n    ],\n    [\n        0,\n        \"&rarrb;\"\n    ],\n    [\n        15,\n        \"&DownArrowUpArrow;\"\n    ],\n    [\n        7,\n        \"&loarr;\"\n    ],\n    [\n        0,\n        \"&roarr;\"\n    ],\n    [\n        0,\n        \"&hoarr;\"\n    ],\n    [\n        0,\n        \"&forall;\"\n    ],\n    [\n        0,\n        \"&comp;\"\n    ],\n    [\n        0,\n        {\n            v: \"&part;\",\n            n: 824,\n            o: \"&npart;\"\n        }\n    ],\n    [\n        0,\n        \"&exist;\"\n    ],\n    [\n        0,\n        \"&nexist;\"\n    ],\n    [\n        0,\n        \"&empty;\"\n    ],\n    [\n        1,\n        \"&Del;\"\n    ],\n    [\n        0,\n        \"&Element;\"\n    ],\n    [\n        0,\n        \"&NotElement;\"\n    ],\n    [\n        1,\n        \"&ni;\"\n    ],\n    [\n        0,\n        \"&notni;\"\n    ],\n    [\n        2,\n        \"&prod;\"\n    ],\n    [\n        0,\n        \"&coprod;\"\n    ],\n    [\n        0,\n        \"&sum;\"\n    ],\n    [\n        0,\n        \"&minus;\"\n    ],\n    [\n        0,\n        \"&MinusPlus;\"\n    ],\n    [\n        0,\n        \"&dotplus;\"\n    ],\n    [\n        1,\n        \"&Backslash;\"\n    ],\n    [\n        0,\n        \"&lowast;\"\n    ],\n    [\n        0,\n        \"&compfn;\"\n    ],\n    [\n        1,\n        \"&radic;\"\n    ],\n    [\n        2,\n        \"&prop;\"\n    ],\n    [\n        0,\n        \"&infin;\"\n    ],\n    [\n        0,\n        \"&angrt;\"\n    ],\n    [\n        0,\n        {\n            v: \"&ang;\",\n            n: 8402,\n            o: \"&nang;\"\n        }\n    ],\n    [\n        0,\n        \"&angmsd;\"\n    ],\n    [\n        0,\n        \"&angsph;\"\n    ],\n    [\n        0,\n        \"&mid;\"\n    ],\n    [\n        0,\n        \"&nmid;\"\n    ],\n    [\n        0,\n        \"&DoubleVerticalBar;\"\n    ],\n    [\n        0,\n        \"&NotDoubleVerticalBar;\"\n    ],\n    [\n        0,\n        \"&and;\"\n    ],\n    [\n        0,\n        \"&or;\"\n    ],\n    [\n        0,\n        {\n            v: \"&cap;\",\n            n: 65024,\n            o: \"&caps;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&cup;\",\n            n: 65024,\n            o: \"&cups;\"\n        }\n    ],\n    [\n        0,\n        \"&int;\"\n    ],\n    [\n        0,\n        \"&Int;\"\n    ],\n    [\n        0,\n        \"&iiint;\"\n    ],\n    [\n        0,\n        \"&conint;\"\n    ],\n    [\n        0,\n        \"&Conint;\"\n    ],\n    [\n        0,\n        \"&Cconint;\"\n    ],\n    [\n        0,\n        \"&cwint;\"\n    ],\n    [\n        0,\n        \"&ClockwiseContourIntegral;\"\n    ],\n    [\n        0,\n        \"&awconint;\"\n    ],\n    [\n        0,\n        \"&there4;\"\n    ],\n    [\n        0,\n        \"&becaus;\"\n    ],\n    [\n        0,\n        \"&ratio;\"\n    ],\n    [\n        0,\n        \"&Colon;\"\n    ],\n    [\n        0,\n        \"&dotminus;\"\n    ],\n    [\n        1,\n        \"&mDDot;\"\n    ],\n    [\n        0,\n        \"&homtht;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sim;\",\n            n: 8402,\n            o: \"&nvsim;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&backsim;\",\n            n: 817,\n            o: \"&race;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ac;\",\n            n: 819,\n            o: \"&acE;\"\n        }\n    ],\n    [\n        0,\n        \"&acd;\"\n    ],\n    [\n        0,\n        \"&VerticalTilde;\"\n    ],\n    [\n        0,\n        \"&NotTilde;\"\n    ],\n    [\n        0,\n        {\n            v: \"&eqsim;\",\n            n: 824,\n            o: \"&nesim;\"\n        }\n    ],\n    [\n        0,\n        \"&sime;\"\n    ],\n    [\n        0,\n        \"&NotTildeEqual;\"\n    ],\n    [\n        0,\n        \"&cong;\"\n    ],\n    [\n        0,\n        \"&simne;\"\n    ],\n    [\n        0,\n        \"&ncong;\"\n    ],\n    [\n        0,\n        \"&ap;\"\n    ],\n    [\n        0,\n        \"&nap;\"\n    ],\n    [\n        0,\n        \"&ape;\"\n    ],\n    [\n        0,\n        {\n            v: \"&apid;\",\n            n: 824,\n            o: \"&napid;\"\n        }\n    ],\n    [\n        0,\n        \"&backcong;\"\n    ],\n    [\n        0,\n        {\n            v: \"&asympeq;\",\n            n: 8402,\n            o: \"&nvap;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&bump;\",\n            n: 824,\n            o: \"&nbump;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&bumpe;\",\n            n: 824,\n            o: \"&nbumpe;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&doteq;\",\n            n: 824,\n            o: \"&nedot;\"\n        }\n    ],\n    [\n        0,\n        \"&doteqdot;\"\n    ],\n    [\n        0,\n        \"&efDot;\"\n    ],\n    [\n        0,\n        \"&erDot;\"\n    ],\n    [\n        0,\n        \"&Assign;\"\n    ],\n    [\n        0,\n        \"&ecolon;\"\n    ],\n    [\n        0,\n        \"&ecir;\"\n    ],\n    [\n        0,\n        \"&circeq;\"\n    ],\n    [\n        1,\n        \"&wedgeq;\"\n    ],\n    [\n        0,\n        \"&veeeq;\"\n    ],\n    [\n        1,\n        \"&triangleq;\"\n    ],\n    [\n        2,\n        \"&equest;\"\n    ],\n    [\n        0,\n        \"&ne;\"\n    ],\n    [\n        0,\n        {\n            v: \"&Congruent;\",\n            n: 8421,\n            o: \"&bnequiv;\"\n        }\n    ],\n    [\n        0,\n        \"&nequiv;\"\n    ],\n    [\n        1,\n        {\n            v: \"&le;\",\n            n: 8402,\n            o: \"&nvle;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ge;\",\n            n: 8402,\n            o: \"&nvge;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&lE;\",\n            n: 824,\n            o: \"&nlE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gE;\",\n            n: 824,\n            o: \"&ngE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&lnE;\",\n            n: 65024,\n            o: \"&lvertneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gnE;\",\n            n: 65024,\n            o: \"&gvertneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ll;\",\n            n: new Map(/* #__PURE__ */ $70fecd720f63c751$var$restoreDiff([\n                [\n                    824,\n                    \"&nLtv;\"\n                ],\n                [\n                    7577,\n                    \"&nLt;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gg;\",\n            n: new Map(/* #__PURE__ */ $70fecd720f63c751$var$restoreDiff([\n                [\n                    824,\n                    \"&nGtv;\"\n                ],\n                [\n                    7577,\n                    \"&nGt;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        0,\n        \"&between;\"\n    ],\n    [\n        0,\n        \"&NotCupCap;\"\n    ],\n    [\n        0,\n        \"&nless;\"\n    ],\n    [\n        0,\n        \"&ngt;\"\n    ],\n    [\n        0,\n        \"&nle;\"\n    ],\n    [\n        0,\n        \"&nge;\"\n    ],\n    [\n        0,\n        \"&lesssim;\"\n    ],\n    [\n        0,\n        \"&GreaterTilde;\"\n    ],\n    [\n        0,\n        \"&nlsim;\"\n    ],\n    [\n        0,\n        \"&ngsim;\"\n    ],\n    [\n        0,\n        \"&LessGreater;\"\n    ],\n    [\n        0,\n        \"&gl;\"\n    ],\n    [\n        0,\n        \"&NotLessGreater;\"\n    ],\n    [\n        0,\n        \"&NotGreaterLess;\"\n    ],\n    [\n        0,\n        \"&pr;\"\n    ],\n    [\n        0,\n        \"&sc;\"\n    ],\n    [\n        0,\n        \"&prcue;\"\n    ],\n    [\n        0,\n        \"&sccue;\"\n    ],\n    [\n        0,\n        \"&PrecedesTilde;\"\n    ],\n    [\n        0,\n        {\n            v: \"&scsim;\",\n            n: 824,\n            o: \"&NotSucceedsTilde;\"\n        }\n    ],\n    [\n        0,\n        \"&NotPrecedes;\"\n    ],\n    [\n        0,\n        \"&NotSucceeds;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sub;\",\n            n: 8402,\n            o: \"&NotSubset;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sup;\",\n            n: 8402,\n            o: \"&NotSuperset;\"\n        }\n    ],\n    [\n        0,\n        \"&nsub;\"\n    ],\n    [\n        0,\n        \"&nsup;\"\n    ],\n    [\n        0,\n        \"&sube;\"\n    ],\n    [\n        0,\n        \"&supe;\"\n    ],\n    [\n        0,\n        \"&NotSubsetEqual;\"\n    ],\n    [\n        0,\n        \"&NotSupersetEqual;\"\n    ],\n    [\n        0,\n        {\n            v: \"&subne;\",\n            n: 65024,\n            o: \"&varsubsetneq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supne;\",\n            n: 65024,\n            o: \"&varsupsetneq;\"\n        }\n    ],\n    [\n        1,\n        \"&cupdot;\"\n    ],\n    [\n        0,\n        \"&UnionPlus;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sqsub;\",\n            n: 824,\n            o: \"&NotSquareSubset;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sqsup;\",\n            n: 824,\n            o: \"&NotSquareSuperset;\"\n        }\n    ],\n    [\n        0,\n        \"&sqsube;\"\n    ],\n    [\n        0,\n        \"&sqsupe;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sqcap;\",\n            n: 65024,\n            o: \"&sqcaps;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sqcup;\",\n            n: 65024,\n            o: \"&sqcups;\"\n        }\n    ],\n    [\n        0,\n        \"&CirclePlus;\"\n    ],\n    [\n        0,\n        \"&CircleMinus;\"\n    ],\n    [\n        0,\n        \"&CircleTimes;\"\n    ],\n    [\n        0,\n        \"&osol;\"\n    ],\n    [\n        0,\n        \"&CircleDot;\"\n    ],\n    [\n        0,\n        \"&circledcirc;\"\n    ],\n    [\n        0,\n        \"&circledast;\"\n    ],\n    [\n        1,\n        \"&circleddash;\"\n    ],\n    [\n        0,\n        \"&boxplus;\"\n    ],\n    [\n        0,\n        \"&boxminus;\"\n    ],\n    [\n        0,\n        \"&boxtimes;\"\n    ],\n    [\n        0,\n        \"&dotsquare;\"\n    ],\n    [\n        0,\n        \"&RightTee;\"\n    ],\n    [\n        0,\n        \"&dashv;\"\n    ],\n    [\n        0,\n        \"&DownTee;\"\n    ],\n    [\n        0,\n        \"&bot;\"\n    ],\n    [\n        1,\n        \"&models;\"\n    ],\n    [\n        0,\n        \"&DoubleRightTee;\"\n    ],\n    [\n        0,\n        \"&Vdash;\"\n    ],\n    [\n        0,\n        \"&Vvdash;\"\n    ],\n    [\n        0,\n        \"&VDash;\"\n    ],\n    [\n        0,\n        \"&nvdash;\"\n    ],\n    [\n        0,\n        \"&nvDash;\"\n    ],\n    [\n        0,\n        \"&nVdash;\"\n    ],\n    [\n        0,\n        \"&nVDash;\"\n    ],\n    [\n        0,\n        \"&prurel;\"\n    ],\n    [\n        1,\n        \"&LeftTriangle;\"\n    ],\n    [\n        0,\n        \"&RightTriangle;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LeftTriangleEqual;\",\n            n: 8402,\n            o: \"&nvltrie;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&RightTriangleEqual;\",\n            n: 8402,\n            o: \"&nvrtrie;\"\n        }\n    ],\n    [\n        0,\n        \"&origof;\"\n    ],\n    [\n        0,\n        \"&imof;\"\n    ],\n    [\n        0,\n        \"&multimap;\"\n    ],\n    [\n        0,\n        \"&hercon;\"\n    ],\n    [\n        0,\n        \"&intcal;\"\n    ],\n    [\n        0,\n        \"&veebar;\"\n    ],\n    [\n        1,\n        \"&barvee;\"\n    ],\n    [\n        0,\n        \"&angrtvb;\"\n    ],\n    [\n        0,\n        \"&lrtri;\"\n    ],\n    [\n        0,\n        \"&bigwedge;\"\n    ],\n    [\n        0,\n        \"&bigvee;\"\n    ],\n    [\n        0,\n        \"&bigcap;\"\n    ],\n    [\n        0,\n        \"&bigcup;\"\n    ],\n    [\n        0,\n        \"&diam;\"\n    ],\n    [\n        0,\n        \"&sdot;\"\n    ],\n    [\n        0,\n        \"&sstarf;\"\n    ],\n    [\n        0,\n        \"&divideontimes;\"\n    ],\n    [\n        0,\n        \"&bowtie;\"\n    ],\n    [\n        0,\n        \"&ltimes;\"\n    ],\n    [\n        0,\n        \"&rtimes;\"\n    ],\n    [\n        0,\n        \"&leftthreetimes;\"\n    ],\n    [\n        0,\n        \"&rightthreetimes;\"\n    ],\n    [\n        0,\n        \"&backsimeq;\"\n    ],\n    [\n        0,\n        \"&curlyvee;\"\n    ],\n    [\n        0,\n        \"&curlywedge;\"\n    ],\n    [\n        0,\n        \"&Sub;\"\n    ],\n    [\n        0,\n        \"&Sup;\"\n    ],\n    [\n        0,\n        \"&Cap;\"\n    ],\n    [\n        0,\n        \"&Cup;\"\n    ],\n    [\n        0,\n        \"&fork;\"\n    ],\n    [\n        0,\n        \"&epar;\"\n    ],\n    [\n        0,\n        \"&lessdot;\"\n    ],\n    [\n        0,\n        \"&gtdot;\"\n    ],\n    [\n        0,\n        {\n            v: \"&Ll;\",\n            n: 824,\n            o: \"&nLl;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&Gg;\",\n            n: 824,\n            o: \"&nGg;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&leg;\",\n            n: 65024,\n            o: \"&lesg;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gel;\",\n            n: 65024,\n            o: \"&gesl;\"\n        }\n    ],\n    [\n        2,\n        \"&cuepr;\"\n    ],\n    [\n        0,\n        \"&cuesc;\"\n    ],\n    [\n        0,\n        \"&NotPrecedesSlantEqual;\"\n    ],\n    [\n        0,\n        \"&NotSucceedsSlantEqual;\"\n    ],\n    [\n        0,\n        \"&NotSquareSubsetEqual;\"\n    ],\n    [\n        0,\n        \"&NotSquareSupersetEqual;\"\n    ],\n    [\n        2,\n        \"&lnsim;\"\n    ],\n    [\n        0,\n        \"&gnsim;\"\n    ],\n    [\n        0,\n        \"&precnsim;\"\n    ],\n    [\n        0,\n        \"&scnsim;\"\n    ],\n    [\n        0,\n        \"&nltri;\"\n    ],\n    [\n        0,\n        \"&NotRightTriangle;\"\n    ],\n    [\n        0,\n        \"&nltrie;\"\n    ],\n    [\n        0,\n        \"&NotRightTriangleEqual;\"\n    ],\n    [\n        0,\n        \"&vellip;\"\n    ],\n    [\n        0,\n        \"&ctdot;\"\n    ],\n    [\n        0,\n        \"&utdot;\"\n    ],\n    [\n        0,\n        \"&dtdot;\"\n    ],\n    [\n        0,\n        \"&disin;\"\n    ],\n    [\n        0,\n        \"&isinsv;\"\n    ],\n    [\n        0,\n        \"&isins;\"\n    ],\n    [\n        0,\n        {\n            v: \"&isindot;\",\n            n: 824,\n            o: \"&notindot;\"\n        }\n    ],\n    [\n        0,\n        \"&notinvc;\"\n    ],\n    [\n        0,\n        \"&notinvb;\"\n    ],\n    [\n        1,\n        {\n            v: \"&isinE;\",\n            n: 824,\n            o: \"&notinE;\"\n        }\n    ],\n    [\n        0,\n        \"&nisd;\"\n    ],\n    [\n        0,\n        \"&xnis;\"\n    ],\n    [\n        0,\n        \"&nis;\"\n    ],\n    [\n        0,\n        \"&notnivc;\"\n    ],\n    [\n        0,\n        \"&notnivb;\"\n    ],\n    [\n        6,\n        \"&barwed;\"\n    ],\n    [\n        0,\n        \"&Barwed;\"\n    ],\n    [\n        1,\n        \"&lceil;\"\n    ],\n    [\n        0,\n        \"&rceil;\"\n    ],\n    [\n        0,\n        \"&LeftFloor;\"\n    ],\n    [\n        0,\n        \"&rfloor;\"\n    ],\n    [\n        0,\n        \"&drcrop;\"\n    ],\n    [\n        0,\n        \"&dlcrop;\"\n    ],\n    [\n        0,\n        \"&urcrop;\"\n    ],\n    [\n        0,\n        \"&ulcrop;\"\n    ],\n    [\n        0,\n        \"&bnot;\"\n    ],\n    [\n        1,\n        \"&profline;\"\n    ],\n    [\n        0,\n        \"&profsurf;\"\n    ],\n    [\n        1,\n        \"&telrec;\"\n    ],\n    [\n        0,\n        \"&target;\"\n    ],\n    [\n        5,\n        \"&ulcorn;\"\n    ],\n    [\n        0,\n        \"&urcorn;\"\n    ],\n    [\n        0,\n        \"&dlcorn;\"\n    ],\n    [\n        0,\n        \"&drcorn;\"\n    ],\n    [\n        2,\n        \"&frown;\"\n    ],\n    [\n        0,\n        \"&smile;\"\n    ],\n    [\n        9,\n        \"&cylcty;\"\n    ],\n    [\n        0,\n        \"&profalar;\"\n    ],\n    [\n        7,\n        \"&topbot;\"\n    ],\n    [\n        6,\n        \"&ovbar;\"\n    ],\n    [\n        1,\n        \"&solbar;\"\n    ],\n    [\n        60,\n        \"&angzarr;\"\n    ],\n    [\n        51,\n        \"&lmoustache;\"\n    ],\n    [\n        0,\n        \"&rmoustache;\"\n    ],\n    [\n        2,\n        \"&OverBracket;\"\n    ],\n    [\n        0,\n        \"&bbrk;\"\n    ],\n    [\n        0,\n        \"&bbrktbrk;\"\n    ],\n    [\n        37,\n        \"&OverParenthesis;\"\n    ],\n    [\n        0,\n        \"&UnderParenthesis;\"\n    ],\n    [\n        0,\n        \"&OverBrace;\"\n    ],\n    [\n        0,\n        \"&UnderBrace;\"\n    ],\n    [\n        2,\n        \"&trpezium;\"\n    ],\n    [\n        4,\n        \"&elinters;\"\n    ],\n    [\n        59,\n        \"&blank;\"\n    ],\n    [\n        164,\n        \"&circledS;\"\n    ],\n    [\n        55,\n        \"&boxh;\"\n    ],\n    [\n        1,\n        \"&boxv;\"\n    ],\n    [\n        9,\n        \"&boxdr;\"\n    ],\n    [\n        3,\n        \"&boxdl;\"\n    ],\n    [\n        3,\n        \"&boxur;\"\n    ],\n    [\n        3,\n        \"&boxul;\"\n    ],\n    [\n        3,\n        \"&boxvr;\"\n    ],\n    [\n        7,\n        \"&boxvl;\"\n    ],\n    [\n        7,\n        \"&boxhd;\"\n    ],\n    [\n        7,\n        \"&boxhu;\"\n    ],\n    [\n        7,\n        \"&boxvh;\"\n    ],\n    [\n        19,\n        \"&boxH;\"\n    ],\n    [\n        0,\n        \"&boxV;\"\n    ],\n    [\n        0,\n        \"&boxdR;\"\n    ],\n    [\n        0,\n        \"&boxDr;\"\n    ],\n    [\n        0,\n        \"&boxDR;\"\n    ],\n    [\n        0,\n        \"&boxdL;\"\n    ],\n    [\n        0,\n        \"&boxDl;\"\n    ],\n    [\n        0,\n        \"&boxDL;\"\n    ],\n    [\n        0,\n        \"&boxuR;\"\n    ],\n    [\n        0,\n        \"&boxUr;\"\n    ],\n    [\n        0,\n        \"&boxUR;\"\n    ],\n    [\n        0,\n        \"&boxuL;\"\n    ],\n    [\n        0,\n        \"&boxUl;\"\n    ],\n    [\n        0,\n        \"&boxUL;\"\n    ],\n    [\n        0,\n        \"&boxvR;\"\n    ],\n    [\n        0,\n        \"&boxVr;\"\n    ],\n    [\n        0,\n        \"&boxVR;\"\n    ],\n    [\n        0,\n        \"&boxvL;\"\n    ],\n    [\n        0,\n        \"&boxVl;\"\n    ],\n    [\n        0,\n        \"&boxVL;\"\n    ],\n    [\n        0,\n        \"&boxHd;\"\n    ],\n    [\n        0,\n        \"&boxhD;\"\n    ],\n    [\n        0,\n        \"&boxHD;\"\n    ],\n    [\n        0,\n        \"&boxHu;\"\n    ],\n    [\n        0,\n        \"&boxhU;\"\n    ],\n    [\n        0,\n        \"&boxHU;\"\n    ],\n    [\n        0,\n        \"&boxvH;\"\n    ],\n    [\n        0,\n        \"&boxVh;\"\n    ],\n    [\n        0,\n        \"&boxVH;\"\n    ],\n    [\n        19,\n        \"&uhblk;\"\n    ],\n    [\n        3,\n        \"&lhblk;\"\n    ],\n    [\n        3,\n        \"&block;\"\n    ],\n    [\n        8,\n        \"&blk14;\"\n    ],\n    [\n        0,\n        \"&blk12;\"\n    ],\n    [\n        0,\n        \"&blk34;\"\n    ],\n    [\n        13,\n        \"&square;\"\n    ],\n    [\n        8,\n        \"&blacksquare;\"\n    ],\n    [\n        0,\n        \"&EmptyVerySmallSquare;\"\n    ],\n    [\n        1,\n        \"&rect;\"\n    ],\n    [\n        0,\n        \"&marker;\"\n    ],\n    [\n        2,\n        \"&fltns;\"\n    ],\n    [\n        1,\n        \"&bigtriangleup;\"\n    ],\n    [\n        0,\n        \"&blacktriangle;\"\n    ],\n    [\n        0,\n        \"&triangle;\"\n    ],\n    [\n        2,\n        \"&blacktriangleright;\"\n    ],\n    [\n        0,\n        \"&rtri;\"\n    ],\n    [\n        3,\n        \"&bigtriangledown;\"\n    ],\n    [\n        0,\n        \"&blacktriangledown;\"\n    ],\n    [\n        0,\n        \"&dtri;\"\n    ],\n    [\n        2,\n        \"&blacktriangleleft;\"\n    ],\n    [\n        0,\n        \"&ltri;\"\n    ],\n    [\n        6,\n        \"&loz;\"\n    ],\n    [\n        0,\n        \"&cir;\"\n    ],\n    [\n        32,\n        \"&tridot;\"\n    ],\n    [\n        2,\n        \"&bigcirc;\"\n    ],\n    [\n        8,\n        \"&ultri;\"\n    ],\n    [\n        0,\n        \"&urtri;\"\n    ],\n    [\n        0,\n        \"&lltri;\"\n    ],\n    [\n        0,\n        \"&EmptySmallSquare;\"\n    ],\n    [\n        0,\n        \"&FilledSmallSquare;\"\n    ],\n    [\n        8,\n        \"&bigstar;\"\n    ],\n    [\n        0,\n        \"&star;\"\n    ],\n    [\n        7,\n        \"&phone;\"\n    ],\n    [\n        49,\n        \"&female;\"\n    ],\n    [\n        1,\n        \"&male;\"\n    ],\n    [\n        29,\n        \"&spades;\"\n    ],\n    [\n        2,\n        \"&clubs;\"\n    ],\n    [\n        1,\n        \"&hearts;\"\n    ],\n    [\n        0,\n        \"&diamondsuit;\"\n    ],\n    [\n        3,\n        \"&sung;\"\n    ],\n    [\n        2,\n        \"&flat;\"\n    ],\n    [\n        0,\n        \"&natural;\"\n    ],\n    [\n        0,\n        \"&sharp;\"\n    ],\n    [\n        163,\n        \"&check;\"\n    ],\n    [\n        3,\n        \"&cross;\"\n    ],\n    [\n        8,\n        \"&malt;\"\n    ],\n    [\n        21,\n        \"&sext;\"\n    ],\n    [\n        33,\n        \"&VerticalSeparator;\"\n    ],\n    [\n        25,\n        \"&lbbrk;\"\n    ],\n    [\n        0,\n        \"&rbbrk;\"\n    ],\n    [\n        84,\n        \"&bsolhsub;\"\n    ],\n    [\n        0,\n        \"&suphsol;\"\n    ],\n    [\n        28,\n        \"&LeftDoubleBracket;\"\n    ],\n    [\n        0,\n        \"&RightDoubleBracket;\"\n    ],\n    [\n        0,\n        \"&lang;\"\n    ],\n    [\n        0,\n        \"&rang;\"\n    ],\n    [\n        0,\n        \"&Lang;\"\n    ],\n    [\n        0,\n        \"&Rang;\"\n    ],\n    [\n        0,\n        \"&loang;\"\n    ],\n    [\n        0,\n        \"&roang;\"\n    ],\n    [\n        7,\n        \"&longleftarrow;\"\n    ],\n    [\n        0,\n        \"&longrightarrow;\"\n    ],\n    [\n        0,\n        \"&longleftrightarrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongLeftArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongRightArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongLeftRightArrow;\"\n    ],\n    [\n        1,\n        \"&longmapsto;\"\n    ],\n    [\n        2,\n        \"&dzigrarr;\"\n    ],\n    [\n        258,\n        \"&nvlArr;\"\n    ],\n    [\n        0,\n        \"&nvrArr;\"\n    ],\n    [\n        0,\n        \"&nvHarr;\"\n    ],\n    [\n        0,\n        \"&Map;\"\n    ],\n    [\n        6,\n        \"&lbarr;\"\n    ],\n    [\n        0,\n        \"&bkarow;\"\n    ],\n    [\n        0,\n        \"&lBarr;\"\n    ],\n    [\n        0,\n        \"&dbkarow;\"\n    ],\n    [\n        0,\n        \"&drbkarow;\"\n    ],\n    [\n        0,\n        \"&DDotrahd;\"\n    ],\n    [\n        0,\n        \"&UpArrowBar;\"\n    ],\n    [\n        0,\n        \"&DownArrowBar;\"\n    ],\n    [\n        2,\n        \"&Rarrtl;\"\n    ],\n    [\n        2,\n        \"&latail;\"\n    ],\n    [\n        0,\n        \"&ratail;\"\n    ],\n    [\n        0,\n        \"&lAtail;\"\n    ],\n    [\n        0,\n        \"&rAtail;\"\n    ],\n    [\n        0,\n        \"&larrfs;\"\n    ],\n    [\n        0,\n        \"&rarrfs;\"\n    ],\n    [\n        0,\n        \"&larrbfs;\"\n    ],\n    [\n        0,\n        \"&rarrbfs;\"\n    ],\n    [\n        2,\n        \"&nwarhk;\"\n    ],\n    [\n        0,\n        \"&nearhk;\"\n    ],\n    [\n        0,\n        \"&hksearow;\"\n    ],\n    [\n        0,\n        \"&hkswarow;\"\n    ],\n    [\n        0,\n        \"&nwnear;\"\n    ],\n    [\n        0,\n        \"&nesear;\"\n    ],\n    [\n        0,\n        \"&seswar;\"\n    ],\n    [\n        0,\n        \"&swnwar;\"\n    ],\n    [\n        8,\n        {\n            v: \"&rarrc;\",\n            n: 824,\n            o: \"&nrarrc;\"\n        }\n    ],\n    [\n        1,\n        \"&cudarrr;\"\n    ],\n    [\n        0,\n        \"&ldca;\"\n    ],\n    [\n        0,\n        \"&rdca;\"\n    ],\n    [\n        0,\n        \"&cudarrl;\"\n    ],\n    [\n        0,\n        \"&larrpl;\"\n    ],\n    [\n        2,\n        \"&curarrm;\"\n    ],\n    [\n        0,\n        \"&cularrp;\"\n    ],\n    [\n        7,\n        \"&rarrpl;\"\n    ],\n    [\n        2,\n        \"&harrcir;\"\n    ],\n    [\n        0,\n        \"&Uarrocir;\"\n    ],\n    [\n        0,\n        \"&lurdshar;\"\n    ],\n    [\n        0,\n        \"&ldrushar;\"\n    ],\n    [\n        2,\n        \"&LeftRightVector;\"\n    ],\n    [\n        0,\n        \"&RightUpDownVector;\"\n    ],\n    [\n        0,\n        \"&DownLeftRightVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpDownVector;\"\n    ],\n    [\n        0,\n        \"&LeftVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightUpVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightDownVectorBar;\"\n    ],\n    [\n        0,\n        \"&DownLeftVectorBar;\"\n    ],\n    [\n        0,\n        \"&DownRightVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftUpVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftDownVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightUpTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightDownTeeVector;\"\n    ],\n    [\n        0,\n        \"&DownLeftTeeVector;\"\n    ],\n    [\n        0,\n        \"&DownRightTeeVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpTeeVector;\"\n    ],\n    [\n        0,\n        \"&LeftDownTeeVector;\"\n    ],\n    [\n        0,\n        \"&lHar;\"\n    ],\n    [\n        0,\n        \"&uHar;\"\n    ],\n    [\n        0,\n        \"&rHar;\"\n    ],\n    [\n        0,\n        \"&dHar;\"\n    ],\n    [\n        0,\n        \"&luruhar;\"\n    ],\n    [\n        0,\n        \"&ldrdhar;\"\n    ],\n    [\n        0,\n        \"&ruluhar;\"\n    ],\n    [\n        0,\n        \"&rdldhar;\"\n    ],\n    [\n        0,\n        \"&lharul;\"\n    ],\n    [\n        0,\n        \"&llhard;\"\n    ],\n    [\n        0,\n        \"&rharul;\"\n    ],\n    [\n        0,\n        \"&lrhard;\"\n    ],\n    [\n        0,\n        \"&udhar;\"\n    ],\n    [\n        0,\n        \"&duhar;\"\n    ],\n    [\n        0,\n        \"&RoundImplies;\"\n    ],\n    [\n        0,\n        \"&erarr;\"\n    ],\n    [\n        0,\n        \"&simrarr;\"\n    ],\n    [\n        0,\n        \"&larrsim;\"\n    ],\n    [\n        0,\n        \"&rarrsim;\"\n    ],\n    [\n        0,\n        \"&rarrap;\"\n    ],\n    [\n        0,\n        \"&ltlarr;\"\n    ],\n    [\n        1,\n        \"&gtrarr;\"\n    ],\n    [\n        0,\n        \"&subrarr;\"\n    ],\n    [\n        1,\n        \"&suplarr;\"\n    ],\n    [\n        0,\n        \"&lfisht;\"\n    ],\n    [\n        0,\n        \"&rfisht;\"\n    ],\n    [\n        0,\n        \"&ufisht;\"\n    ],\n    [\n        0,\n        \"&dfisht;\"\n    ],\n    [\n        5,\n        \"&lopar;\"\n    ],\n    [\n        0,\n        \"&ropar;\"\n    ],\n    [\n        4,\n        \"&lbrke;\"\n    ],\n    [\n        0,\n        \"&rbrke;\"\n    ],\n    [\n        0,\n        \"&lbrkslu;\"\n    ],\n    [\n        0,\n        \"&rbrksld;\"\n    ],\n    [\n        0,\n        \"&lbrksld;\"\n    ],\n    [\n        0,\n        \"&rbrkslu;\"\n    ],\n    [\n        0,\n        \"&langd;\"\n    ],\n    [\n        0,\n        \"&rangd;\"\n    ],\n    [\n        0,\n        \"&lparlt;\"\n    ],\n    [\n        0,\n        \"&rpargt;\"\n    ],\n    [\n        0,\n        \"&gtlPar;\"\n    ],\n    [\n        0,\n        \"&ltrPar;\"\n    ],\n    [\n        3,\n        \"&vzigzag;\"\n    ],\n    [\n        1,\n        \"&vangrt;\"\n    ],\n    [\n        0,\n        \"&angrtvbd;\"\n    ],\n    [\n        6,\n        \"&ange;\"\n    ],\n    [\n        0,\n        \"&range;\"\n    ],\n    [\n        0,\n        \"&dwangle;\"\n    ],\n    [\n        0,\n        \"&uwangle;\"\n    ],\n    [\n        0,\n        \"&angmsdaa;\"\n    ],\n    [\n        0,\n        \"&angmsdab;\"\n    ],\n    [\n        0,\n        \"&angmsdac;\"\n    ],\n    [\n        0,\n        \"&angmsdad;\"\n    ],\n    [\n        0,\n        \"&angmsdae;\"\n    ],\n    [\n        0,\n        \"&angmsdaf;\"\n    ],\n    [\n        0,\n        \"&angmsdag;\"\n    ],\n    [\n        0,\n        \"&angmsdah;\"\n    ],\n    [\n        0,\n        \"&bemptyv;\"\n    ],\n    [\n        0,\n        \"&demptyv;\"\n    ],\n    [\n        0,\n        \"&cemptyv;\"\n    ],\n    [\n        0,\n        \"&raemptyv;\"\n    ],\n    [\n        0,\n        \"&laemptyv;\"\n    ],\n    [\n        0,\n        \"&ohbar;\"\n    ],\n    [\n        0,\n        \"&omid;\"\n    ],\n    [\n        0,\n        \"&opar;\"\n    ],\n    [\n        1,\n        \"&operp;\"\n    ],\n    [\n        1,\n        \"&olcross;\"\n    ],\n    [\n        0,\n        \"&odsold;\"\n    ],\n    [\n        1,\n        \"&olcir;\"\n    ],\n    [\n        0,\n        \"&ofcir;\"\n    ],\n    [\n        0,\n        \"&olt;\"\n    ],\n    [\n        0,\n        \"&ogt;\"\n    ],\n    [\n        0,\n        \"&cirscir;\"\n    ],\n    [\n        0,\n        \"&cirE;\"\n    ],\n    [\n        0,\n        \"&solb;\"\n    ],\n    [\n        0,\n        \"&bsolb;\"\n    ],\n    [\n        3,\n        \"&boxbox;\"\n    ],\n    [\n        3,\n        \"&trisb;\"\n    ],\n    [\n        0,\n        \"&rtriltri;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LeftTriangleBar;\",\n            n: 824,\n            o: \"&NotLeftTriangleBar;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&RightTriangleBar;\",\n            n: 824,\n            o: \"&NotRightTriangleBar;\"\n        }\n    ],\n    [\n        11,\n        \"&iinfin;\"\n    ],\n    [\n        0,\n        \"&infintie;\"\n    ],\n    [\n        0,\n        \"&nvinfin;\"\n    ],\n    [\n        4,\n        \"&eparsl;\"\n    ],\n    [\n        0,\n        \"&smeparsl;\"\n    ],\n    [\n        0,\n        \"&eqvparsl;\"\n    ],\n    [\n        5,\n        \"&blacklozenge;\"\n    ],\n    [\n        8,\n        \"&RuleDelayed;\"\n    ],\n    [\n        1,\n        \"&dsol;\"\n    ],\n    [\n        9,\n        \"&bigodot;\"\n    ],\n    [\n        0,\n        \"&bigoplus;\"\n    ],\n    [\n        0,\n        \"&bigotimes;\"\n    ],\n    [\n        1,\n        \"&biguplus;\"\n    ],\n    [\n        1,\n        \"&bigsqcup;\"\n    ],\n    [\n        5,\n        \"&iiiint;\"\n    ],\n    [\n        0,\n        \"&fpartint;\"\n    ],\n    [\n        2,\n        \"&cirfnint;\"\n    ],\n    [\n        0,\n        \"&awint;\"\n    ],\n    [\n        0,\n        \"&rppolint;\"\n    ],\n    [\n        0,\n        \"&scpolint;\"\n    ],\n    [\n        0,\n        \"&npolint;\"\n    ],\n    [\n        0,\n        \"&pointint;\"\n    ],\n    [\n        0,\n        \"&quatint;\"\n    ],\n    [\n        0,\n        \"&intlarhk;\"\n    ],\n    [\n        10,\n        \"&pluscir;\"\n    ],\n    [\n        0,\n        \"&plusacir;\"\n    ],\n    [\n        0,\n        \"&simplus;\"\n    ],\n    [\n        0,\n        \"&plusdu;\"\n    ],\n    [\n        0,\n        \"&plussim;\"\n    ],\n    [\n        0,\n        \"&plustwo;\"\n    ],\n    [\n        1,\n        \"&mcomma;\"\n    ],\n    [\n        0,\n        \"&minusdu;\"\n    ],\n    [\n        2,\n        \"&loplus;\"\n    ],\n    [\n        0,\n        \"&roplus;\"\n    ],\n    [\n        0,\n        \"&Cross;\"\n    ],\n    [\n        0,\n        \"&timesd;\"\n    ],\n    [\n        0,\n        \"&timesbar;\"\n    ],\n    [\n        1,\n        \"&smashp;\"\n    ],\n    [\n        0,\n        \"&lotimes;\"\n    ],\n    [\n        0,\n        \"&rotimes;\"\n    ],\n    [\n        0,\n        \"&otimesas;\"\n    ],\n    [\n        0,\n        \"&Otimes;\"\n    ],\n    [\n        0,\n        \"&odiv;\"\n    ],\n    [\n        0,\n        \"&triplus;\"\n    ],\n    [\n        0,\n        \"&triminus;\"\n    ],\n    [\n        0,\n        \"&tritime;\"\n    ],\n    [\n        0,\n        \"&intprod;\"\n    ],\n    [\n        2,\n        \"&amalg;\"\n    ],\n    [\n        0,\n        \"&capdot;\"\n    ],\n    [\n        1,\n        \"&ncup;\"\n    ],\n    [\n        0,\n        \"&ncap;\"\n    ],\n    [\n        0,\n        \"&capand;\"\n    ],\n    [\n        0,\n        \"&cupor;\"\n    ],\n    [\n        0,\n        \"&cupcap;\"\n    ],\n    [\n        0,\n        \"&capcup;\"\n    ],\n    [\n        0,\n        \"&cupbrcap;\"\n    ],\n    [\n        0,\n        \"&capbrcup;\"\n    ],\n    [\n        0,\n        \"&cupcup;\"\n    ],\n    [\n        0,\n        \"&capcap;\"\n    ],\n    [\n        0,\n        \"&ccups;\"\n    ],\n    [\n        0,\n        \"&ccaps;\"\n    ],\n    [\n        2,\n        \"&ccupssm;\"\n    ],\n    [\n        2,\n        \"&And;\"\n    ],\n    [\n        0,\n        \"&Or;\"\n    ],\n    [\n        0,\n        \"&andand;\"\n    ],\n    [\n        0,\n        \"&oror;\"\n    ],\n    [\n        0,\n        \"&orslope;\"\n    ],\n    [\n        0,\n        \"&andslope;\"\n    ],\n    [\n        1,\n        \"&andv;\"\n    ],\n    [\n        0,\n        \"&orv;\"\n    ],\n    [\n        0,\n        \"&andd;\"\n    ],\n    [\n        0,\n        \"&ord;\"\n    ],\n    [\n        1,\n        \"&wedbar;\"\n    ],\n    [\n        6,\n        \"&sdote;\"\n    ],\n    [\n        3,\n        \"&simdot;\"\n    ],\n    [\n        2,\n        {\n            v: \"&congdot;\",\n            n: 824,\n            o: \"&ncongdot;\"\n        }\n    ],\n    [\n        0,\n        \"&easter;\"\n    ],\n    [\n        0,\n        \"&apacir;\"\n    ],\n    [\n        0,\n        {\n            v: \"&apE;\",\n            n: 824,\n            o: \"&napE;\"\n        }\n    ],\n    [\n        0,\n        \"&eplus;\"\n    ],\n    [\n        0,\n        \"&pluse;\"\n    ],\n    [\n        0,\n        \"&Esim;\"\n    ],\n    [\n        0,\n        \"&Colone;\"\n    ],\n    [\n        0,\n        \"&Equal;\"\n    ],\n    [\n        1,\n        \"&ddotseq;\"\n    ],\n    [\n        0,\n        \"&equivDD;\"\n    ],\n    [\n        0,\n        \"&ltcir;\"\n    ],\n    [\n        0,\n        \"&gtcir;\"\n    ],\n    [\n        0,\n        \"&ltquest;\"\n    ],\n    [\n        0,\n        \"&gtquest;\"\n    ],\n    [\n        0,\n        {\n            v: \"&leqslant;\",\n            n: 824,\n            o: \"&nleqslant;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&geqslant;\",\n            n: 824,\n            o: \"&ngeqslant;\"\n        }\n    ],\n    [\n        0,\n        \"&lesdot;\"\n    ],\n    [\n        0,\n        \"&gesdot;\"\n    ],\n    [\n        0,\n        \"&lesdoto;\"\n    ],\n    [\n        0,\n        \"&gesdoto;\"\n    ],\n    [\n        0,\n        \"&lesdotor;\"\n    ],\n    [\n        0,\n        \"&gesdotol;\"\n    ],\n    [\n        0,\n        \"&lap;\"\n    ],\n    [\n        0,\n        \"&gap;\"\n    ],\n    [\n        0,\n        \"&lne;\"\n    ],\n    [\n        0,\n        \"&gne;\"\n    ],\n    [\n        0,\n        \"&lnap;\"\n    ],\n    [\n        0,\n        \"&gnap;\"\n    ],\n    [\n        0,\n        \"&lEg;\"\n    ],\n    [\n        0,\n        \"&gEl;\"\n    ],\n    [\n        0,\n        \"&lsime;\"\n    ],\n    [\n        0,\n        \"&gsime;\"\n    ],\n    [\n        0,\n        \"&lsimg;\"\n    ],\n    [\n        0,\n        \"&gsiml;\"\n    ],\n    [\n        0,\n        \"&lgE;\"\n    ],\n    [\n        0,\n        \"&glE;\"\n    ],\n    [\n        0,\n        \"&lesges;\"\n    ],\n    [\n        0,\n        \"&gesles;\"\n    ],\n    [\n        0,\n        \"&els;\"\n    ],\n    [\n        0,\n        \"&egs;\"\n    ],\n    [\n        0,\n        \"&elsdot;\"\n    ],\n    [\n        0,\n        \"&egsdot;\"\n    ],\n    [\n        0,\n        \"&el;\"\n    ],\n    [\n        0,\n        \"&eg;\"\n    ],\n    [\n        2,\n        \"&siml;\"\n    ],\n    [\n        0,\n        \"&simg;\"\n    ],\n    [\n        0,\n        \"&simlE;\"\n    ],\n    [\n        0,\n        \"&simgE;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LessLess;\",\n            n: 824,\n            o: \"&NotNestedLessLess;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&GreaterGreater;\",\n            n: 824,\n            o: \"&NotNestedGreaterGreater;\"\n        }\n    ],\n    [\n        1,\n        \"&glj;\"\n    ],\n    [\n        0,\n        \"&gla;\"\n    ],\n    [\n        0,\n        \"&ltcc;\"\n    ],\n    [\n        0,\n        \"&gtcc;\"\n    ],\n    [\n        0,\n        \"&lescc;\"\n    ],\n    [\n        0,\n        \"&gescc;\"\n    ],\n    [\n        0,\n        \"&smt;\"\n    ],\n    [\n        0,\n        \"&lat;\"\n    ],\n    [\n        0,\n        {\n            v: \"&smte;\",\n            n: 65024,\n            o: \"&smtes;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&late;\",\n            n: 65024,\n            o: \"&lates;\"\n        }\n    ],\n    [\n        0,\n        \"&bumpE;\"\n    ],\n    [\n        0,\n        {\n            v: \"&PrecedesEqual;\",\n            n: 824,\n            o: \"&NotPrecedesEqual;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sce;\",\n            n: 824,\n            o: \"&NotSucceedsEqual;\"\n        }\n    ],\n    [\n        2,\n        \"&prE;\"\n    ],\n    [\n        0,\n        \"&scE;\"\n    ],\n    [\n        0,\n        \"&precneqq;\"\n    ],\n    [\n        0,\n        \"&scnE;\"\n    ],\n    [\n        0,\n        \"&prap;\"\n    ],\n    [\n        0,\n        \"&scap;\"\n    ],\n    [\n        0,\n        \"&precnapprox;\"\n    ],\n    [\n        0,\n        \"&scnap;\"\n    ],\n    [\n        0,\n        \"&Pr;\"\n    ],\n    [\n        0,\n        \"&Sc;\"\n    ],\n    [\n        0,\n        \"&subdot;\"\n    ],\n    [\n        0,\n        \"&supdot;\"\n    ],\n    [\n        0,\n        \"&subplus;\"\n    ],\n    [\n        0,\n        \"&supplus;\"\n    ],\n    [\n        0,\n        \"&submult;\"\n    ],\n    [\n        0,\n        \"&supmult;\"\n    ],\n    [\n        0,\n        \"&subedot;\"\n    ],\n    [\n        0,\n        \"&supedot;\"\n    ],\n    [\n        0,\n        {\n            v: \"&subE;\",\n            n: 824,\n            o: \"&nsubE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supE;\",\n            n: 824,\n            o: \"&nsupE;\"\n        }\n    ],\n    [\n        0,\n        \"&subsim;\"\n    ],\n    [\n        0,\n        \"&supsim;\"\n    ],\n    [\n        2,\n        {\n            v: \"&subnE;\",\n            n: 65024,\n            o: \"&varsubsetneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supnE;\",\n            n: 65024,\n            o: \"&varsupsetneqq;\"\n        }\n    ],\n    [\n        2,\n        \"&csub;\"\n    ],\n    [\n        0,\n        \"&csup;\"\n    ],\n    [\n        0,\n        \"&csube;\"\n    ],\n    [\n        0,\n        \"&csupe;\"\n    ],\n    [\n        0,\n        \"&subsup;\"\n    ],\n    [\n        0,\n        \"&supsub;\"\n    ],\n    [\n        0,\n        \"&subsub;\"\n    ],\n    [\n        0,\n        \"&supsup;\"\n    ],\n    [\n        0,\n        \"&suphsub;\"\n    ],\n    [\n        0,\n        \"&supdsub;\"\n    ],\n    [\n        0,\n        \"&forkv;\"\n    ],\n    [\n        0,\n        \"&topfork;\"\n    ],\n    [\n        0,\n        \"&mlcp;\"\n    ],\n    [\n        8,\n        \"&Dashv;\"\n    ],\n    [\n        1,\n        \"&Vdashl;\"\n    ],\n    [\n        0,\n        \"&Barv;\"\n    ],\n    [\n        0,\n        \"&vBar;\"\n    ],\n    [\n        0,\n        \"&vBarv;\"\n    ],\n    [\n        1,\n        \"&Vbar;\"\n    ],\n    [\n        0,\n        \"&Not;\"\n    ],\n    [\n        0,\n        \"&bNot;\"\n    ],\n    [\n        0,\n        \"&rnmid;\"\n    ],\n    [\n        0,\n        \"&cirmid;\"\n    ],\n    [\n        0,\n        \"&midcir;\"\n    ],\n    [\n        0,\n        \"&topcir;\"\n    ],\n    [\n        0,\n        \"&nhpar;\"\n    ],\n    [\n        0,\n        \"&parsim;\"\n    ],\n    [\n        9,\n        {\n            v: \"&parsl;\",\n            n: 8421,\n            o: \"&nparsl;\"\n        }\n    ],\n    [\n        44343,\n        {\n            n: new Map(/* #__PURE__ */ $70fecd720f63c751$var$restoreDiff([\n                [\n                    56476,\n                    \"&Ascr;\"\n                ],\n                [\n                    1,\n                    \"&Cscr;\"\n                ],\n                [\n                    0,\n                    \"&Dscr;\"\n                ],\n                [\n                    2,\n                    \"&Gscr;\"\n                ],\n                [\n                    2,\n                    \"&Jscr;\"\n                ],\n                [\n                    0,\n                    \"&Kscr;\"\n                ],\n                [\n                    2,\n                    \"&Nscr;\"\n                ],\n                [\n                    0,\n                    \"&Oscr;\"\n                ],\n                [\n                    0,\n                    \"&Pscr;\"\n                ],\n                [\n                    0,\n                    \"&Qscr;\"\n                ],\n                [\n                    1,\n                    \"&Sscr;\"\n                ],\n                [\n                    0,\n                    \"&Tscr;\"\n                ],\n                [\n                    0,\n                    \"&Uscr;\"\n                ],\n                [\n                    0,\n                    \"&Vscr;\"\n                ],\n                [\n                    0,\n                    \"&Wscr;\"\n                ],\n                [\n                    0,\n                    \"&Xscr;\"\n                ],\n                [\n                    0,\n                    \"&Yscr;\"\n                ],\n                [\n                    0,\n                    \"&Zscr;\"\n                ],\n                [\n                    0,\n                    \"&ascr;\"\n                ],\n                [\n                    0,\n                    \"&bscr;\"\n                ],\n                [\n                    0,\n                    \"&cscr;\"\n                ],\n                [\n                    0,\n                    \"&dscr;\"\n                ],\n                [\n                    1,\n                    \"&fscr;\"\n                ],\n                [\n                    1,\n                    \"&hscr;\"\n                ],\n                [\n                    0,\n                    \"&iscr;\"\n                ],\n                [\n                    0,\n                    \"&jscr;\"\n                ],\n                [\n                    0,\n                    \"&kscr;\"\n                ],\n                [\n                    0,\n                    \"&lscr;\"\n                ],\n                [\n                    0,\n                    \"&mscr;\"\n                ],\n                [\n                    0,\n                    \"&nscr;\"\n                ],\n                [\n                    1,\n                    \"&pscr;\"\n                ],\n                [\n                    0,\n                    \"&qscr;\"\n                ],\n                [\n                    0,\n                    \"&rscr;\"\n                ],\n                [\n                    0,\n                    \"&sscr;\"\n                ],\n                [\n                    0,\n                    \"&tscr;\"\n                ],\n                [\n                    0,\n                    \"&uscr;\"\n                ],\n                [\n                    0,\n                    \"&vscr;\"\n                ],\n                [\n                    0,\n                    \"&wscr;\"\n                ],\n                [\n                    0,\n                    \"&xscr;\"\n                ],\n                [\n                    0,\n                    \"&yscr;\"\n                ],\n                [\n                    0,\n                    \"&zscr;\"\n                ],\n                [\n                    52,\n                    \"&Afr;\"\n                ],\n                [\n                    0,\n                    \"&Bfr;\"\n                ],\n                [\n                    1,\n                    \"&Dfr;\"\n                ],\n                [\n                    0,\n                    \"&Efr;\"\n                ],\n                [\n                    0,\n                    \"&Ffr;\"\n                ],\n                [\n                    0,\n                    \"&Gfr;\"\n                ],\n                [\n                    2,\n                    \"&Jfr;\"\n                ],\n                [\n                    0,\n                    \"&Kfr;\"\n                ],\n                [\n                    0,\n                    \"&Lfr;\"\n                ],\n                [\n                    0,\n                    \"&Mfr;\"\n                ],\n                [\n                    0,\n                    \"&Nfr;\"\n                ],\n                [\n                    0,\n                    \"&Ofr;\"\n                ],\n                [\n                    0,\n                    \"&Pfr;\"\n                ],\n                [\n                    0,\n                    \"&Qfr;\"\n                ],\n                [\n                    1,\n                    \"&Sfr;\"\n                ],\n                [\n                    0,\n                    \"&Tfr;\"\n                ],\n                [\n                    0,\n                    \"&Ufr;\"\n                ],\n                [\n                    0,\n                    \"&Vfr;\"\n                ],\n                [\n                    0,\n                    \"&Wfr;\"\n                ],\n                [\n                    0,\n                    \"&Xfr;\"\n                ],\n                [\n                    0,\n                    \"&Yfr;\"\n                ],\n                [\n                    1,\n                    \"&afr;\"\n                ],\n                [\n                    0,\n                    \"&bfr;\"\n                ],\n                [\n                    0,\n                    \"&cfr;\"\n                ],\n                [\n                    0,\n                    \"&dfr;\"\n                ],\n                [\n                    0,\n                    \"&efr;\"\n                ],\n                [\n                    0,\n                    \"&ffr;\"\n                ],\n                [\n                    0,\n                    \"&gfr;\"\n                ],\n                [\n                    0,\n                    \"&hfr;\"\n                ],\n                [\n                    0,\n                    \"&ifr;\"\n                ],\n                [\n                    0,\n                    \"&jfr;\"\n                ],\n                [\n                    0,\n                    \"&kfr;\"\n                ],\n                [\n                    0,\n                    \"&lfr;\"\n                ],\n                [\n                    0,\n                    \"&mfr;\"\n                ],\n                [\n                    0,\n                    \"&nfr;\"\n                ],\n                [\n                    0,\n                    \"&ofr;\"\n                ],\n                [\n                    0,\n                    \"&pfr;\"\n                ],\n                [\n                    0,\n                    \"&qfr;\"\n                ],\n                [\n                    0,\n                    \"&rfr;\"\n                ],\n                [\n                    0,\n                    \"&sfr;\"\n                ],\n                [\n                    0,\n                    \"&tfr;\"\n                ],\n                [\n                    0,\n                    \"&ufr;\"\n                ],\n                [\n                    0,\n                    \"&vfr;\"\n                ],\n                [\n                    0,\n                    \"&wfr;\"\n                ],\n                [\n                    0,\n                    \"&xfr;\"\n                ],\n                [\n                    0,\n                    \"&yfr;\"\n                ],\n                [\n                    0,\n                    \"&zfr;\"\n                ],\n                [\n                    0,\n                    \"&Aopf;\"\n                ],\n                [\n                    0,\n                    \"&Bopf;\"\n                ],\n                [\n                    1,\n                    \"&Dopf;\"\n                ],\n                [\n                    0,\n                    \"&Eopf;\"\n                ],\n                [\n                    0,\n                    \"&Fopf;\"\n                ],\n                [\n                    0,\n                    \"&Gopf;\"\n                ],\n                [\n                    1,\n                    \"&Iopf;\"\n                ],\n                [\n                    0,\n                    \"&Jopf;\"\n                ],\n                [\n                    0,\n                    \"&Kopf;\"\n                ],\n                [\n                    0,\n                    \"&Lopf;\"\n                ],\n                [\n                    0,\n                    \"&Mopf;\"\n                ],\n                [\n                    1,\n                    \"&Oopf;\"\n                ],\n                [\n                    3,\n                    \"&Sopf;\"\n                ],\n                [\n                    0,\n                    \"&Topf;\"\n                ],\n                [\n                    0,\n                    \"&Uopf;\"\n                ],\n                [\n                    0,\n                    \"&Vopf;\"\n                ],\n                [\n                    0,\n                    \"&Wopf;\"\n                ],\n                [\n                    0,\n                    \"&Xopf;\"\n                ],\n                [\n                    0,\n                    \"&Yopf;\"\n                ],\n                [\n                    1,\n                    \"&aopf;\"\n                ],\n                [\n                    0,\n                    \"&bopf;\"\n                ],\n                [\n                    0,\n                    \"&copf;\"\n                ],\n                [\n                    0,\n                    \"&dopf;\"\n                ],\n                [\n                    0,\n                    \"&eopf;\"\n                ],\n                [\n                    0,\n                    \"&fopf;\"\n                ],\n                [\n                    0,\n                    \"&gopf;\"\n                ],\n                [\n                    0,\n                    \"&hopf;\"\n                ],\n                [\n                    0,\n                    \"&iopf;\"\n                ],\n                [\n                    0,\n                    \"&jopf;\"\n                ],\n                [\n                    0,\n                    \"&kopf;\"\n                ],\n                [\n                    0,\n                    \"&lopf;\"\n                ],\n                [\n                    0,\n                    \"&mopf;\"\n                ],\n                [\n                    0,\n                    \"&nopf;\"\n                ],\n                [\n                    0,\n                    \"&oopf;\"\n                ],\n                [\n                    0,\n                    \"&popf;\"\n                ],\n                [\n                    0,\n                    \"&qopf;\"\n                ],\n                [\n                    0,\n                    \"&ropf;\"\n                ],\n                [\n                    0,\n                    \"&sopf;\"\n                ],\n                [\n                    0,\n                    \"&topf;\"\n                ],\n                [\n                    0,\n                    \"&uopf;\"\n                ],\n                [\n                    0,\n                    \"&vopf;\"\n                ],\n                [\n                    0,\n                    \"&wopf;\"\n                ],\n                [\n                    0,\n                    \"&xopf;\"\n                ],\n                [\n                    0,\n                    \"&yopf;\"\n                ],\n                [\n                    0,\n                    \"&zopf;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        8906,\n        \"&fflig;\"\n    ],\n    [\n        0,\n        \"&filig;\"\n    ],\n    [\n        0,\n        \"&fllig;\"\n    ],\n    [\n        0,\n        \"&ffilig;\"\n    ],\n    [\n        0,\n        \"&ffllig;\"\n    ]\n]));\n\n\nconst $e72123220ae6606b$export$5699810ce3244ab8 = /[\"&'<>$\\x80-\\uFFFF]/g;\nconst $e72123220ae6606b$var$xmlCodeMap = new Map([\n    [\n        34,\n        \"&quot;\"\n    ],\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        39,\n        \"&apos;\"\n    ],\n    [\n        60,\n        \"&lt;\"\n    ],\n    [\n        62,\n        \"&gt;\"\n    ]\n]);\nconst $e72123220ae6606b$export$e02688b8085d016b = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null ? (str, index)=>str.codePointAt(index) : (c, index)=>(c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\nfunction $e72123220ae6606b$export$18855ec5be97da16(str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while((match = $e72123220ae6606b$export$5699810ce3244ab8.exec(str)) !== null){\n        const i = match.index;\n        const char = str.charCodeAt(i);\n        const next = $e72123220ae6606b$var$xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        } else {\n            ret += `${str.substring(lastIdx, i)}&#x${$e72123220ae6606b$export$e02688b8085d016b(str, i).toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = $e72123220ae6606b$export$5699810ce3244ab8.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\nconst $e72123220ae6606b$export$4e7f196112fea3c5 = $e72123220ae6606b$export$18855ec5be97da16;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */ function $e72123220ae6606b$var$getEscaper(regex, map) {\n    return function escape(data) {\n        let match;\n        let lastIdx = 0;\n        let result = \"\";\n        while(match = regex.exec(data)){\n            if (lastIdx !== match.index) result += data.substring(lastIdx, match.index);\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\nconst $e72123220ae6606b$export$9e081872deefdcb0 = $e72123220ae6606b$var$getEscaper(/[&<>'\"]/g, $e72123220ae6606b$var$xmlCodeMap);\nconst $e72123220ae6606b$export$30330f3d5eb70e11 = $e72123220ae6606b$var$getEscaper(/[\"&\\u00A0]/g, new Map([\n    [\n        34,\n        \"&quot;\"\n    ],\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        160,\n        \"&nbsp;\"\n    ]\n]));\nconst $e72123220ae6606b$export$96e6fc3a139b2555 = $e72123220ae6606b$var$getEscaper(/[&<>\\u00A0]/g, new Map([\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        60,\n        \"&lt;\"\n    ],\n    [\n        62,\n        \"&gt;\"\n    ],\n    [\n        160,\n        \"&nbsp;\"\n    ]\n]));\n\n\nconst $428a7e43bc21742b$var$htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\nfunction $428a7e43bc21742b$export$f9d6449b9af28dc1(data) {\n    return $428a7e43bc21742b$var$encodeHTMLTrieRe($428a7e43bc21742b$var$htmlReplacer, data);\n}\nfunction $428a7e43bc21742b$export$e6e86c76506f1190(data) {\n    return $428a7e43bc21742b$var$encodeHTMLTrieRe((0, $e72123220ae6606b$export$5699810ce3244ab8), data);\n}\nfunction $428a7e43bc21742b$var$encodeHTMLTrieRe(regExp, str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while((match = regExp.exec(str)) !== null){\n        const i = match.index;\n        ret += str.substring(lastIdx, i);\n        const char = str.charCodeAt(i);\n        let next = (0, $70fecd720f63c751$export$2e2bcd8739ae039).get(char);\n        if (typeof next === \"object\") {\n            // We are in a branch. Try to match the next char.\n            if (i + 1 < str.length) {\n                const nextChar = str.charCodeAt(i + 1);\n                const value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n                if (value !== undefined) {\n                    ret += value;\n                    lastIdx = regExp.lastIndex += 1;\n                    continue;\n                }\n            }\n            next = next.v;\n        }\n        // We might have a tree node without a value; skip and use a numeric entity.\n        if (next !== undefined) {\n            ret += next;\n            lastIdx = i + 1;\n        } else {\n            const cp = (0, $e72123220ae6606b$export$e02688b8085d016b)(str, i);\n            ret += `&#x${cp.toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = regExp.lastIndex += Number(cp !== char);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n\n\n\nvar $19c65afdc12482fd$export$b8c86583d9718b50;\n(function(EntityLevel) {\n    /** Support only XML entities. */ EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */ EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})($19c65afdc12482fd$export$b8c86583d9718b50 || ($19c65afdc12482fd$export$b8c86583d9718b50 = {}));\nvar $19c65afdc12482fd$export$1851b20d614eb756;\n(function(EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */ EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */ EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */ EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */ EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */ EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})($19c65afdc12482fd$export$1851b20d614eb756 || ($19c65afdc12482fd$export$1851b20d614eb756 = {}));\nfunction $19c65afdc12482fd$export$2f872c0f2117be69(data, options = $19c65afdc12482fd$export$b8c86583d9718b50.XML) {\n    const level = typeof options === \"number\" ? options : options.level;\n    if (level === $19c65afdc12482fd$export$b8c86583d9718b50.HTML) {\n        const mode = typeof options === \"object\" ? options.mode : undefined;\n        return (0, $21b54aeefac41b63$export$f045cb747ce77a19)(data, mode);\n    }\n    return (0, $21b54aeefac41b63$export$88e3b9643a8bd06e)(data);\n}\nfunction $19c65afdc12482fd$export$c94669f4c7d36be4(data, options = $19c65afdc12482fd$export$b8c86583d9718b50.XML) {\n    var _a;\n    const opts = typeof options === \"number\" ? {\n        level: options\n    } : options;\n    (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = (0, $21b54aeefac41b63$export$8c8f129ce60f53c).Strict;\n    return $19c65afdc12482fd$export$2f872c0f2117be69(data, opts);\n}\nfunction $19c65afdc12482fd$export$c564cdbbe6da493(data, options = $19c65afdc12482fd$export$b8c86583d9718b50.XML) {\n    const opts = typeof options === \"number\" ? {\n        level: options\n    } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === $19c65afdc12482fd$export$1851b20d614eb756.UTF8) return (0, $e72123220ae6606b$export$9e081872deefdcb0)(data);\n    if (opts.mode === $19c65afdc12482fd$export$1851b20d614eb756.Attribute) return (0, $e72123220ae6606b$export$30330f3d5eb70e11)(data);\n    if (opts.mode === $19c65afdc12482fd$export$1851b20d614eb756.Text) return (0, $e72123220ae6606b$export$96e6fc3a139b2555)(data);\n    if (opts.level === $19c65afdc12482fd$export$b8c86583d9718b50.HTML) {\n        if (opts.mode === $19c65afdc12482fd$export$1851b20d614eb756.ASCII) return (0, $428a7e43bc21742b$export$e6e86c76506f1190)(data);\n        return (0, $428a7e43bc21742b$export$f9d6449b9af28dc1)(data);\n    }\n    // ASCII and Extensive are equivalent\n    return (0, $e72123220ae6606b$export$18855ec5be97da16)(data);\n}\n\n\nfunction $acb166200129f66e$var$_class(obj) {\n    return Object.prototype.toString.call(obj);\n}\nfunction $acb166200129f66e$export$844ec244b1367d54(obj) {\n    return $acb166200129f66e$var$_class(obj) === '[object String]';\n}\nconst $acb166200129f66e$var$_hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction $acb166200129f66e$export$a4f4bb6b1453fff5(object, key) {\n    return $acb166200129f66e$var$_hasOwnProperty.call(object, key);\n}\n// Merge objects\n//\nfunction $acb166200129f66e$export$e6e34fd1f2686227(obj /* from1, from2, from3, ... */ ) {\n    const sources = Array.prototype.slice.call(arguments, 1);\n    sources.forEach(function(source) {\n        if (!source) return;\n        if (typeof source !== 'object') throw new TypeError(source + 'must be object');\n        Object.keys(source).forEach(function(key) {\n            obj[key] = source[key];\n        });\n    });\n    return obj;\n}\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction $acb166200129f66e$export$f78478f71955b6bc(src, pos, newElements) {\n    return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\nfunction $acb166200129f66e$export$644a8f5b13b2a36d(c) {\n    /* eslint no-bitwise:0 */ // broken sequence\n    if (c >= 0xD800 && c <= 0xDFFF) return false;\n    // never used\n    if (c >= 0xFDD0 && c <= 0xFDEF) return false;\n    if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) return false;\n    // control codes\n    if (c >= 0x00 && c <= 0x08) return false;\n    if (c === 0x0B) return false;\n    if (c >= 0x0E && c <= 0x1F) return false;\n    if (c >= 0x7F && c <= 0x9F) return false;\n    // out of range\n    if (c > 0x10FFFF) return false;\n    return true;\n}\nfunction $acb166200129f66e$export$73bfc63873071f74(c) {\n    /* eslint no-bitwise:0 */ if (c > 0xffff) {\n        c -= 0x10000;\n        const surrogate1 = 0xd800 + (c >> 10);\n        const surrogate2 = 0xdc00 + (c & 0x3ff);\n        return String.fromCharCode(surrogate1, surrogate2);\n    }\n    return String.fromCharCode(c);\n}\nconst $acb166200129f66e$var$UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g;\nconst $acb166200129f66e$var$ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\nconst $acb166200129f66e$var$UNESCAPE_ALL_RE = new RegExp($acb166200129f66e$var$UNESCAPE_MD_RE.source + '|' + $acb166200129f66e$var$ENTITY_RE.source, 'gi');\nconst $acb166200129f66e$var$DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;\nfunction $acb166200129f66e$var$replaceEntityPattern(match, name) {\n    if (name.charCodeAt(0) === 0x23 /* # */  && $acb166200129f66e$var$DIGITAL_ENTITY_TEST_RE.test(name)) {\n        const code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n        if ($acb166200129f66e$export$644a8f5b13b2a36d(code)) return $acb166200129f66e$export$73bfc63873071f74(code);\n        return match;\n    }\n    const decoded = (0, $21b54aeefac41b63$export$f045cb747ce77a19)(match);\n    if (decoded !== match) return decoded;\n    return match;\n}\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */ function $acb166200129f66e$export$5ccde1ea0c14bb03(str) {\n    if (str.indexOf('\\\\') < 0) return str;\n    return str.replace($acb166200129f66e$var$UNESCAPE_MD_RE, '$1');\n}\nfunction $acb166200129f66e$export$db8a17c6655f7e2c(str) {\n    if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) return str;\n    return str.replace($acb166200129f66e$var$UNESCAPE_ALL_RE, function(match, escaped, entity) {\n        if (escaped) return escaped;\n        return $acb166200129f66e$var$replaceEntityPattern(match, entity);\n    });\n}\nconst $acb166200129f66e$var$HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nconst $acb166200129f66e$var$HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nconst $acb166200129f66e$var$HTML_REPLACEMENTS = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;'\n};\nfunction $acb166200129f66e$var$replaceUnsafeChar(ch) {\n    return $acb166200129f66e$var$HTML_REPLACEMENTS[ch];\n}\nfunction $acb166200129f66e$export$4cf11838cdc2a8a8(str) {\n    if ($acb166200129f66e$var$HTML_ESCAPE_TEST_RE.test(str)) return str.replace($acb166200129f66e$var$HTML_ESCAPE_REPLACE_RE, $acb166200129f66e$var$replaceUnsafeChar);\n    return str;\n}\nconst $acb166200129f66e$var$REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\nfunction $acb166200129f66e$export$bc616c8f7dc20d5d(str) {\n    return str.replace($acb166200129f66e$var$REGEXP_ESCAPE_RE, '\\\\$&');\n}\nfunction $acb166200129f66e$export$1d5ccafae59b4926(code) {\n    switch(code){\n        case 0x09:\n        case 0x20:\n            return true;\n    }\n    return false;\n}\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction $acb166200129f66e$export$3c52dd84024ae72c(code) {\n    if (code >= 0x2000 && code <= 0x200A) return true;\n    switch(code){\n        case 0x09:\n        case 0x0A:\n        case 0x0B:\n        case 0x0C:\n        case 0x0D:\n        case 0x20:\n        case 0xA0:\n        case 0x1680:\n        case 0x202F:\n        case 0x205F:\n        case 0x3000:\n            return true;\n    }\n    return false;\n}\n/* eslint-disable max-len */ // Currently without astral characters support.\nfunction $acb166200129f66e$export$4888a643af800fc1(ch) {\n    return $e24366eb89af439c$export$2e2bcd8739ae039.test(ch) || $add59bdd531def5c$export$2e2bcd8739ae039.test(ch);\n}\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction $acb166200129f66e$export$829a0d33ae4e744(ch) {\n    switch(ch){\n        case 0x21 /* ! */ :\n        case 0x22 /* \" */ :\n        case 0x23 /* # */ :\n        case 0x24 /* $ */ :\n        case 0x25 /* % */ :\n        case 0x26 /* & */ :\n        case 0x27 /* ' */ :\n        case 0x28 /* ( */ :\n        case 0x29 /* ) */ :\n        case 0x2A /* * */ :\n        case 0x2B /* + */ :\n        case 0x2C /* , */ :\n        case 0x2D /* - */ :\n        case 0x2E /* . */ :\n        case 0x2F /* / */ :\n        case 0x3A /* : */ :\n        case 0x3B /* ; */ :\n        case 0x3C /* < */ :\n        case 0x3D /* = */ :\n        case 0x3E /* > */ :\n        case 0x3F /* ? */ :\n        case 0x40 /* @ */ :\n        case 0x5B /* [ */ :\n        case 0x5C /* \\ */ :\n        case 0x5D /* ] */ :\n        case 0x5E /* ^ */ :\n        case 0x5F /* _ */ :\n        case 0x60 /* ` */ :\n        case 0x7B /* { */ :\n        case 0x7C /* | */ :\n        case 0x7D /* } */ :\n        case 0x7E /* ~ */ :\n            return true;\n        default:\n            return false;\n    }\n}\n// Hepler to unify [reference labels].\n//\nfunction $acb166200129f66e$export$20ef46802c8744b(str) {\n    // Trim and collapse whitespace\n    //\n    str = str.trim().replace(/\\s+/g, ' ');\n    // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n    // fixed in v12 (couldn't find any details).\n    //\n    // So treat this one as a special case\n    // (remove this when node v10 is no longer supported).\n    //\n    if (\"\\u1E9E\".toLowerCase() === \"\\u1E7E\") str = str.replace(/ẞ/g, \"\\xdf\");\n    // .toLowerCase().toUpperCase() should get rid of all differences\n    // between letter variants.\n    //\n    // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n    // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n    // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n    // uppercased versions).\n    //\n    // Here's an example showing how it happens. Lets take greek letter omega:\n    // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n    //\n    // Unicode entries:\n    // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n    // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n    // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n    // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n    //\n    // Case-insensitive comparison should treat all of them as equivalent.\n    //\n    // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n    // and .toUpperCase() doesn't change ϴ (already uppercase).\n    //\n    // Applying first lower then upper case normalizes any character:\n    // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n    //\n    // Note: this is equivalent to unicode case folding; unicode normalization\n    // is a different step that is not required here.\n    //\n    // Final result should be uppercased, because it's later stored in an object\n    // (this avoid a conflict with Object.prototype members,\n    // most notably, `__proto__`)\n    //\n    return str.toLowerCase().toUpperCase();\n}\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst $acb166200129f66e$export$16c08b91f883959a = {\n    mdurl: $cfe8e16a3976eb73$exports,\n    ucmicro: $d55a0620136dd6aa$exports\n};\n\n\nvar $99119f957fdc25f6$exports = {};\n\n$parcel$export($99119f957fdc25f6$exports, \"parseLinkLabel\", () => $abd2f48303995751$export$2e2bcd8739ae039);\n$parcel$export($99119f957fdc25f6$exports, \"parseLinkDestination\", () => $edde6865825d92e7$export$2e2bcd8739ae039);\n$parcel$export($99119f957fdc25f6$exports, \"parseLinkTitle\", () => $f1d3017a5ae96057$export$2e2bcd8739ae039);\n// Just a shortcut for bulk export\n// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\nfunction $abd2f48303995751$export$2e2bcd8739ae039(state, start, disableNested) {\n    let level, found, marker, prevPos;\n    const max = state.posMax;\n    const oldPos = state.pos;\n    state.pos = start + 1;\n    level = 1;\n    while(state.pos < max){\n        marker = state.src.charCodeAt(state.pos);\n        if (marker === 0x5D /* ] */ ) {\n            level--;\n            if (level === 0) {\n                found = true;\n                break;\n            }\n        }\n        prevPos = state.pos;\n        state.md.inline.skipToken(state);\n        if (marker === 0x5B /* [ */ ) {\n            if (prevPos === state.pos - 1) // increase level if we find text `[`, which is not a part of any token\n            level++;\n            else if (disableNested) {\n                state.pos = oldPos;\n                return -1;\n            }\n        }\n    }\n    let labelEnd = -1;\n    if (found) labelEnd = state.pos;\n    // restore old state\n    state.pos = oldPos;\n    return labelEnd;\n}\n\n\n// Parse link destination\n//\n\nfunction $edde6865825d92e7$export$2e2bcd8739ae039(str, start, max) {\n    let code;\n    let pos = start;\n    const result = {\n        ok: false,\n        pos: 0,\n        str: ''\n    };\n    if (str.charCodeAt(pos) === 0x3C /* < */ ) {\n        pos++;\n        while(pos < max){\n            code = str.charCodeAt(pos);\n            if (code === 0x0A /* \\n */ ) return result;\n            if (code === 0x3C /* < */ ) return result;\n            if (code === 0x3E /* > */ ) {\n                result.pos = pos + 1;\n                result.str = (0, $acb166200129f66e$export$db8a17c6655f7e2c)(str.slice(start + 1, pos));\n                result.ok = true;\n                return result;\n            }\n            if (code === 0x5C /* \\ */  && pos + 1 < max) {\n                pos += 2;\n                continue;\n            }\n            pos++;\n        }\n        // no closing '>'\n        return result;\n    }\n    // this should be ... } else { ... branch\n    let level = 0;\n    while(pos < max){\n        code = str.charCodeAt(pos);\n        if (code === 0x20) break;\n        // ascii control characters\n        if (code < 0x20 || code === 0x7F) break;\n        if (code === 0x5C /* \\ */  && pos + 1 < max) {\n            if (str.charCodeAt(pos + 1) === 0x20) break;\n            pos += 2;\n            continue;\n        }\n        if (code === 0x28 /* ( */ ) {\n            level++;\n            if (level > 32) return result;\n        }\n        if (code === 0x29 /* ) */ ) {\n            if (level === 0) break;\n            level--;\n        }\n        pos++;\n    }\n    if (start === pos) return result;\n    if (level !== 0) return result;\n    result.str = (0, $acb166200129f66e$export$db8a17c6655f7e2c)(str.slice(start, pos));\n    result.pos = pos;\n    result.ok = true;\n    return result;\n}\n\n\n// Parse link title\n//\n\nfunction $f1d3017a5ae96057$export$2e2bcd8739ae039(str, start, max, prev_state) {\n    let code;\n    let pos = start;\n    const state = {\n        // if `true`, this is a valid link title\n        ok: false,\n        // if `true`, this link can be continued on the next line\n        can_continue: false,\n        // if `ok`, it's the position of the first character after the closing marker\n        pos: 0,\n        // if `ok`, it's the unescaped title\n        str: '',\n        // expected closing marker character code\n        marker: 0\n    };\n    if (prev_state) {\n        // this is a continuation of a previous parseLinkTitle call on the next line,\n        // used in reference links only\n        state.str = prev_state.str;\n        state.marker = prev_state.marker;\n    } else {\n        if (pos >= max) return state;\n        let marker = str.charCodeAt(pos);\n        if (marker !== 0x22 /* \" */  && marker !== 0x27 /* ' */  && marker !== 0x28 /* ( */ ) return state;\n        start++;\n        pos++;\n        // if opening marker is \"(\", switch it to closing marker \")\"\n        if (marker === 0x28) marker = 0x29;\n        state.marker = marker;\n    }\n    while(pos < max){\n        code = str.charCodeAt(pos);\n        if (code === state.marker) {\n            state.pos = pos + 1;\n            state.str += (0, $acb166200129f66e$export$db8a17c6655f7e2c)(str.slice(start, pos));\n            state.ok = true;\n            return state;\n        } else if (code === 0x28 /* ( */  && state.marker === 0x29 /* ) */ ) return state;\n        else if (code === 0x5C /* \\ */  && pos + 1 < max) pos++;\n        pos++;\n    }\n    // no closing marker found, but this link title may continue on the next line (for references)\n    state.can_continue = true;\n    state.str += (0, $acb166200129f66e$export$db8a17c6655f7e2c)(str.slice(start, pos));\n    return state;\n}\n\n\n\n\n/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/ \nconst $1aad198f750e42d7$var$default_rules = {};\n$1aad198f750e42d7$var$default_rules.code_inline = function(tokens, idx, options, env, slf) {\n    const token = tokens[idx];\n    return '<code' + slf.renderAttrs(token) + '>' + (0, $acb166200129f66e$export$4cf11838cdc2a8a8)(token.content) + '</code>';\n};\n$1aad198f750e42d7$var$default_rules.code_block = function(tokens, idx, options, env, slf) {\n    const token = tokens[idx];\n    return '<pre' + slf.renderAttrs(token) + '><code>' + (0, $acb166200129f66e$export$4cf11838cdc2a8a8)(tokens[idx].content) + '</code></pre>\\n';\n};\n$1aad198f750e42d7$var$default_rules.fence = function(tokens, idx, options, env, slf) {\n    const token = tokens[idx];\n    const info = token.info ? (0, $acb166200129f66e$export$db8a17c6655f7e2c)(token.info).trim() : '';\n    let langName = '';\n    let langAttrs = '';\n    if (info) {\n        const arr = info.split(/(\\s+)/g);\n        langName = arr[0];\n        langAttrs = arr.slice(2).join('');\n    }\n    let highlighted;\n    if (options.highlight) highlighted = options.highlight(token.content, langName, langAttrs) || (0, $acb166200129f66e$export$4cf11838cdc2a8a8)(token.content);\n    else highlighted = (0, $acb166200129f66e$export$4cf11838cdc2a8a8)(token.content);\n    if (highlighted.indexOf('<pre') === 0) return highlighted + '\\n';\n    // If language exists, inject class gently, without modifying original token.\n    // May be, one day we will add .deepClone() for token and simplify this part, but\n    // now we prefer to keep things local.\n    if (info) {\n        const i = token.attrIndex('class');\n        const tmpAttrs = token.attrs ? token.attrs.slice() : [];\n        if (i < 0) tmpAttrs.push([\n            'class',\n            options.langPrefix + langName\n        ]);\n        else {\n            tmpAttrs[i] = tmpAttrs[i].slice();\n            tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n        }\n        // Fake token just to render attributes\n        const tmpToken = {\n            attrs: tmpAttrs\n        };\n        return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`;\n    }\n    return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`;\n};\n$1aad198f750e42d7$var$default_rules.image = function(tokens, idx, options, env, slf) {\n    const token = tokens[idx];\n    // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n    // should be placed on proper position for tests.\n    //\n    // Replace content with actual value\n    token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);\n    return slf.renderToken(tokens, idx, options);\n};\n$1aad198f750e42d7$var$default_rules.hardbreak = function(tokens, idx, options /*, env */ ) {\n    return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\n$1aad198f750e42d7$var$default_rules.softbreak = function(tokens, idx, options /*, env */ ) {\n    return options.breaks ? options.xhtmlOut ? '<br />\\n' : '<br>\\n' : '\\n';\n};\n$1aad198f750e42d7$var$default_rules.text = function(tokens, idx /*, options, env */ ) {\n    return (0, $acb166200129f66e$export$4cf11838cdc2a8a8)(tokens[idx].content);\n};\n$1aad198f750e42d7$var$default_rules.html_block = function(tokens, idx /*, options, env */ ) {\n    return tokens[idx].content;\n};\n$1aad198f750e42d7$var$default_rules.html_inline = function(tokens, idx /*, options, env */ ) {\n    return tokens[idx].content;\n};\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/ function $1aad198f750e42d7$var$Renderer() {\n    /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/ this.rules = (0, $acb166200129f66e$export$e6e34fd1f2686227)({}, $1aad198f750e42d7$var$default_rules);\n}\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/ $1aad198f750e42d7$var$Renderer.prototype.renderAttrs = function renderAttrs(token) {\n    let i, l, result;\n    if (!token.attrs) return '';\n    result = '';\n    for(i = 0, l = token.attrs.length; i < l; i++)result += ' ' + (0, $acb166200129f66e$export$4cf11838cdc2a8a8)(token.attrs[i][0]) + '=\"' + (0, $acb166200129f66e$export$4cf11838cdc2a8a8)(token.attrs[i][1]) + '\"';\n    return result;\n};\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/ $1aad198f750e42d7$var$Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n    const token = tokens[idx];\n    let result = '';\n    // Tight list paragraphs\n    if (token.hidden) return '';\n    // Insert a newline between hidden paragraph and subsequent opening\n    // block-level tag.\n    //\n    // For example, here we should insert a newline before blockquote:\n    //  - a\n    //    >\n    //\n    if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) result += '\\n';\n    // Add token name, e.g. `<img`\n    result += (token.nesting === -1 ? '</' : '<') + token.tag;\n    // Encode attributes, e.g. `<img src=\"foo\"`\n    result += this.renderAttrs(token);\n    // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n    if (token.nesting === 0 && options.xhtmlOut) result += ' /';\n    // Check if we need to add a newline after this tag\n    let needLf = false;\n    if (token.block) {\n        needLf = true;\n        if (token.nesting === 1) {\n            if (idx + 1 < tokens.length) {\n                const nextToken = tokens[idx + 1];\n                if (nextToken.type === 'inline' || nextToken.hidden) // Block-level tag containing an inline tag.\n                //\n                needLf = false;\n                else if (nextToken.nesting === -1 && nextToken.tag === token.tag) // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n                //\n                needLf = false;\n            }\n        }\n    }\n    result += needLf ? '>\\n' : '>';\n    return result;\n};\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/ $1aad198f750e42d7$var$Renderer.prototype.renderInline = function(tokens, options, env) {\n    let result = '';\n    const rules = this.rules;\n    for(let i = 0, len = tokens.length; i < len; i++){\n        const type = tokens[i].type;\n        if (typeof rules[type] !== 'undefined') result += rules[type](tokens, i, options, env, this);\n        else result += this.renderToken(tokens, i, options);\n    }\n    return result;\n};\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/ $1aad198f750e42d7$var$Renderer.prototype.renderInlineAsText = function(tokens, options, env) {\n    let result = '';\n    for(let i = 0, len = tokens.length; i < len; i++)switch(tokens[i].type){\n        case 'text':\n            result += tokens[i].content;\n            break;\n        case 'image':\n            result += this.renderInlineAsText(tokens[i].children, options, env);\n            break;\n        case 'html_inline':\n        case 'html_block':\n            result += tokens[i].content;\n            break;\n        case 'softbreak':\n        case 'hardbreak':\n            result += '\\n';\n            break;\n        default:\n    }\n    return result;\n};\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/ $1aad198f750e42d7$var$Renderer.prototype.render = function(tokens, options, env) {\n    let result = '';\n    const rules = this.rules;\n    for(let i = 0, len = tokens.length; i < len; i++){\n        const type = tokens[i].type;\n        if (type === 'inline') result += this.renderInline(tokens[i].children, options, env);\n        else if (typeof rules[type] !== 'undefined') result += rules[type](tokens, i, options, env, this);\n        else result += this.renderToken(tokens, i, options, env);\n    }\n    return result;\n};\nvar $1aad198f750e42d7$export$2e2bcd8739ae039 = $1aad198f750e42d7$var$Renderer;\n\n\n/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/ /**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/ /**\n * new Ruler()\n **/ function $41ea3ea6c70806b8$var$Ruler() {\n    // List of added rules. Each element is:\n    //\n    // {\n    //   name: XXX,\n    //   enabled: Boolean,\n    //   fn: Function(),\n    //   alt: [ name2, name3 ]\n    // }\n    //\n    this.__rules__ = [];\n    // Cached rule chains.\n    //\n    // First level - chain name, '' for default.\n    // Second level - diginal anchor for fast filtering by charcodes.\n    //\n    this.__cache__ = null;\n}\n// Helper methods, should not be used directly\n// Find rule index by name\n//\n$41ea3ea6c70806b8$var$Ruler.prototype.__find__ = function(name) {\n    for(let i = 0; i < this.__rules__.length; i++){\n        if (this.__rules__[i].name === name) return i;\n    }\n    return -1;\n};\n// Build rules lookup cache\n//\n$41ea3ea6c70806b8$var$Ruler.prototype.__compile__ = function() {\n    const self = this;\n    const chains = [\n        ''\n    ];\n    // collect unique names\n    self.__rules__.forEach(function(rule) {\n        if (!rule.enabled) return;\n        rule.alt.forEach(function(altName) {\n            if (chains.indexOf(altName) < 0) chains.push(altName);\n        });\n    });\n    self.__cache__ = {};\n    chains.forEach(function(chain) {\n        self.__cache__[chain] = [];\n        self.__rules__.forEach(function(rule) {\n            if (!rule.enabled) return;\n            if (chain && rule.alt.indexOf(chain) < 0) return;\n            self.__cache__[chain].push(rule.fn);\n        });\n    });\n};\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.at = function(name, fn, options) {\n    const index = this.__find__(name);\n    const opt = options || {};\n    if (index === -1) throw new Error('Parser rule not found: ' + name);\n    this.__rules__[index].fn = fn;\n    this.__rules__[index].alt = opt.alt || [];\n    this.__cache__ = null;\n};\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.before = function(beforeName, ruleName, fn, options) {\n    const index = this.__find__(beforeName);\n    const opt = options || {};\n    if (index === -1) throw new Error('Parser rule not found: ' + beforeName);\n    this.__rules__.splice(index, 0, {\n        name: ruleName,\n        enabled: true,\n        fn: fn,\n        alt: opt.alt || []\n    });\n    this.__cache__ = null;\n};\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.after = function(afterName, ruleName, fn, options) {\n    const index = this.__find__(afterName);\n    const opt = options || {};\n    if (index === -1) throw new Error('Parser rule not found: ' + afterName);\n    this.__rules__.splice(index + 1, 0, {\n        name: ruleName,\n        enabled: true,\n        fn: fn,\n        alt: opt.alt || []\n    });\n    this.__cache__ = null;\n};\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.push = function(ruleName, fn, options) {\n    const opt = options || {};\n    this.__rules__.push({\n        name: ruleName,\n        enabled: true,\n        fn: fn,\n        alt: opt.alt || []\n    });\n    this.__cache__ = null;\n};\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.enable = function(list, ignoreInvalid) {\n    if (!Array.isArray(list)) list = [\n        list\n    ];\n    const result = [];\n    // Search by name and enable\n    list.forEach(function(name) {\n        const idx = this.__find__(name);\n        if (idx < 0) {\n            if (ignoreInvalid) return;\n            throw new Error('Rules manager: invalid rule name ' + name);\n        }\n        this.__rules__[idx].enabled = true;\n        result.push(name);\n    }, this);\n    this.__cache__ = null;\n    return result;\n};\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.enableOnly = function(list, ignoreInvalid) {\n    if (!Array.isArray(list)) list = [\n        list\n    ];\n    this.__rules__.forEach(function(rule) {\n        rule.enabled = false;\n    });\n    this.enable(list, ignoreInvalid);\n};\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.disable = function(list, ignoreInvalid) {\n    if (!Array.isArray(list)) list = [\n        list\n    ];\n    const result = [];\n    // Search by name and disable\n    list.forEach(function(name) {\n        const idx = this.__find__(name);\n        if (idx < 0) {\n            if (ignoreInvalid) return;\n            throw new Error('Rules manager: invalid rule name ' + name);\n        }\n        this.__rules__[idx].enabled = false;\n        result.push(name);\n    }, this);\n    this.__cache__ = null;\n    return result;\n};\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/ $41ea3ea6c70806b8$var$Ruler.prototype.getRules = function(chainName) {\n    if (this.__cache__ === null) this.__compile__();\n    // Chain can be empty, if rules disabled. But we still have to return Array.\n    return this.__cache__[chainName] || [];\n};\nvar $41ea3ea6c70806b8$export$2e2bcd8739ae039 = $41ea3ea6c70806b8$var$Ruler;\n\n\n// Core state object\n//\n// Token class\n/**\n * class Token\n **/ /**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/ function $59ac17e6d91b036a$var$Token(type, tag, nesting) {\n    /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/ this.type = type;\n    /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/ this.tag = tag;\n    /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/ this.attrs = null;\n    /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/ this.map = null;\n    /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/ this.nesting = nesting;\n    /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/ this.level = 0;\n    /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/ this.children = null;\n    /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/ this.content = '';\n    /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/ this.markup = '';\n    /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/ this.info = '';\n    /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/ this.meta = null;\n    /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/ this.block = false;\n    /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/ this.hidden = false;\n}\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/ $59ac17e6d91b036a$var$Token.prototype.attrIndex = function attrIndex(name) {\n    if (!this.attrs) return -1;\n    const attrs = this.attrs;\n    for(let i = 0, len = attrs.length; i < len; i++){\n        if (attrs[i][0] === name) return i;\n    }\n    return -1;\n};\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/ $59ac17e6d91b036a$var$Token.prototype.attrPush = function attrPush(attrData) {\n    if (this.attrs) this.attrs.push(attrData);\n    else this.attrs = [\n        attrData\n    ];\n};\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/ $59ac17e6d91b036a$var$Token.prototype.attrSet = function attrSet(name, value) {\n    const idx = this.attrIndex(name);\n    const attrData = [\n        name,\n        value\n    ];\n    if (idx < 0) this.attrPush(attrData);\n    else this.attrs[idx] = attrData;\n};\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/ $59ac17e6d91b036a$var$Token.prototype.attrGet = function attrGet(name) {\n    const idx = this.attrIndex(name);\n    let value = null;\n    if (idx >= 0) value = this.attrs[idx][1];\n    return value;\n};\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/ $59ac17e6d91b036a$var$Token.prototype.attrJoin = function attrJoin(name, value) {\n    const idx = this.attrIndex(name);\n    if (idx < 0) this.attrPush([\n        name,\n        value\n    ]);\n    else this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n};\nvar $59ac17e6d91b036a$export$2e2bcd8739ae039 = $59ac17e6d91b036a$var$Token;\n\n\nfunction $8993a444d7ae3c83$var$StateCore(src, md, env) {\n    this.src = src;\n    this.env = env;\n    this.tokens = [];\n    this.inlineMode = false;\n    this.md = md // link to parser instance\n    ;\n}\n// re-export Token class to use in core rules\n$8993a444d7ae3c83$var$StateCore.prototype.Token = (0, $59ac17e6d91b036a$export$2e2bcd8739ae039);\nvar $8993a444d7ae3c83$export$2e2bcd8739ae039 = $8993a444d7ae3c83$var$StateCore;\n\n\n// Normalize input string\n// https://spec.commonmark.org/0.29/#line-ending\nconst $5203c6838a32c344$var$NEWLINES_RE = /\\r\\n?|\\n/g;\nconst $5203c6838a32c344$var$NULL_RE = /\\0/g;\nfunction $5203c6838a32c344$export$2e2bcd8739ae039(state) {\n    let str;\n    // Normalize newlines\n    str = state.src.replace($5203c6838a32c344$var$NEWLINES_RE, '\\n');\n    // Replace NULL characters\n    str = str.replace($5203c6838a32c344$var$NULL_RE, '\\uFFFD');\n    state.src = str;\n}\n\n\nfunction $cd7698881deefc7d$export$2e2bcd8739ae039(state) {\n    let token;\n    if (state.inlineMode) {\n        token = new state.Token('inline', '', 0);\n        token.content = state.src;\n        token.map = [\n            0,\n            1\n        ];\n        token.children = [];\n        state.tokens.push(token);\n    } else state.md.block.parse(state.src, state.md, state.env, state.tokens);\n}\n\n\nfunction $196eb58ba8a882c3$export$2e2bcd8739ae039(state) {\n    const tokens = state.tokens;\n    // Parse inlines\n    for(let i = 0, l = tokens.length; i < l; i++){\n        const tok = tokens[i];\n        if (tok.type === 'inline') state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n}\n\n\n// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nfunction $e017aabd93d74ca7$var$isLinkOpen(str) {\n    return /^<a[>\\s]/i.test(str);\n}\nfunction $e017aabd93d74ca7$var$isLinkClose(str) {\n    return /^<\\/a\\s*>/i.test(str);\n}\nfunction $e017aabd93d74ca7$export$2e2bcd8739ae039(state) {\n    const blockTokens = state.tokens;\n    if (!state.md.options.linkify) return;\n    for(let j = 0, l = blockTokens.length; j < l; j++){\n        if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) continue;\n        let tokens = blockTokens[j].children;\n        let htmlLinkLevel = 0;\n        // We scan from the end, to keep position when new tags added.\n        // Use reversed logic in links start/end match\n        for(let i = tokens.length - 1; i >= 0; i--){\n            const currentToken = tokens[i];\n            // Skip content of markdown links\n            if (currentToken.type === 'link_close') {\n                i--;\n                while(tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open')i--;\n                continue;\n            }\n            // Skip content of html tag links\n            if (currentToken.type === 'html_inline') {\n                if ($e017aabd93d74ca7$var$isLinkOpen(currentToken.content) && htmlLinkLevel > 0) htmlLinkLevel--;\n                if ($e017aabd93d74ca7$var$isLinkClose(currentToken.content)) htmlLinkLevel++;\n            }\n            if (htmlLinkLevel > 0) continue;\n            if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n                const text = currentToken.content;\n                let links = state.md.linkify.match(text);\n                // Now split string to nodes\n                const nodes = [];\n                let level = currentToken.level;\n                let lastPos = 0;\n                // forbid escape sequence at the start of the string,\n                // this avoids http\\://example.com/ from being linkified as\n                // http:<a href=\"//example.com/\">//example.com/</a>\n                if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === 'text_special') links = links.slice(1);\n                for(let ln = 0; ln < links.length; ln++){\n                    const url = links[ln].url;\n                    const fullUrl = state.md.normalizeLink(url);\n                    if (!state.md.validateLink(fullUrl)) continue;\n                    let urlText = links[ln].text;\n                    // Linkifier might send raw hostnames like \"example.com\", where url\n                    // starts with domain name. So we prepend http:// in those cases,\n                    // and remove it afterwards.\n                    //\n                    if (!links[ln].schema) urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n                    else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n                    else urlText = state.md.normalizeLinkText(urlText);\n                    const pos = links[ln].index;\n                    if (pos > lastPos) {\n                        const token = new state.Token('text', '', 0);\n                        token.content = text.slice(lastPos, pos);\n                        token.level = level;\n                        nodes.push(token);\n                    }\n                    const token_o = new state.Token('link_open', 'a', 1);\n                    token_o.attrs = [\n                        [\n                            'href',\n                            fullUrl\n                        ]\n                    ];\n                    token_o.level = level++;\n                    token_o.markup = 'linkify';\n                    token_o.info = 'auto';\n                    nodes.push(token_o);\n                    const token_t = new state.Token('text', '', 0);\n                    token_t.content = urlText;\n                    token_t.level = level;\n                    nodes.push(token_t);\n                    const token_c = new state.Token('link_close', 'a', -1);\n                    token_c.level = --level;\n                    token_c.markup = 'linkify';\n                    token_c.info = 'auto';\n                    nodes.push(token_c);\n                    lastPos = links[ln].lastIndex;\n                }\n                if (lastPos < text.length) {\n                    const token = new state.Token('text', '', 0);\n                    token.content = text.slice(lastPos);\n                    token.level = level;\n                    nodes.push(token);\n                }\n                // replace current node\n                blockTokens[j].children = tokens = (0, $acb166200129f66e$export$f78478f71955b6bc)(tokens, i, nodes);\n            }\n        }\n    }\n}\n\n\n// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\nconst $71faf318b045012d$var$RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst $71faf318b045012d$var$SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\nconst $71faf318b045012d$var$SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nconst $71faf318b045012d$var$SCOPED_ABBR = {\n    c: \"\\xa9\",\n    r: \"\\xae\",\n    tm: \"\\u2122\"\n};\nfunction $71faf318b045012d$var$replaceFn(match, name) {\n    return $71faf318b045012d$var$SCOPED_ABBR[name.toLowerCase()];\n}\nfunction $71faf318b045012d$var$replace_scoped(inlineTokens) {\n    let inside_autolink = 0;\n    for(let i = inlineTokens.length - 1; i >= 0; i--){\n        const token = inlineTokens[i];\n        if (token.type === 'text' && !inside_autolink) token.content = token.content.replace($71faf318b045012d$var$SCOPED_ABBR_RE, $71faf318b045012d$var$replaceFn);\n        if (token.type === 'link_open' && token.info === 'auto') inside_autolink--;\n        if (token.type === 'link_close' && token.info === 'auto') inside_autolink++;\n    }\n}\nfunction $71faf318b045012d$var$replace_rare(inlineTokens) {\n    let inside_autolink = 0;\n    for(let i = inlineTokens.length - 1; i >= 0; i--){\n        const token = inlineTokens[i];\n        if (token.type === 'text' && !inside_autolink) {\n            if ($71faf318b045012d$var$RARE_RE.test(token.content)) token.content = token.content.replace(/\\+-/g, \"\\xb1\")// .., ..., ....... -> …\n            // but ?..... & !..... -> ?.. & !..\n            .replace(/\\.{2,}/g, \"\\u2026\").replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')// em-dash\n            .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')// en-dash\n            .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013').replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n        }\n        if (token.type === 'link_open' && token.info === 'auto') inside_autolink--;\n        if (token.type === 'link_close' && token.info === 'auto') inside_autolink++;\n    }\n}\nfunction $71faf318b045012d$export$2e2bcd8739ae039(state) {\n    let blkIdx;\n    if (!state.md.options.typographer) return;\n    for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n        if (state.tokens[blkIdx].type !== 'inline') continue;\n        if ($71faf318b045012d$var$SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) $71faf318b045012d$var$replace_scoped(state.tokens[blkIdx].children);\n        if ($71faf318b045012d$var$RARE_RE.test(state.tokens[blkIdx].content)) $71faf318b045012d$var$replace_rare(state.tokens[blkIdx].children);\n    }\n}\n\n\n// Convert straight quotation marks to typographic ones\n//\n\nconst $18c84f826c38cf40$var$QUOTE_TEST_RE = /['\"]/;\nconst $18c84f826c38cf40$var$QUOTE_RE = /['\"]/g;\nconst $18c84f826c38cf40$var$APOSTROPHE = '\\u2019' /* ’ */ ;\nfunction $18c84f826c38cf40$var$replaceAt(str, index, ch) {\n    return str.slice(0, index) + ch + str.slice(index + 1);\n}\nfunction $18c84f826c38cf40$var$process_inlines(tokens, state) {\n    let j;\n    const stack = [];\n    for(let i = 0; i < tokens.length; i++){\n        const token = tokens[i];\n        const thisLevel = tokens[i].level;\n        for(j = stack.length - 1; j >= 0; j--){\n            if (stack[j].level <= thisLevel) break;\n        }\n        stack.length = j + 1;\n        if (token.type !== 'text') continue;\n        let text = token.content;\n        let pos = 0;\n        let max = text.length;\n        /* eslint no-labels:0,block-scoped-var:0 */ OUTER: while(pos < max){\n            $18c84f826c38cf40$var$QUOTE_RE.lastIndex = pos;\n            const t = $18c84f826c38cf40$var$QUOTE_RE.exec(text);\n            if (!t) break;\n            let canOpen = true;\n            let canClose = true;\n            pos = t.index + 1;\n            const isSingle = t[0] === \"'\";\n            // Find previous character,\n            // default to space if it's the beginning of the line\n            //\n            let lastChar = 0x20;\n            if (t.index - 1 >= 0) lastChar = text.charCodeAt(t.index - 1);\n            else for(j = i - 1; j >= 0; j--){\n                if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n                if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n                lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n                break;\n            }\n            // Find next character,\n            // default to space if it's the end of the line\n            //\n            let nextChar = 0x20;\n            if (pos < max) nextChar = text.charCodeAt(pos);\n            else for(j = i + 1; j < tokens.length; j++){\n                if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n                if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n                nextChar = tokens[j].content.charCodeAt(0);\n                break;\n            }\n            const isLastPunctChar = (0, $acb166200129f66e$export$829a0d33ae4e744)(lastChar) || (0, $acb166200129f66e$export$4888a643af800fc1)(String.fromCharCode(lastChar));\n            const isNextPunctChar = (0, $acb166200129f66e$export$829a0d33ae4e744)(nextChar) || (0, $acb166200129f66e$export$4888a643af800fc1)(String.fromCharCode(nextChar));\n            const isLastWhiteSpace = (0, $acb166200129f66e$export$3c52dd84024ae72c)(lastChar);\n            const isNextWhiteSpace = (0, $acb166200129f66e$export$3c52dd84024ae72c)(nextChar);\n            if (isNextWhiteSpace) canOpen = false;\n            else if (isNextPunctChar) {\n                if (!(isLastWhiteSpace || isLastPunctChar)) canOpen = false;\n            }\n            if (isLastWhiteSpace) canClose = false;\n            else if (isLastPunctChar) {\n                if (!(isNextWhiteSpace || isNextPunctChar)) canClose = false;\n            }\n            if (nextChar === 0x22 /* \" */  && t[0] === '\"') {\n                if (lastChar >= 0x30 /* 0 */  && lastChar <= 0x39 /* 9 */ ) // special case: 1\"\" - count first quote as an inch\n                canClose = canOpen = false;\n            }\n            if (canOpen && canClose) {\n                // Replace quotes in the middle of punctuation sequence, but not\n                // in the middle of the words, i.e.:\n                //\n                // 1. foo \" bar \" baz - not replaced\n                // 2. foo-\"-bar-\"-baz - replaced\n                // 3. foo\"bar\"baz     - not replaced\n                //\n                canOpen = isLastPunctChar;\n                canClose = isNextPunctChar;\n            }\n            if (!canOpen && !canClose) {\n                // middle of word\n                if (isSingle) token.content = $18c84f826c38cf40$var$replaceAt(token.content, t.index, $18c84f826c38cf40$var$APOSTROPHE);\n                continue;\n            }\n            if (canClose) // this could be a closing quote, rewind the stack to get a match\n            for(j = stack.length - 1; j >= 0; j--){\n                let item = stack[j];\n                if (stack[j].level < thisLevel) break;\n                if (item.single === isSingle && stack[j].level === thisLevel) {\n                    item = stack[j];\n                    let openQuote;\n                    let closeQuote;\n                    if (isSingle) {\n                        openQuote = state.md.options.quotes[2];\n                        closeQuote = state.md.options.quotes[3];\n                    } else {\n                        openQuote = state.md.options.quotes[0];\n                        closeQuote = state.md.options.quotes[1];\n                    }\n                    // replace token.content *before* tokens[item.token].content,\n                    // because, if they are pointing at the same token, replaceAt\n                    // could mess up indices when quote length != 1\n                    token.content = $18c84f826c38cf40$var$replaceAt(token.content, t.index, closeQuote);\n                    tokens[item.token].content = $18c84f826c38cf40$var$replaceAt(tokens[item.token].content, item.pos, openQuote);\n                    pos += closeQuote.length - 1;\n                    if (item.token === i) pos += openQuote.length - 1;\n                    text = token.content;\n                    max = text.length;\n                    stack.length = j;\n                    continue OUTER;\n                }\n            }\n            if (canOpen) stack.push({\n                token: i,\n                pos: t.index,\n                single: isSingle,\n                level: thisLevel\n            });\n            else if (canClose && isSingle) token.content = $18c84f826c38cf40$var$replaceAt(token.content, t.index, $18c84f826c38cf40$var$APOSTROPHE);\n        }\n    }\n}\nfunction $18c84f826c38cf40$export$2e2bcd8739ae039(state) {\n    /* eslint max-depth:0 */ if (!state.md.options.typographer) return;\n    for(let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n        if (state.tokens[blkIdx].type !== 'inline' || !$18c84f826c38cf40$var$QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) continue;\n        $18c84f826c38cf40$var$process_inlines(state.tokens[blkIdx].children, state);\n    }\n}\n\n\n// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\nfunction $7a6cf0d0aa696419$export$2e2bcd8739ae039(state) {\n    let curr, last;\n    const blockTokens = state.tokens;\n    const l = blockTokens.length;\n    for(let j = 0; j < l; j++){\n        if (blockTokens[j].type !== 'inline') continue;\n        const tokens = blockTokens[j].children;\n        const max = tokens.length;\n        for(curr = 0; curr < max; curr++)if (tokens[curr].type === 'text_special') tokens[curr].type = 'text';\n        for(curr = last = 0; curr < max; curr++)if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n        else {\n            if (curr !== last) tokens[last] = tokens[curr];\n            last++;\n        }\n        if (curr !== last) tokens.length = last;\n    }\n}\n\n\nconst $1dbd8732bf2ea1e5$var$_rules = [\n    [\n        'normalize',\n        (0, $5203c6838a32c344$export$2e2bcd8739ae039)\n    ],\n    [\n        'block',\n        (0, $cd7698881deefc7d$export$2e2bcd8739ae039)\n    ],\n    [\n        'inline',\n        (0, $196eb58ba8a882c3$export$2e2bcd8739ae039)\n    ],\n    [\n        'linkify',\n        (0, $e017aabd93d74ca7$export$2e2bcd8739ae039)\n    ],\n    [\n        'replacements',\n        (0, $71faf318b045012d$export$2e2bcd8739ae039)\n    ],\n    [\n        'smartquotes',\n        (0, $18c84f826c38cf40$export$2e2bcd8739ae039)\n    ],\n    // `text_join` finds `text_special` tokens (for escape sequences)\n    // and joins them with the rest of the text\n    [\n        'text_join',\n        (0, $7a6cf0d0aa696419$export$2e2bcd8739ae039)\n    ]\n];\n/**\n * new Core()\n **/ function $1dbd8732bf2ea1e5$var$Core() {\n    /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/ this.ruler = new (0, $41ea3ea6c70806b8$export$2e2bcd8739ae039)();\n    for(let i = 0; i < $1dbd8732bf2ea1e5$var$_rules.length; i++)this.ruler.push($1dbd8732bf2ea1e5$var$_rules[i][0], $1dbd8732bf2ea1e5$var$_rules[i][1]);\n}\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/ $1dbd8732bf2ea1e5$var$Core.prototype.process = function(state) {\n    const rules = this.ruler.getRules('');\n    for(let i = 0, l = rules.length; i < l; i++)rules[i](state);\n};\n$1dbd8732bf2ea1e5$var$Core.prototype.State = (0, $8993a444d7ae3c83$export$2e2bcd8739ae039);\nvar $1dbd8732bf2ea1e5$export$2e2bcd8739ae039 = $1dbd8732bf2ea1e5$var$Core;\n\n\n/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/ \n// Parser state class\n\n\nfunction $ad2420667aa7c8e8$var$StateBlock(src, md, env, tokens) {\n    this.src = src;\n    // link to parser instance\n    this.md = md;\n    this.env = env;\n    //\n    // Internal state vartiables\n    //\n    this.tokens = tokens;\n    this.bMarks = [] // line begin offsets for fast jumps\n    ;\n    this.eMarks = [] // line end offsets for fast jumps\n    ;\n    this.tShift = [] // offsets of the first non-space characters (tabs not expanded)\n    ;\n    this.sCount = [] // indents for each line (tabs expanded)\n    ;\n    // An amount of virtual spaces (tabs expanded) between beginning\n    // of each line (bMarks) and real beginning of that line.\n    //\n    // It exists only as a hack because blockquotes override bMarks\n    // losing information in the process.\n    //\n    // It's used only when expanding tabs, you can think about it as\n    // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n    // means first tab should be expanded to 4-21%4 === 3 spaces.\n    //\n    this.bsCount = [];\n    // block parser variables\n    // required block content indent (for example, if we are\n    // inside a list, it would be positioned after list marker)\n    this.blkIndent = 0;\n    this.line = 0 // line index in src\n    ;\n    this.lineMax = 0 // lines count\n    ;\n    this.tight = false // loose/tight mode for lists\n    ;\n    this.ddIndent = -1 // indent of the current dd block (-1 if there isn't any)\n    ;\n    this.listIndent = -1 // indent of the current list block (-1 if there isn't any)\n    ;\n    // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n    // used in lists to determine if they interrupt a paragraph\n    this.parentType = 'root';\n    this.level = 0;\n    // Create caches\n    // Generate markers.\n    const s = this.src;\n    for(let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++){\n        const ch = s.charCodeAt(pos);\n        if (!indent_found) {\n            if ((0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) {\n                indent++;\n                if (ch === 0x09) offset += 4 - offset % 4;\n                else offset++;\n                continue;\n            } else indent_found = true;\n        }\n        if (ch === 0x0A || pos === len - 1) {\n            if (ch !== 0x0A) pos++;\n            this.bMarks.push(start);\n            this.eMarks.push(pos);\n            this.tShift.push(indent);\n            this.sCount.push(offset);\n            this.bsCount.push(0);\n            indent_found = false;\n            indent = 0;\n            offset = 0;\n            start = pos + 1;\n        }\n    }\n    // Push fake entry to simplify cache bounds checks\n    this.bMarks.push(s.length);\n    this.eMarks.push(s.length);\n    this.tShift.push(0);\n    this.sCount.push(0);\n    this.bsCount.push(0);\n    this.lineMax = this.bMarks.length - 1 // don't count last fake line\n    ;\n}\n// Push new token to \"stream\".\n//\n$ad2420667aa7c8e8$var$StateBlock.prototype.push = function(type, tag, nesting) {\n    const token = new (0, $59ac17e6d91b036a$export$2e2bcd8739ae039)(type, tag, nesting);\n    token.block = true;\n    if (nesting < 0) this.level-- // closing tag\n    ;\n    token.level = this.level;\n    if (nesting > 0) this.level++ // opening tag\n    ;\n    this.tokens.push(token);\n    return token;\n};\n$ad2420667aa7c8e8$var$StateBlock.prototype.isEmpty = function isEmpty(line) {\n    return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n$ad2420667aa7c8e8$var$StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n    for(let max = this.lineMax; from < max; from++){\n        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) break;\n    }\n    return from;\n};\n// Skip spaces from given position.\n$ad2420667aa7c8e8$var$StateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n    for(let max = this.src.length; pos < max; pos++){\n        const ch = this.src.charCodeAt(pos);\n        if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) break;\n    }\n    return pos;\n};\n// Skip spaces from given position in reverse.\n$ad2420667aa7c8e8$var$StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n    if (pos <= min) return pos;\n    while(pos > min){\n        if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(this.src.charCodeAt(--pos))) return pos + 1;\n    }\n    return pos;\n};\n// Skip char codes from given position\n$ad2420667aa7c8e8$var$StateBlock.prototype.skipChars = function skipChars(pos, code) {\n    for(let max = this.src.length; pos < max; pos++){\n        if (this.src.charCodeAt(pos) !== code) break;\n    }\n    return pos;\n};\n// Skip char codes reverse from given position - 1\n$ad2420667aa7c8e8$var$StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n    if (pos <= min) return pos;\n    while(pos > min){\n        if (code !== this.src.charCodeAt(--pos)) return pos + 1;\n    }\n    return pos;\n};\n// cut lines range from source.\n$ad2420667aa7c8e8$var$StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n    if (begin >= end) return '';\n    const queue = new Array(end - begin);\n    for(let i = 0, line = begin; line < end; line++, i++){\n        let lineIndent = 0;\n        const lineStart = this.bMarks[line];\n        let first = lineStart;\n        let last;\n        if (line + 1 < end || keepLastLF) // No need for bounds check because we have fake entry on tail.\n        last = this.eMarks[line] + 1;\n        else last = this.eMarks[line];\n        while(first < last && lineIndent < indent){\n            const ch = this.src.charCodeAt(first);\n            if ((0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) {\n                if (ch === 0x09) lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n                else lineIndent++;\n            } else if (first - lineStart < this.tShift[line]) // patched tShift masked characters to look like spaces (blockquotes, list markers)\n            lineIndent++;\n            else break;\n            first++;\n        }\n        if (lineIndent > indent) // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n        // with indent=2 becomes '  \\tfoobar'\n        queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n        else queue[i] = this.src.slice(first, last);\n    }\n    return queue.join('');\n};\n// re-export Token class to use in block rules\n$ad2420667aa7c8e8$var$StateBlock.prototype.Token = (0, $59ac17e6d91b036a$export$2e2bcd8739ae039);\nvar $ad2420667aa7c8e8$export$2e2bcd8739ae039 = $ad2420667aa7c8e8$var$StateBlock;\n\n\n// GFM table, https://github.github.com/gfm/#tables-extension-\n\n// Limit the amount of empty autocompleted cells in a table,\n// see https://github.com/markdown-it/markdown-it/issues/1000,\n//\n// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.\n// We set it to 65k, which can expand user input by a factor of x370\n// (256x256 square is 1.8kB expanded into 650kB).\nconst $2ef92aecf350006a$var$MAX_AUTOCOMPLETED_CELLS = 0x10000;\nfunction $2ef92aecf350006a$var$getLine(state, line) {\n    const pos = state.bMarks[line] + state.tShift[line];\n    const max = state.eMarks[line];\n    return state.src.slice(pos, max);\n}\nfunction $2ef92aecf350006a$var$escapedSplit(str) {\n    const result = [];\n    const max = str.length;\n    let pos = 0;\n    let ch = str.charCodeAt(pos);\n    let isEscaped = false;\n    let lastPos = 0;\n    let current = '';\n    while(pos < max){\n        if (ch === 0x7c /* | */ ) {\n            if (!isEscaped) {\n                // pipe separating cells, '|'\n                result.push(current + str.substring(lastPos, pos));\n                current = '';\n                lastPos = pos + 1;\n            } else {\n                // escaped pipe, '\\|'\n                current += str.substring(lastPos, pos - 1);\n                lastPos = pos;\n            }\n        }\n        isEscaped = ch === 0x5c /* \\ */ ;\n        pos++;\n        ch = str.charCodeAt(pos);\n    }\n    result.push(current + str.substring(lastPos));\n    return result;\n}\nfunction $2ef92aecf350006a$export$2e2bcd8739ae039(state, startLine, endLine, silent) {\n    // should have at least two lines\n    if (startLine + 2 > endLine) return false;\n    let nextLine = startLine + 1;\n    if (state.sCount[nextLine] < state.blkIndent) return false;\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) return false;\n    // first character of the second line should be '|', '-', ':',\n    // and no other characters are allowed but spaces;\n    // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n    let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    if (pos >= state.eMarks[nextLine]) return false;\n    const firstCh = state.src.charCodeAt(pos++);\n    if (firstCh !== 0x7C /* | */  && firstCh !== 0x2D /* - */  && firstCh !== 0x3A /* : */ ) return false;\n    if (pos >= state.eMarks[nextLine]) return false;\n    const secondCh = state.src.charCodeAt(pos++);\n    if (secondCh !== 0x7C /* | */  && secondCh !== 0x2D /* - */  && secondCh !== 0x3A /* : */  && !(0, $acb166200129f66e$export$1d5ccafae59b4926)(secondCh)) return false;\n    // if first character is '-', then second character must not be a space\n    // (due to parsing ambiguity with list)\n    if (firstCh === 0x2D /* - */  && (0, $acb166200129f66e$export$1d5ccafae59b4926)(secondCh)) return false;\n    while(pos < state.eMarks[nextLine]){\n        const ch = state.src.charCodeAt(pos);\n        if (ch !== 0x7C /* | */  && ch !== 0x2D /* - */  && ch !== 0x3A /* : */  && !(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) return false;\n        pos++;\n    }\n    let lineText = $2ef92aecf350006a$var$getLine(state, startLine + 1);\n    let columns = lineText.split('|');\n    const aligns = [];\n    for(let i = 0; i < columns.length; i++){\n        const t = columns[i].trim();\n        if (!t) {\n            // allow empty columns before and after table, but not in between columns;\n            // e.g. allow ` |---| `, disallow ` ---||--- `\n            if (i === 0 || i === columns.length - 1) continue;\n            else return false;\n        }\n        if (!/^:?-+:?$/.test(t)) return false;\n        if (t.charCodeAt(t.length - 1) === 0x3A /* : */ ) aligns.push(t.charCodeAt(0) === 0x3A /* : */  ? 'center' : 'right');\n        else if (t.charCodeAt(0) === 0x3A /* : */ ) aligns.push('left');\n        else aligns.push('');\n    }\n    lineText = $2ef92aecf350006a$var$getLine(state, startLine).trim();\n    if (lineText.indexOf('|') === -1) return false;\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    columns = $2ef92aecf350006a$var$escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n    // header row will define an amount of columns in the entire table,\n    // and align row should be exactly the same (the rest of the rows can differ)\n    const columnCount = columns.length;\n    if (columnCount === 0 || columnCount !== aligns.length) return false;\n    if (silent) return true;\n    const oldParentType = state.parentType;\n    state.parentType = 'table';\n    // use 'blockquote' lists for termination because it's\n    // the most similar to tables\n    const terminatorRules = state.md.block.ruler.getRules('blockquote');\n    const token_to = state.push('table_open', 'table', 1);\n    const tableLines = [\n        startLine,\n        0\n    ];\n    token_to.map = tableLines;\n    const token_tho = state.push('thead_open', 'thead', 1);\n    token_tho.map = [\n        startLine,\n        startLine + 1\n    ];\n    const token_htro = state.push('tr_open', 'tr', 1);\n    token_htro.map = [\n        startLine,\n        startLine + 1\n    ];\n    for(let i = 0; i < columns.length; i++){\n        const token_ho = state.push('th_open', 'th', 1);\n        if (aligns[i]) token_ho.attrs = [\n            [\n                'style',\n                'text-align:' + aligns[i]\n            ]\n        ];\n        const token_il = state.push('inline', '', 0);\n        token_il.content = columns[i].trim();\n        token_il.children = [];\n        state.push('th_close', 'th', -1);\n    }\n    state.push('tr_close', 'tr', -1);\n    state.push('thead_close', 'thead', -1);\n    let tbodyLines;\n    let autocompletedCells = 0;\n    for(nextLine = startLine + 2; nextLine < endLine; nextLine++){\n        if (state.sCount[nextLine] < state.blkIndent) break;\n        let terminate = false;\n        for(let i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n        }\n        if (terminate) break;\n        lineText = $2ef92aecf350006a$var$getLine(state, nextLine).trim();\n        if (!lineText) break;\n        if (state.sCount[nextLine] - state.blkIndent >= 4) break;\n        columns = $2ef92aecf350006a$var$escapedSplit(lineText);\n        if (columns.length && columns[0] === '') columns.shift();\n        if (columns.length && columns[columns.length - 1] === '') columns.pop();\n        // note: autocomplete count can be negative if user specifies more columns than header,\n        // but that does not affect intended use (which is limiting expansion)\n        autocompletedCells += columnCount - columns.length;\n        if (autocompletedCells > $2ef92aecf350006a$var$MAX_AUTOCOMPLETED_CELLS) break;\n        if (nextLine === startLine + 2) {\n            const token_tbo = state.push('tbody_open', 'tbody', 1);\n            token_tbo.map = tbodyLines = [\n                startLine + 2,\n                0\n            ];\n        }\n        const token_tro = state.push('tr_open', 'tr', 1);\n        token_tro.map = [\n            nextLine,\n            nextLine + 1\n        ];\n        for(let i = 0; i < columnCount; i++){\n            const token_tdo = state.push('td_open', 'td', 1);\n            if (aligns[i]) token_tdo.attrs = [\n                [\n                    'style',\n                    'text-align:' + aligns[i]\n                ]\n            ];\n            const token_il = state.push('inline', '', 0);\n            token_il.content = columns[i] ? columns[i].trim() : '';\n            token_il.children = [];\n            state.push('td_close', 'td', -1);\n        }\n        state.push('tr_close', 'tr', -1);\n    }\n    if (tbodyLines) {\n        state.push('tbody_close', 'tbody', -1);\n        tbodyLines[1] = nextLine;\n    }\n    state.push('table_close', 'table', -1);\n    tableLines[1] = nextLine;\n    state.parentType = oldParentType;\n    state.line = nextLine;\n    return true;\n}\n\n\n// Code block (4 spaces padded)\nfunction $319716b5135e5657$export$2e2bcd8739ae039(state, startLine, endLine /*, silent */ ) {\n    if (state.sCount[startLine] - state.blkIndent < 4) return false;\n    let nextLine = startLine + 1;\n    let last = nextLine;\n    while(nextLine < endLine){\n        if (state.isEmpty(nextLine)) {\n            nextLine++;\n            continue;\n        }\n        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n            nextLine++;\n            last = nextLine;\n            continue;\n        }\n        break;\n    }\n    state.line = last;\n    const token = state.push('code_block', 'code', 0);\n    token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n    token.map = [\n        startLine,\n        state.line\n    ];\n    return true;\n}\n\n\n// fences (``` lang, ~~~ lang)\nfunction $96fff8032daf3c7b$export$2e2bcd8739ae039(state, startLine, endLine, silent) {\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    let max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    if (pos + 3 > max) return false;\n    const marker = state.src.charCodeAt(pos);\n    if (marker !== 0x7E /* ~ */  && marker !== 0x60 /* ` */ ) return false;\n    // scan marker length\n    let mem = pos;\n    pos = state.skipChars(pos, marker);\n    let len = pos - mem;\n    if (len < 3) return false;\n    const markup = state.src.slice(mem, pos);\n    const params = state.src.slice(pos, max);\n    if (marker === 0x60 /* ` */ ) {\n        if (params.indexOf(String.fromCharCode(marker)) >= 0) return false;\n    }\n    // Since start is found, we can report success here in validation mode\n    if (silent) return true;\n    // search end of block\n    let nextLine = startLine;\n    let haveEndMarker = false;\n    for(;;){\n        nextLine++;\n        if (nextLine >= endLine) break;\n        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n        max = state.eMarks[nextLine];\n        if (pos < max && state.sCount[nextLine] < state.blkIndent) break;\n        if (state.src.charCodeAt(pos) !== marker) continue;\n        if (state.sCount[nextLine] - state.blkIndent >= 4) continue;\n        pos = state.skipChars(pos, marker);\n        // closing code fence must be at least as long as the opening one\n        if (pos - mem < len) continue;\n        // make sure tail has spaces only\n        pos = state.skipSpaces(pos);\n        if (pos < max) continue;\n        haveEndMarker = true;\n        break;\n    }\n    // If a fence has heading spaces, they should be removed from its inner block\n    len = state.sCount[startLine];\n    state.line = nextLine + (haveEndMarker ? 1 : 0);\n    const token = state.push('fence', 'code', 0);\n    token.info = params;\n    token.content = state.getLines(startLine + 1, nextLine, len, true);\n    token.markup = markup;\n    token.map = [\n        startLine,\n        state.line\n    ];\n    return true;\n}\n\n\n// Block quotes\n\nfunction $56f381d401e94dfa$export$2e2bcd8739ae039(state, startLine, endLine, silent) {\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    let max = state.eMarks[startLine];\n    const oldLineMax = state.lineMax;\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    // check the block quote marker\n    if (state.src.charCodeAt(pos) !== 0x3E /* > */ ) return false;\n    // we know that it's going to be a valid blockquote,\n    // so no point trying to find the end of it in silent mode\n    if (silent) return true;\n    const oldBMarks = [];\n    const oldBSCount = [];\n    const oldSCount = [];\n    const oldTShift = [];\n    const terminatorRules = state.md.block.ruler.getRules('blockquote');\n    const oldParentType = state.parentType;\n    state.parentType = 'blockquote';\n    let lastLineEmpty = false;\n    let nextLine;\n    // Search the end of the block\n    //\n    // Block ends with either:\n    //  1. an empty line outside:\n    //     ```\n    //     > test\n    //\n    //     ```\n    //  2. an empty line inside:\n    //     ```\n    //     >\n    //     test\n    //     ```\n    //  3. another tag:\n    //     ```\n    //     > test\n    //      - - -\n    //     ```\n    for(nextLine = startLine; nextLine < endLine; nextLine++){\n        // check if it's outdented, i.e. it's inside list item and indented\n        // less than said list item:\n        //\n        // ```\n        // 1. anything\n        //    > current blockquote\n        // 2. checking this line\n        // ```\n        const isOutdented = state.sCount[nextLine] < state.blkIndent;\n        pos = state.bMarks[nextLine] + state.tShift[nextLine];\n        max = state.eMarks[nextLine];\n        if (pos >= max) break;\n        if (state.src.charCodeAt(pos++) === 0x3E /* > */  && !isOutdented) {\n            // This line is inside the blockquote.\n            // set offset past spaces and \">\"\n            let initial = state.sCount[nextLine] + 1;\n            let spaceAfterMarker;\n            let adjustTab;\n            // skip one optional space after '>'\n            if (state.src.charCodeAt(pos) === 0x20 /* space */ ) {\n                // ' >   test '\n                //     ^ -- position start of line here:\n                pos++;\n                initial++;\n                adjustTab = false;\n                spaceAfterMarker = true;\n            } else if (state.src.charCodeAt(pos) === 0x09 /* tab */ ) {\n                spaceAfterMarker = true;\n                if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n                    // '  >\\t  test '\n                    //       ^ -- position start of line here (tab has width===1)\n                    pos++;\n                    initial++;\n                    adjustTab = false;\n                } else // ' >\\t  test '\n                //    ^ -- position start of line here + shift bsCount slightly\n                //         to make extra space appear\n                adjustTab = true;\n            } else spaceAfterMarker = false;\n            let offset = initial;\n            oldBMarks.push(state.bMarks[nextLine]);\n            state.bMarks[nextLine] = pos;\n            while(pos < max){\n                const ch = state.src.charCodeAt(pos);\n                if ((0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) {\n                    if (ch === 0x09) offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n                    else offset++;\n                } else break;\n                pos++;\n            }\n            lastLineEmpty = pos >= max;\n            oldBSCount.push(state.bsCount[nextLine]);\n            state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n            oldSCount.push(state.sCount[nextLine]);\n            state.sCount[nextLine] = offset - initial;\n            oldTShift.push(state.tShift[nextLine]);\n            state.tShift[nextLine] = pos - state.bMarks[nextLine];\n            continue;\n        }\n        // Case 2: line is not inside the blockquote, and the last line was empty.\n        if (lastLineEmpty) break;\n        // Case 3: another tag found.\n        let terminate = false;\n        for(let i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n        }\n        if (terminate) {\n            // Quirk to enforce \"hard termination mode\" for paragraphs;\n            // normally if you call `tokenize(state, startLine, nextLine)`,\n            // paragraphs will look below nextLine for paragraph continuation,\n            // but if blockquote is terminated by another tag, they shouldn't\n            state.lineMax = nextLine;\n            if (state.blkIndent !== 0) {\n                // state.blkIndent was non-zero, we now set it to zero,\n                // so we need to re-calculate all offsets to appear as\n                // if indent wasn't changed\n                oldBMarks.push(state.bMarks[nextLine]);\n                oldBSCount.push(state.bsCount[nextLine]);\n                oldTShift.push(state.tShift[nextLine]);\n                oldSCount.push(state.sCount[nextLine]);\n                state.sCount[nextLine] -= state.blkIndent;\n            }\n            break;\n        }\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        // A negative indentation means that this is a paragraph continuation\n        //\n        state.sCount[nextLine] = -1;\n    }\n    const oldIndent = state.blkIndent;\n    state.blkIndent = 0;\n    const token_o = state.push('blockquote_open', 'blockquote', 1);\n    token_o.markup = '>';\n    const lines = [\n        startLine,\n        0\n    ];\n    token_o.map = lines;\n    state.md.block.tokenize(state, startLine, nextLine);\n    const token_c = state.push('blockquote_close', 'blockquote', -1);\n    token_c.markup = '>';\n    state.lineMax = oldLineMax;\n    state.parentType = oldParentType;\n    lines[1] = state.line;\n    // Restore original tShift; this might not be necessary since the parser\n    // has already been here, but just to make sure we can do that.\n    for(let i = 0; i < oldTShift.length; i++){\n        state.bMarks[i + startLine] = oldBMarks[i];\n        state.tShift[i + startLine] = oldTShift[i];\n        state.sCount[i + startLine] = oldSCount[i];\n        state.bsCount[i + startLine] = oldBSCount[i];\n    }\n    state.blkIndent = oldIndent;\n    return true;\n}\n\n\n// Horizontal rule\n\nfunction $bd654477b14b4267$export$2e2bcd8739ae039(state, startLine, endLine, silent) {\n    const max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    const marker = state.src.charCodeAt(pos++);\n    // Check hr marker\n    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x5F /* _ */ ) return false;\n    // markers can be mixed with spaces, but there should be at least 3 of them\n    let cnt = 1;\n    while(pos < max){\n        const ch = state.src.charCodeAt(pos++);\n        if (ch !== marker && !(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) return false;\n        if (ch === marker) cnt++;\n    }\n    if (cnt < 3) return false;\n    if (silent) return true;\n    state.line = startLine + 1;\n    const token = state.push('hr', 'hr', 0);\n    token.map = [\n        startLine,\n        state.line\n    ];\n    token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n    return true;\n}\n\n\n// Lists\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction $3b7cbf7838646e8a$var$skipBulletListMarker(state, startLine) {\n    const max = state.eMarks[startLine];\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    const marker = state.src.charCodeAt(pos++);\n    // Check bullet\n    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x2B /* + */ ) return -1;\n    if (pos < max) {\n        const ch = state.src.charCodeAt(pos);\n        if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) // \" -test \" - is not a list item\n        return -1;\n    }\n    return pos;\n}\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction $3b7cbf7838646e8a$var$skipOrderedListMarker(state, startLine) {\n    const start = state.bMarks[startLine] + state.tShift[startLine];\n    const max = state.eMarks[startLine];\n    let pos = start;\n    // List marker should have at least 2 chars (digit + dot)\n    if (pos + 1 >= max) return -1;\n    let ch = state.src.charCodeAt(pos++);\n    if (ch < 0x30 /* 0 */  || ch > 0x39 /* 9 */ ) return -1;\n    for(;;){\n        // EOL -> fail\n        if (pos >= max) return -1;\n        ch = state.src.charCodeAt(pos++);\n        if (ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ) {\n            // List marker should have no more than 9 digits\n            // (prevents integer overflow in browsers)\n            if (pos - start >= 10) return -1;\n            continue;\n        }\n        // found valid marker\n        if (ch === 0x29 /* ) */  || ch === 0x2e /* . */ ) break;\n        return -1;\n    }\n    if (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) // \" 1.test \" - is not a list item\n        return -1;\n    }\n    return pos;\n}\nfunction $3b7cbf7838646e8a$var$markTightParagraphs(state, idx) {\n    const level = state.level + 2;\n    for(let i = idx + 2, l = state.tokens.length - 2; i < l; i++)if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n        state.tokens[i + 2].hidden = true;\n        state.tokens[i].hidden = true;\n        i += 2;\n    }\n}\nfunction $3b7cbf7838646e8a$export$2e2bcd8739ae039(state, startLine, endLine, silent) {\n    let max, pos, start, token;\n    let nextLine = startLine;\n    let tight = true;\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) return false;\n    // Special case:\n    //  - item 1\n    //   - item 2\n    //    - item 3\n    //     - item 4\n    //      - this one is a paragraph continuation\n    if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) return false;\n    let isTerminatingParagraph = false;\n    // limit conditions when list can interrupt\n    // a paragraph (validation mode only)\n    if (silent && state.parentType === 'paragraph') // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    {\n        if (state.sCount[nextLine] >= state.blkIndent) isTerminatingParagraph = true;\n    }\n    // Detect list type and position after marker\n    let isOrdered;\n    let markerValue;\n    let posAfterMarker;\n    if ((posAfterMarker = $3b7cbf7838646e8a$var$skipOrderedListMarker(state, nextLine)) >= 0) {\n        isOrdered = true;\n        start = state.bMarks[nextLine] + state.tShift[nextLine];\n        markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n        // If we're starting a new ordered list right after\n        // a paragraph, it should start with 1.\n        if (isTerminatingParagraph && markerValue !== 1) return false;\n    } else if ((posAfterMarker = $3b7cbf7838646e8a$var$skipBulletListMarker(state, nextLine)) >= 0) isOrdered = false;\n    else return false;\n    // If we're starting a new unordered list right after\n    // a paragraph, first line should not be empty.\n    if (isTerminatingParagraph) {\n        if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;\n    }\n    // For validation mode we can terminate immediately\n    if (silent) return true;\n    // We should terminate list on style change. Remember first one to compare.\n    const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n    // Start list\n    const listTokIdx = state.tokens.length;\n    if (isOrdered) {\n        token = state.push('ordered_list_open', 'ol', 1);\n        if (markerValue !== 1) token.attrs = [\n            [\n                'start',\n                markerValue\n            ]\n        ];\n    } else token = state.push('bullet_list_open', 'ul', 1);\n    const listLines = [\n        nextLine,\n        0\n    ];\n    token.map = listLines;\n    token.markup = String.fromCharCode(markerCharCode);\n    //\n    // Iterate list items\n    //\n    let prevEmptyEnd = false;\n    const terminatorRules = state.md.block.ruler.getRules('list');\n    const oldParentType = state.parentType;\n    state.parentType = 'list';\n    while(nextLine < endLine){\n        pos = posAfterMarker;\n        max = state.eMarks[nextLine];\n        const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);\n        let offset = initial;\n        while(pos < max){\n            const ch = state.src.charCodeAt(pos);\n            if (ch === 0x09) offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n            else if (ch === 0x20) offset++;\n            else break;\n            pos++;\n        }\n        const contentStart = pos;\n        let indentAfterMarker;\n        if (contentStart >= max) // trimming space in \"-    \\n  3\" case, indent is 1 here\n        indentAfterMarker = 1;\n        else indentAfterMarker = offset - initial;\n        // If we have more than 4 spaces, the indent is 1\n        // (the rest is just indented code block)\n        if (indentAfterMarker > 4) indentAfterMarker = 1;\n        // \"  -  test\"\n        //  ^^^^^ - calculating total length of this thing\n        const indent = initial + indentAfterMarker;\n        // Run subparser & write tokens\n        token = state.push('list_item_open', 'li', 1);\n        token.markup = String.fromCharCode(markerCharCode);\n        const itemLines = [\n            nextLine,\n            0\n        ];\n        token.map = itemLines;\n        if (isOrdered) token.info = state.src.slice(start, posAfterMarker - 1);\n        // change current state, then restore it after parser subcall\n        const oldTight = state.tight;\n        const oldTShift = state.tShift[nextLine];\n        const oldSCount = state.sCount[nextLine];\n        //  - example list\n        // ^ listIndent position will be here\n        //   ^ blkIndent position will be here\n        //\n        const oldListIndent = state.listIndent;\n        state.listIndent = state.blkIndent;\n        state.blkIndent = indent;\n        state.tight = true;\n        state.tShift[nextLine] = contentStart - state.bMarks[nextLine];\n        state.sCount[nextLine] = offset;\n        if (contentStart >= max && state.isEmpty(nextLine + 1)) // workaround for this case\n        // (list item is empty, list terminates before \"foo\"):\n        // ~~~~~~~~\n        //   -\n        //\n        //     foo\n        // ~~~~~~~~\n        state.line = Math.min(state.line + 2, endLine);\n        else state.md.block.tokenize(state, nextLine, endLine, true);\n        // If any of list item is tight, mark list as tight\n        if (!state.tight || prevEmptyEnd) tight = false;\n        // Item become loose if finish with empty line,\n        // but we should filter last element, because it means list finish\n        prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);\n        state.blkIndent = state.listIndent;\n        state.listIndent = oldListIndent;\n        state.tShift[nextLine] = oldTShift;\n        state.sCount[nextLine] = oldSCount;\n        state.tight = oldTight;\n        token = state.push('list_item_close', 'li', -1);\n        token.markup = String.fromCharCode(markerCharCode);\n        nextLine = state.line;\n        itemLines[1] = nextLine;\n        if (nextLine >= endLine) break;\n        //\n        // Try to check if list is terminated or continued.\n        //\n        if (state.sCount[nextLine] < state.blkIndent) break;\n        // if it's indented more than 3 spaces, it should be a code block\n        if (state.sCount[nextLine] - state.blkIndent >= 4) break;\n        // fail if terminating block found\n        let terminate = false;\n        for(let i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n        }\n        if (terminate) break;\n        // fail if list has another type\n        if (isOrdered) {\n            posAfterMarker = $3b7cbf7838646e8a$var$skipOrderedListMarker(state, nextLine);\n            if (posAfterMarker < 0) break;\n            start = state.bMarks[nextLine] + state.tShift[nextLine];\n        } else {\n            posAfterMarker = $3b7cbf7838646e8a$var$skipBulletListMarker(state, nextLine);\n            if (posAfterMarker < 0) break;\n        }\n        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) break;\n    }\n    // Finalize list\n    if (isOrdered) token = state.push('ordered_list_close', 'ol', -1);\n    else token = state.push('bullet_list_close', 'ul', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n    listLines[1] = nextLine;\n    state.line = nextLine;\n    state.parentType = oldParentType;\n    // mark paragraphs tight if needed\n    if (tight) $3b7cbf7838646e8a$var$markTightParagraphs(state, listTokIdx);\n    return true;\n}\n\n\n\nfunction $dc5cd5db6853c1d8$export$2e2bcd8739ae039(state, startLine, _endLine, silent) {\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    let max = state.eMarks[startLine];\n    let nextLine = startLine + 1;\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    if (state.src.charCodeAt(pos) !== 0x5B /* [ */ ) return false;\n    function getNextLine(nextLine) {\n        const endLine = state.lineMax;\n        if (nextLine >= endLine || state.isEmpty(nextLine)) // empty line or end of input\n        return null;\n        let isContinuation = false;\n        // this would be a code block normally, but after paragraph\n        // it's considered a lazy continuation regardless of what's there\n        if (state.sCount[nextLine] - state.blkIndent > 3) isContinuation = true;\n        // quirk for blockquotes, this line should already be checked by that rule\n        if (state.sCount[nextLine] < 0) isContinuation = true;\n        if (!isContinuation) {\n            const terminatorRules = state.md.block.ruler.getRules('reference');\n            const oldParentType = state.parentType;\n            state.parentType = 'reference';\n            // Some tags can terminate paragraph without empty line.\n            let terminate = false;\n            for(let i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {\n                terminate = true;\n                break;\n            }\n            state.parentType = oldParentType;\n            if (terminate) // terminated by another block\n            return null;\n        }\n        const pos = state.bMarks[nextLine] + state.tShift[nextLine];\n        const max = state.eMarks[nextLine];\n        // max + 1 explicitly includes the newline\n        return state.src.slice(pos, max + 1);\n    }\n    let str = state.src.slice(pos, max + 1);\n    max = str.length;\n    let labelEnd = -1;\n    for(pos = 1; pos < max; pos++){\n        const ch = str.charCodeAt(pos);\n        if (ch === 0x5B /* [ */ ) return false;\n        else if (ch === 0x5D /* ] */ ) {\n            labelEnd = pos;\n            break;\n        } else if (ch === 0x0A /* \\n */ ) {\n            const lineContent = getNextLine(nextLine);\n            if (lineContent !== null) {\n                str += lineContent;\n                max = str.length;\n                nextLine++;\n            }\n        } else if (ch === 0x5C /* \\ */ ) {\n            pos++;\n            if (pos < max && str.charCodeAt(pos) === 0x0A) {\n                const lineContent = getNextLine(nextLine);\n                if (lineContent !== null) {\n                    str += lineContent;\n                    max = str.length;\n                    nextLine++;\n                }\n            }\n        }\n    }\n    if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */ ) return false;\n    // [label]:   destination   'title'\n    //         ^^^ skip optional whitespace here\n    for(pos = labelEnd + 2; pos < max; pos++){\n        const ch = str.charCodeAt(pos);\n        if (ch === 0x0A) {\n            const lineContent = getNextLine(nextLine);\n            if (lineContent !== null) {\n                str += lineContent;\n                max = str.length;\n                nextLine++;\n            }\n        } else if ((0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) ;\n        else break;\n    }\n    // [label]:   destination   'title'\n    //            ^^^^^^^^^^^ parse this\n    const destRes = state.md.helpers.parseLinkDestination(str, pos, max);\n    if (!destRes.ok) return false;\n    const href = state.md.normalizeLink(destRes.str);\n    if (!state.md.validateLink(href)) return false;\n    pos = destRes.pos;\n    // save cursor state, we could require to rollback later\n    const destEndPos = pos;\n    const destEndLineNo = nextLine;\n    // [label]:   destination   'title'\n    //                       ^^^ skipping those spaces\n    const start = pos;\n    for(; pos < max; pos++){\n        const ch = str.charCodeAt(pos);\n        if (ch === 0x0A) {\n            const lineContent = getNextLine(nextLine);\n            if (lineContent !== null) {\n                str += lineContent;\n                max = str.length;\n                nextLine++;\n            }\n        } else if ((0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) ;\n        else break;\n    }\n    // [label]:   destination   'title'\n    //                          ^^^^^^^ parse this\n    let titleRes = state.md.helpers.parseLinkTitle(str, pos, max);\n    while(titleRes.can_continue){\n        const lineContent = getNextLine(nextLine);\n        if (lineContent === null) break;\n        str += lineContent;\n        pos = max;\n        max = str.length;\n        nextLine++;\n        titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes);\n    }\n    let title;\n    if (pos < max && start !== pos && titleRes.ok) {\n        title = titleRes.str;\n        pos = titleRes.pos;\n    } else {\n        title = '';\n        pos = destEndPos;\n        nextLine = destEndLineNo;\n    }\n    // skip trailing spaces until the rest of the line\n    while(pos < max){\n        const ch = str.charCodeAt(pos);\n        if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) break;\n        pos++;\n    }\n    if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n        if (title) {\n            // garbage at the end of the line after title,\n            // but it could still be a valid reference if we roll back\n            title = '';\n            pos = destEndPos;\n            nextLine = destEndLineNo;\n            while(pos < max){\n                const ch = str.charCodeAt(pos);\n                if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) break;\n                pos++;\n            }\n        }\n    }\n    if (pos < max && str.charCodeAt(pos) !== 0x0A) // garbage at the end of the line\n    return false;\n    const label = (0, $acb166200129f66e$export$20ef46802c8744b)(str.slice(1, labelEnd));\n    if (!label) // CommonMark 0.20 disallows empty labels\n    return false;\n    // Reference can not terminate anything. This check is for safety only.\n    /* istanbul ignore if */ if (silent) return true;\n    if (typeof state.env.references === 'undefined') state.env.references = {};\n    if (typeof state.env.references[label] === 'undefined') state.env.references[label] = {\n        title: title,\n        href: href\n    };\n    state.line = nextLine;\n    return true;\n}\n\n\n// HTML block\n// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\nvar $8955e68447e3f9db$export$2e2bcd8739ae039 = [\n    'address',\n    'article',\n    'aside',\n    'base',\n    'basefont',\n    'blockquote',\n    'body',\n    'caption',\n    'center',\n    'col',\n    'colgroup',\n    'dd',\n    'details',\n    'dialog',\n    'dir',\n    'div',\n    'dl',\n    'dt',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'footer',\n    'form',\n    'frame',\n    'frameset',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'head',\n    'header',\n    'hr',\n    'html',\n    'iframe',\n    'legend',\n    'li',\n    'link',\n    'main',\n    'menu',\n    'menuitem',\n    'nav',\n    'noframes',\n    'ol',\n    'optgroup',\n    'option',\n    'p',\n    'param',\n    'search',\n    'section',\n    'summary',\n    'table',\n    'tbody',\n    'td',\n    'tfoot',\n    'th',\n    'thead',\n    'title',\n    'tr',\n    'track',\n    'ul'\n];\n\n\n// Regexps to match html elements\nconst $08e6c33d10f51cc6$var$attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\nconst $08e6c33d10f51cc6$var$unquoted = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nconst $08e6c33d10f51cc6$var$single_quoted = \"'[^']*'\";\nconst $08e6c33d10f51cc6$var$double_quoted = '\"[^\"]*\"';\nconst $08e6c33d10f51cc6$var$attr_value = '(?:' + $08e6c33d10f51cc6$var$unquoted + '|' + $08e6c33d10f51cc6$var$single_quoted + '|' + $08e6c33d10f51cc6$var$double_quoted + ')';\nconst $08e6c33d10f51cc6$var$attribute = '(?:\\\\s+' + $08e6c33d10f51cc6$var$attr_name + '(?:\\\\s*=\\\\s*' + $08e6c33d10f51cc6$var$attr_value + ')?)';\nconst $08e6c33d10f51cc6$var$open_tag = '<[A-Za-z][A-Za-z0-9\\\\-]*' + $08e6c33d10f51cc6$var$attribute + '*\\\\s*\\\\/?>';\nconst $08e6c33d10f51cc6$var$close_tag = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nconst $08e6c33d10f51cc6$var$comment = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->';\nconst $08e6c33d10f51cc6$var$processing = '<[?][\\\\s\\\\S]*?[?]>';\nconst $08e6c33d10f51cc6$var$declaration = '<![A-Za-z][^>]*>';\nconst $08e6c33d10f51cc6$var$cdata = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\nconst $08e6c33d10f51cc6$export$6db61d2c3a16e419 = new RegExp('^(?:' + $08e6c33d10f51cc6$var$open_tag + '|' + $08e6c33d10f51cc6$var$close_tag + '|' + $08e6c33d10f51cc6$var$comment + '|' + $08e6c33d10f51cc6$var$processing + '|' + $08e6c33d10f51cc6$var$declaration + '|' + $08e6c33d10f51cc6$var$cdata + ')');\nconst $08e6c33d10f51cc6$export$cd48660d06f74639 = new RegExp('^(?:' + $08e6c33d10f51cc6$var$open_tag + '|' + $08e6c33d10f51cc6$var$close_tag + ')');\n\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst $d9386c6e85fc1b48$var$HTML_SEQUENCES = [\n    [\n        /^<(script|pre|style|textarea)(?=(\\s|>|$))/i,\n        /<\\/(script|pre|style|textarea)>/i,\n        true\n    ],\n    [\n        /^<!--/,\n        /-->/,\n        true\n    ],\n    [\n        /^<\\?/,\n        /\\?>/,\n        true\n    ],\n    [\n        /^<![A-Z]/,\n        />/,\n        true\n    ],\n    [\n        /^<!\\[CDATA\\[/,\n        /\\]\\]>/,\n        true\n    ],\n    [\n        new RegExp('^</?(' + (0, $8955e68447e3f9db$export$2e2bcd8739ae039).join('|') + ')(?=(\\\\s|/?>|$))', 'i'),\n        /^$/,\n        true\n    ],\n    [\n        new RegExp((0, $08e6c33d10f51cc6$export$cd48660d06f74639).source + '\\\\s*$'),\n        /^$/,\n        false\n    ]\n];\nfunction $d9386c6e85fc1b48$export$2e2bcd8739ae039(state, startLine, endLine, silent) {\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    let max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    if (!state.md.options.html) return false;\n    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) return false;\n    let lineText = state.src.slice(pos, max);\n    let i = 0;\n    for(; i < $d9386c6e85fc1b48$var$HTML_SEQUENCES.length; i++){\n        if ($d9386c6e85fc1b48$var$HTML_SEQUENCES[i][0].test(lineText)) break;\n    }\n    if (i === $d9386c6e85fc1b48$var$HTML_SEQUENCES.length) return false;\n    if (silent) // true if this sequence can be a terminator, false otherwise\n    return $d9386c6e85fc1b48$var$HTML_SEQUENCES[i][2];\n    let nextLine = startLine + 1;\n    // If we are here - we detected HTML block.\n    // Let's roll down till block end.\n    if (!$d9386c6e85fc1b48$var$HTML_SEQUENCES[i][1].test(lineText)) for(; nextLine < endLine; nextLine++){\n        if (state.sCount[nextLine] < state.blkIndent) break;\n        pos = state.bMarks[nextLine] + state.tShift[nextLine];\n        max = state.eMarks[nextLine];\n        lineText = state.src.slice(pos, max);\n        if ($d9386c6e85fc1b48$var$HTML_SEQUENCES[i][1].test(lineText)) {\n            if (lineText.length !== 0) nextLine++;\n            break;\n        }\n    }\n    state.line = nextLine;\n    const token = state.push('html_block', '', 0);\n    token.map = [\n        startLine,\n        nextLine\n    ];\n    token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n    return true;\n}\n\n\n// heading (#, ##, ...)\n\nfunction $dd7f552fbefa4306$export$2e2bcd8739ae039(state, startLine, endLine, silent) {\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    let max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    let ch = state.src.charCodeAt(pos);\n    if (ch !== 0x23 /* # */  || pos >= max) return false;\n    // count heading level\n    let level = 1;\n    ch = state.src.charCodeAt(++pos);\n    while(ch === 0x23 /* # */  && pos < max && level <= 6){\n        level++;\n        ch = state.src.charCodeAt(++pos);\n    }\n    if (level > 6 || pos < max && !(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch)) return false;\n    if (silent) return true;\n    // Let's cut tails like '    ###  ' from the end of string\n    max = state.skipSpacesBack(max, pos);\n    const tmp = state.skipCharsBack(max, 0x23, pos) // #\n    ;\n    if (tmp > pos && (0, $acb166200129f66e$export$1d5ccafae59b4926)(state.src.charCodeAt(tmp - 1))) max = tmp;\n    state.line = startLine + 1;\n    const token_o = state.push('heading_open', 'h' + String(level), 1);\n    token_o.markup = '########'.slice(0, level);\n    token_o.map = [\n        startLine,\n        state.line\n    ];\n    const token_i = state.push('inline', '', 0);\n    token_i.content = state.src.slice(pos, max).trim();\n    token_i.map = [\n        startLine,\n        state.line\n    ];\n    token_i.children = [];\n    const token_c = state.push('heading_close', 'h' + String(level), -1);\n    token_c.markup = '########'.slice(0, level);\n    return true;\n}\n\n\n// lheading (---, ===)\nfunction $acb81d8044351f9f$export$2e2bcd8739ae039(state, startLine, endLine /*, silent */ ) {\n    const terminatorRules = state.md.block.ruler.getRules('paragraph');\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) return false;\n    const oldParentType = state.parentType;\n    state.parentType = 'paragraph' // use paragraph to match terminatorRules\n    ;\n    // jump line-by-line until empty one or EOF\n    let level = 0;\n    let marker;\n    let nextLine = startLine + 1;\n    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n        // this would be a code block normally, but after paragraph\n        // it's considered a lazy continuation regardless of what's there\n        if (state.sCount[nextLine] - state.blkIndent > 3) continue;\n        //\n        // Check for underline in setext header\n        //\n        if (state.sCount[nextLine] >= state.blkIndent) {\n            let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n            const max = state.eMarks[nextLine];\n            if (pos < max) {\n                marker = state.src.charCodeAt(pos);\n                if (marker === 0x2D /* - */  || marker === 0x3D /* = */ ) {\n                    pos = state.skipChars(pos, marker);\n                    pos = state.skipSpaces(pos);\n                    if (pos >= max) {\n                        level = marker === 0x3D /* = */  ? 1 : 2;\n                        break;\n                    }\n                }\n            }\n        }\n        // quirk for blockquotes, this line should already be checked by that rule\n        if (state.sCount[nextLine] < 0) continue;\n        // Some tags can terminate paragraph without empty line.\n        let terminate = false;\n        for(let i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n        }\n        if (terminate) break;\n    }\n    if (!level) // Didn't find valid underline\n    return false;\n    const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n    state.line = nextLine + 1;\n    const token_o = state.push('heading_open', 'h' + String(level), 1);\n    token_o.markup = String.fromCharCode(marker);\n    token_o.map = [\n        startLine,\n        state.line\n    ];\n    const token_i = state.push('inline', '', 0);\n    token_i.content = content;\n    token_i.map = [\n        startLine,\n        state.line - 1\n    ];\n    token_i.children = [];\n    const token_c = state.push('heading_close', 'h' + String(level), -1);\n    token_c.markup = String.fromCharCode(marker);\n    state.parentType = oldParentType;\n    return true;\n}\n\n\n// Paragraph\nfunction $d374391f851a68ad$export$2e2bcd8739ae039(state, startLine, endLine) {\n    const terminatorRules = state.md.block.ruler.getRules('paragraph');\n    const oldParentType = state.parentType;\n    let nextLine = startLine + 1;\n    state.parentType = 'paragraph';\n    // jump line-by-line until empty one or EOF\n    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n        // this would be a code block normally, but after paragraph\n        // it's considered a lazy continuation regardless of what's there\n        if (state.sCount[nextLine] - state.blkIndent > 3) continue;\n        // quirk for blockquotes, this line should already be checked by that rule\n        if (state.sCount[nextLine] < 0) continue;\n        // Some tags can terminate paragraph without empty line.\n        let terminate = false;\n        for(let i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n        }\n        if (terminate) break;\n    }\n    const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n    state.line = nextLine;\n    const token_o = state.push('paragraph_open', 'p', 1);\n    token_o.map = [\n        startLine,\n        state.line\n    ];\n    const token_i = state.push('inline', '', 0);\n    token_i.content = content;\n    token_i.map = [\n        startLine,\n        state.line\n    ];\n    token_i.children = [];\n    state.push('paragraph_close', 'p', -1);\n    state.parentType = oldParentType;\n    return true;\n}\n\n\nconst $3349c57a2e9a47a9$var$_rules = [\n    // First 2 params - rule name & source. Secondary array - list of rules,\n    // which can be terminated by this one.\n    [\n        'table',\n        (0, $2ef92aecf350006a$export$2e2bcd8739ae039),\n        [\n            'paragraph',\n            'reference'\n        ]\n    ],\n    [\n        'code',\n        (0, $319716b5135e5657$export$2e2bcd8739ae039)\n    ],\n    [\n        'fence',\n        (0, $96fff8032daf3c7b$export$2e2bcd8739ae039),\n        [\n            'paragraph',\n            'reference',\n            'blockquote',\n            'list'\n        ]\n    ],\n    [\n        'blockquote',\n        (0, $56f381d401e94dfa$export$2e2bcd8739ae039),\n        [\n            'paragraph',\n            'reference',\n            'blockquote',\n            'list'\n        ]\n    ],\n    [\n        'hr',\n        (0, $bd654477b14b4267$export$2e2bcd8739ae039),\n        [\n            'paragraph',\n            'reference',\n            'blockquote',\n            'list'\n        ]\n    ],\n    [\n        'list',\n        (0, $3b7cbf7838646e8a$export$2e2bcd8739ae039),\n        [\n            'paragraph',\n            'reference',\n            'blockquote'\n        ]\n    ],\n    [\n        'reference',\n        (0, $dc5cd5db6853c1d8$export$2e2bcd8739ae039)\n    ],\n    [\n        'html_block',\n        (0, $d9386c6e85fc1b48$export$2e2bcd8739ae039),\n        [\n            'paragraph',\n            'reference',\n            'blockquote'\n        ]\n    ],\n    [\n        'heading',\n        (0, $dd7f552fbefa4306$export$2e2bcd8739ae039),\n        [\n            'paragraph',\n            'reference',\n            'blockquote'\n        ]\n    ],\n    [\n        'lheading',\n        (0, $acb81d8044351f9f$export$2e2bcd8739ae039)\n    ],\n    [\n        'paragraph',\n        (0, $d374391f851a68ad$export$2e2bcd8739ae039)\n    ]\n];\n/**\n * new ParserBlock()\n **/ function $3349c57a2e9a47a9$var$ParserBlock() {\n    /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/ this.ruler = new (0, $41ea3ea6c70806b8$export$2e2bcd8739ae039)();\n    for(let i = 0; i < $3349c57a2e9a47a9$var$_rules.length; i++)this.ruler.push($3349c57a2e9a47a9$var$_rules[i][0], $3349c57a2e9a47a9$var$_rules[i][1], {\n        alt: ($3349c57a2e9a47a9$var$_rules[i][2] || []).slice()\n    });\n}\n// Generate tokens for input range\n//\n$3349c57a2e9a47a9$var$ParserBlock.prototype.tokenize = function(state, startLine, endLine) {\n    const rules = this.ruler.getRules('');\n    const len = rules.length;\n    const maxNesting = state.md.options.maxNesting;\n    let line = startLine;\n    let hasEmptyLines = false;\n    while(line < endLine){\n        state.line = line = state.skipEmptyLines(line);\n        if (line >= endLine) break;\n        // Termination condition for nested calls.\n        // Nested calls currently used for blockquotes & lists\n        if (state.sCount[line] < state.blkIndent) break;\n        // If nesting level exceeded - skip tail to the end. That's not ordinary\n        // situation and we should not care about content.\n        if (state.level >= maxNesting) {\n            state.line = endLine;\n            break;\n        }\n        // Try all possible rules.\n        // On success, rule should:\n        //\n        // - update `state.line`\n        // - update `state.tokens`\n        // - return true\n        const prevLine = state.line;\n        let ok = false;\n        for(let i = 0; i < len; i++){\n            ok = rules[i](state, line, endLine, false);\n            if (ok) {\n                if (prevLine >= state.line) throw new Error(\"block rule didn't increment state.line\");\n                break;\n            }\n        }\n        // this can only happen if user disables paragraph rule\n        if (!ok) throw new Error('none of the block rules matched');\n        // set state.tight if we had an empty line before current tag\n        // i.e. latest empty line should not count\n        state.tight = !hasEmptyLines;\n        // paragraph might \"eat\" one newline after it in nested lists\n        if (state.isEmpty(state.line - 1)) hasEmptyLines = true;\n        line = state.line;\n        if (line < endLine && state.isEmpty(line)) {\n            hasEmptyLines = true;\n            line++;\n            state.line = line;\n        }\n    }\n};\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/ $3349c57a2e9a47a9$var$ParserBlock.prototype.parse = function(src, md, env, outTokens) {\n    if (!src) return;\n    const state = new this.State(src, md, env, outTokens);\n    this.tokenize(state, state.line, state.lineMax);\n};\n$3349c57a2e9a47a9$var$ParserBlock.prototype.State = (0, $ad2420667aa7c8e8$export$2e2bcd8739ae039);\nvar $3349c57a2e9a47a9$export$2e2bcd8739ae039 = $3349c57a2e9a47a9$var$ParserBlock;\n\n\n/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/ \n// Inline parser state\n\n\nfunction $78766ebe20d230e1$var$StateInline(src, md, env, outTokens) {\n    this.src = src;\n    this.env = env;\n    this.md = md;\n    this.tokens = outTokens;\n    this.tokens_meta = Array(outTokens.length);\n    this.pos = 0;\n    this.posMax = this.src.length;\n    this.level = 0;\n    this.pending = '';\n    this.pendingLevel = 0;\n    // Stores { start: end } pairs. Useful for backtrack\n    // optimization of pairs parse (emphasis, strikes).\n    this.cache = {};\n    // List of emphasis-like delimiters for current tag\n    this.delimiters = [];\n    // Stack of delimiter lists for upper level tags\n    this._prev_delimiters = [];\n    // backtick length => last seen position\n    this.backticks = {};\n    this.backticksScanned = false;\n    // Counter used to disable inline linkify-it execution\n    // inside <a> and markdown links\n    this.linkLevel = 0;\n}\n// Flush pending text\n//\n$78766ebe20d230e1$var$StateInline.prototype.pushPending = function() {\n    const token = new (0, $59ac17e6d91b036a$export$2e2bcd8739ae039)('text', '', 0);\n    token.content = this.pending;\n    token.level = this.pendingLevel;\n    this.tokens.push(token);\n    this.pending = '';\n    return token;\n};\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\n$78766ebe20d230e1$var$StateInline.prototype.push = function(type, tag, nesting) {\n    if (this.pending) this.pushPending();\n    const token = new (0, $59ac17e6d91b036a$export$2e2bcd8739ae039)(type, tag, nesting);\n    let token_meta = null;\n    if (nesting < 0) {\n        // closing tag\n        this.level--;\n        this.delimiters = this._prev_delimiters.pop();\n    }\n    token.level = this.level;\n    if (nesting > 0) {\n        // opening tag\n        this.level++;\n        this._prev_delimiters.push(this.delimiters);\n        this.delimiters = [];\n        token_meta = {\n            delimiters: this.delimiters\n        };\n    }\n    this.pendingLevel = this.level;\n    this.tokens.push(token);\n    this.tokens_meta.push(token_meta);\n    return token;\n};\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\n$78766ebe20d230e1$var$StateInline.prototype.scanDelims = function(start, canSplitWord) {\n    const max = this.posMax;\n    const marker = this.src.charCodeAt(start);\n    // treat beginning of the line as a whitespace\n    const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n    let pos = start;\n    while(pos < max && this.src.charCodeAt(pos) === marker)pos++;\n    const count = pos - start;\n    // treat end of the line as a whitespace\n    const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n    const isLastPunctChar = (0, $acb166200129f66e$export$829a0d33ae4e744)(lastChar) || (0, $acb166200129f66e$export$4888a643af800fc1)(String.fromCharCode(lastChar));\n    const isNextPunctChar = (0, $acb166200129f66e$export$829a0d33ae4e744)(nextChar) || (0, $acb166200129f66e$export$4888a643af800fc1)(String.fromCharCode(nextChar));\n    const isLastWhiteSpace = (0, $acb166200129f66e$export$3c52dd84024ae72c)(lastChar);\n    const isNextWhiteSpace = (0, $acb166200129f66e$export$3c52dd84024ae72c)(nextChar);\n    const left_flanking = !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar);\n    const right_flanking = !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar);\n    const can_open = left_flanking && (canSplitWord || !right_flanking || isLastPunctChar);\n    const can_close = right_flanking && (canSplitWord || !left_flanking || isNextPunctChar);\n    return {\n        can_open: can_open,\n        can_close: can_close,\n        length: count\n    };\n};\n// re-export Token class to use in block rules\n$78766ebe20d230e1$var$StateInline.prototype.Token = (0, $59ac17e6d91b036a$export$2e2bcd8739ae039);\nvar $78766ebe20d230e1$export$2e2bcd8739ae039 = $78766ebe20d230e1$var$StateInline;\n\n\n// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction $52dad52dbdb68874$var$isTerminatorChar(ch) {\n    switch(ch){\n        case 0x0A /* \\n */ :\n        case 0x21 /* ! */ :\n        case 0x23 /* # */ :\n        case 0x24 /* $ */ :\n        case 0x25 /* % */ :\n        case 0x26 /* & */ :\n        case 0x2A /* * */ :\n        case 0x2B /* + */ :\n        case 0x2D /* - */ :\n        case 0x3A /* : */ :\n        case 0x3C /* < */ :\n        case 0x3D /* = */ :\n        case 0x3E /* > */ :\n        case 0x40 /* @ */ :\n        case 0x5B /* [ */ :\n        case 0x5C /* \\ */ :\n        case 0x5D /* ] */ :\n        case 0x5E /* ^ */ :\n        case 0x5F /* _ */ :\n        case 0x60 /* ` */ :\n        case 0x7B /* { */ :\n        case 0x7D /* } */ :\n        case 0x7E /* ~ */ :\n            return true;\n        default:\n            return false;\n    }\n}\nfunction $52dad52dbdb68874$export$2e2bcd8739ae039(state, silent) {\n    let pos = state.pos;\n    while(pos < state.posMax && !$52dad52dbdb68874$var$isTerminatorChar(state.src.charCodeAt(pos)))pos++;\n    if (pos === state.pos) return false;\n    if (!silent) state.pending += state.src.slice(state.pos, pos);\n    state.pos = pos;\n    return true;\n} // Alternative implementation, for memory.\n //\n // It costs 10% of performance, but allows extend terminators list, if place it\n // to `ParserInline` property. Probably, will switch to it sometime, such\n // flexibility required.\n /*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */ \n\n\n// Process links like https://example.org/\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst $d922190b2670a68c$var$SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\nfunction $d922190b2670a68c$export$2e2bcd8739ae039(state, silent) {\n    if (!state.md.options.linkify) return false;\n    if (state.linkLevel > 0) return false;\n    const pos = state.pos;\n    const max = state.posMax;\n    if (pos + 3 > max) return false;\n    if (state.src.charCodeAt(pos) !== 0x3A /* : */ ) return false;\n    if (state.src.charCodeAt(pos + 1) !== 0x2F /* / */ ) return false;\n    if (state.src.charCodeAt(pos + 2) !== 0x2F /* / */ ) return false;\n    const match = state.pending.match($d922190b2670a68c$var$SCHEME_RE);\n    if (!match) return false;\n    const proto = match[1];\n    const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n    if (!link) return false;\n    let url = link.url;\n    // invalid link, but still detected by linkify somehow;\n    // need to check to prevent infinite loop below\n    if (url.length <= proto.length) return false;\n    // disallow '*' at the end of the link (conflicts with emphasis)\n    url = url.replace(/\\*+$/, '');\n    const fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) return false;\n    if (!silent) {\n        state.pending = state.pending.slice(0, -proto.length);\n        const token_o = state.push('link_open', 'a', 1);\n        token_o.attrs = [\n            [\n                'href',\n                fullUrl\n            ]\n        ];\n        token_o.markup = 'linkify';\n        token_o.info = 'auto';\n        const token_t = state.push('text', '', 0);\n        token_t.content = state.md.normalizeLinkText(url);\n        const token_c = state.push('link_close', 'a', -1);\n        token_c.markup = 'linkify';\n        token_c.info = 'auto';\n    }\n    state.pos += url.length - proto.length;\n    return true;\n}\n\n\n// Proceess '\\n'\n\nfunction $4da0439b0e5b89ea$export$2e2bcd8739ae039(state, silent) {\n    let pos = state.pos;\n    if (state.src.charCodeAt(pos) !== 0x0A /* \\n */ ) return false;\n    const pmax = state.pending.length - 1;\n    const max = state.posMax;\n    // '  \\n' -> hardbreak\n    // Lookup in pending chars is bad practice! Don't copy to other rules!\n    // Pending string is stored in concat mode, indexed lookups will cause\n    // convertion to flat mode.\n    if (!silent) {\n        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n            if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n                // Find whitespaces tail of pending chars.\n                let ws = pmax - 1;\n                while(ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20)ws--;\n                state.pending = state.pending.slice(0, ws);\n                state.push('hardbreak', 'br', 0);\n            } else {\n                state.pending = state.pending.slice(0, -1);\n                state.push('softbreak', 'br', 0);\n            }\n        } else state.push('softbreak', 'br', 0);\n    }\n    pos++;\n    // skip heading spaces for next line\n    while(pos < max && (0, $acb166200129f66e$export$1d5ccafae59b4926)(state.src.charCodeAt(pos)))pos++;\n    state.pos = pos;\n    return true;\n}\n\n\n// Process escaped chars and hardbreaks\n\nconst $b91dce80827c08a1$var$ESCAPED = [];\nfor(let i = 0; i < 256; i++)$b91dce80827c08a1$var$ESCAPED.push(0);\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function(ch) {\n    $b91dce80827c08a1$var$ESCAPED[ch.charCodeAt(0)] = 1;\n});\nfunction $b91dce80827c08a1$export$2e2bcd8739ae039(state, silent) {\n    let pos = state.pos;\n    const max = state.posMax;\n    if (state.src.charCodeAt(pos) !== 0x5C /* \\ */ ) return false;\n    pos++;\n    // '\\' at the end of the inline block\n    if (pos >= max) return false;\n    let ch1 = state.src.charCodeAt(pos);\n    if (ch1 === 0x0A) {\n        if (!silent) state.push('hardbreak', 'br', 0);\n        pos++;\n        // skip leading whitespaces from next line\n        while(pos < max){\n            ch1 = state.src.charCodeAt(pos);\n            if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(ch1)) break;\n            pos++;\n        }\n        state.pos = pos;\n        return true;\n    }\n    let escapedStr = state.src[pos];\n    if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n        const ch2 = state.src.charCodeAt(pos + 1);\n        if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n            escapedStr += state.src[pos + 1];\n            pos++;\n        }\n    }\n    const origStr = '\\\\' + escapedStr;\n    if (!silent) {\n        const token = state.push('text_special', '', 0);\n        if (ch1 < 256 && $b91dce80827c08a1$var$ESCAPED[ch1] !== 0) token.content = escapedStr;\n        else token.content = origStr;\n        token.markup = origStr;\n        token.info = 'escape';\n    }\n    state.pos = pos + 1;\n    return true;\n}\n\n\n// Parse backticks\nfunction $b39c44d4094d07d3$export$2e2bcd8739ae039(state, silent) {\n    let pos = state.pos;\n    const ch = state.src.charCodeAt(pos);\n    if (ch !== 0x60 /* ` */ ) return false;\n    const start = pos;\n    pos++;\n    const max = state.posMax;\n    // scan marker length\n    while(pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */ )pos++;\n    const marker = state.src.slice(start, pos);\n    const openerLength = marker.length;\n    if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n        if (!silent) state.pending += marker;\n        state.pos += openerLength;\n        return true;\n    }\n    let matchEnd = pos;\n    let matchStart;\n    // Nothing found in the cache, scan until the end of the line (or until marker is found)\n    while((matchStart = state.src.indexOf('`', matchEnd)) !== -1){\n        matchEnd = matchStart + 1;\n        // scan marker length\n        while(matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */ )matchEnd++;\n        const closerLength = matchEnd - matchStart;\n        if (closerLength === openerLength) {\n            // Found matching closer length.\n            if (!silent) {\n                const token = state.push('code_inline', 'code', 0);\n                token.markup = marker;\n                token.content = state.src.slice(pos, matchStart).replace(/\\n/g, ' ').replace(/^ (.+) $/, '$1');\n            }\n            state.pos = matchEnd;\n            return true;\n        }\n        // Some different length found, put it in cache as upper limit of where closer can be found\n        state.backticks[closerLength] = matchStart;\n    }\n    // Scanned through the end, didn't find anything\n    state.backticksScanned = true;\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n}\n\n\n// ~~strike through~~\n//\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction $c4e44d3b61071958$var$strikethrough_tokenize(state, silent) {\n    const start = state.pos;\n    const marker = state.src.charCodeAt(start);\n    if (silent) return false;\n    if (marker !== 0x7E /* ~ */ ) return false;\n    const scanned = state.scanDelims(state.pos, true);\n    let len = scanned.length;\n    const ch = String.fromCharCode(marker);\n    if (len < 2) return false;\n    let token;\n    if (len % 2) {\n        token = state.push('text', '', 0);\n        token.content = ch;\n        len--;\n    }\n    for(let i = 0; i < len; i += 2){\n        token = state.push('text', '', 0);\n        token.content = ch + ch;\n        state.delimiters.push({\n            marker: marker,\n            length: 0,\n            token: state.tokens.length - 1,\n            end: -1,\n            open: scanned.can_open,\n            close: scanned.can_close\n        });\n    }\n    state.pos += scanned.length;\n    return true;\n}\nfunction $c4e44d3b61071958$var$postProcess(state, delimiters) {\n    let token;\n    const loneMarkers = [];\n    const max = delimiters.length;\n    for(let i = 0; i < max; i++){\n        const startDelim = delimiters[i];\n        if (startDelim.marker !== 0x7E /* ~ */ ) continue;\n        if (startDelim.end === -1) continue;\n        const endDelim = delimiters[startDelim.end];\n        token = state.tokens[startDelim.token];\n        token.type = 's_open';\n        token.tag = 's';\n        token.nesting = 1;\n        token.markup = '~~';\n        token.content = '';\n        token = state.tokens[endDelim.token];\n        token.type = 's_close';\n        token.tag = 's';\n        token.nesting = -1;\n        token.markup = '~~';\n        token.content = '';\n        if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') loneMarkers.push(endDelim.token - 1);\n    }\n    // If a marker sequence has an odd number of characters, it's splitted\n    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n    // start of the sequence.\n    //\n    // So, we have to move all those markers after subsequent s_close tags.\n    //\n    while(loneMarkers.length){\n        const i = loneMarkers.pop();\n        let j = i + 1;\n        while(j < state.tokens.length && state.tokens[j].type === 's_close')j++;\n        j--;\n        if (i !== j) {\n            token = state.tokens[j];\n            state.tokens[j] = state.tokens[i];\n            state.tokens[i] = token;\n        }\n    }\n}\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction $c4e44d3b61071958$var$strikethrough_postProcess(state) {\n    const tokens_meta = state.tokens_meta;\n    const max = state.tokens_meta.length;\n    $c4e44d3b61071958$var$postProcess(state, state.delimiters);\n    for(let curr = 0; curr < max; curr++)if (tokens_meta[curr] && tokens_meta[curr].delimiters) $c4e44d3b61071958$var$postProcess(state, tokens_meta[curr].delimiters);\n}\nvar $c4e44d3b61071958$export$2e2bcd8739ae039 = {\n    tokenize: $c4e44d3b61071958$var$strikethrough_tokenize,\n    postProcess: $c4e44d3b61071958$var$strikethrough_postProcess\n};\n\n\n// Process *this* and _that_\n//\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction $354922e1ef651ea3$var$emphasis_tokenize(state, silent) {\n    const start = state.pos;\n    const marker = state.src.charCodeAt(start);\n    if (silent) return false;\n    if (marker !== 0x5F /* _ */  && marker !== 0x2A /* * */ ) return false;\n    const scanned = state.scanDelims(state.pos, marker === 0x2A);\n    for(let i = 0; i < scanned.length; i++){\n        const token = state.push('text', '', 0);\n        token.content = String.fromCharCode(marker);\n        state.delimiters.push({\n            marker: // Char code of the starting marker (number).\n            //\n            marker,\n            // Total length of these series of delimiters.\n            //\n            length: scanned.length,\n            // A position of the token this delimiter corresponds to.\n            //\n            token: state.tokens.length - 1,\n            // If this delimiter is matched as a valid opener, `end` will be\n            // equal to its position, otherwise it's `-1`.\n            //\n            end: -1,\n            // Boolean flags that determine if this delimiter could open or close\n            // an emphasis.\n            //\n            open: scanned.can_open,\n            close: scanned.can_close\n        });\n    }\n    state.pos += scanned.length;\n    return true;\n}\nfunction $354922e1ef651ea3$var$postProcess(state, delimiters) {\n    const max = delimiters.length;\n    for(let i = max - 1; i >= 0; i--){\n        const startDelim = delimiters[i];\n        if (startDelim.marker !== 0x5F /* _ */  && startDelim.marker !== 0x2A /* * */ ) continue;\n        // Process only opening markers\n        if (startDelim.end === -1) continue;\n        const endDelim = delimiters[startDelim.end];\n        // If the previous delimiter has the same marker and is adjacent to this one,\n        // merge those into one strong delimiter.\n        //\n        // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n        //\n        const isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && // check that first two markers match and adjacent\n        delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && // check that last two markers are adjacent (we can safely assume they match)\n        delimiters[startDelim.end + 1].token === endDelim.token + 1;\n        const ch = String.fromCharCode(startDelim.marker);\n        const token_o = state.tokens[startDelim.token];\n        token_o.type = isStrong ? 'strong_open' : 'em_open';\n        token_o.tag = isStrong ? 'strong' : 'em';\n        token_o.nesting = 1;\n        token_o.markup = isStrong ? ch + ch : ch;\n        token_o.content = '';\n        const token_c = state.tokens[endDelim.token];\n        token_c.type = isStrong ? 'strong_close' : 'em_close';\n        token_c.tag = isStrong ? 'strong' : 'em';\n        token_c.nesting = -1;\n        token_c.markup = isStrong ? ch + ch : ch;\n        token_c.content = '';\n        if (isStrong) {\n            state.tokens[delimiters[i - 1].token].content = '';\n            state.tokens[delimiters[startDelim.end + 1].token].content = '';\n            i--;\n        }\n    }\n}\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction $354922e1ef651ea3$var$emphasis_post_process(state) {\n    const tokens_meta = state.tokens_meta;\n    const max = state.tokens_meta.length;\n    $354922e1ef651ea3$var$postProcess(state, state.delimiters);\n    for(let curr = 0; curr < max; curr++)if (tokens_meta[curr] && tokens_meta[curr].delimiters) $354922e1ef651ea3$var$postProcess(state, tokens_meta[curr].delimiters);\n}\nvar $354922e1ef651ea3$export$2e2bcd8739ae039 = {\n    tokenize: $354922e1ef651ea3$var$emphasis_tokenize,\n    postProcess: $354922e1ef651ea3$var$emphasis_post_process\n};\n\n\n// Process [link](<to> \"stuff\")\n\nfunction $019ddf5760813e0c$export$2e2bcd8739ae039(state, silent) {\n    let code, label, res, ref;\n    let href = '';\n    let title = '';\n    let start = state.pos;\n    let parseReference = true;\n    if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */ ) return false;\n    const oldPos = state.pos;\n    const max = state.posMax;\n    const labelStart = state.pos + 1;\n    const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n    // parser failed to find ']', so it's not a valid link\n    if (labelEnd < 0) return false;\n    let pos = labelEnd + 1;\n    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {\n        //\n        // Inline link\n        //\n        // might have found a valid shortcut link, disable reference parsing\n        parseReference = false;\n        // [link](  <href>  \"title\"  )\n        //        ^^ skipping these spaces\n        pos++;\n        for(; pos < max; pos++){\n            code = state.src.charCodeAt(pos);\n            if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(code) && code !== 0x0A) break;\n        }\n        if (pos >= max) return false;\n        // [link](  <href>  \"title\"  )\n        //          ^^^^^^ parsing link destination\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n            href = state.md.normalizeLink(res.str);\n            if (state.md.validateLink(href)) pos = res.pos;\n            else href = '';\n            // [link](  <href>  \"title\"  )\n            //                ^^ skipping these spaces\n            start = pos;\n            for(; pos < max; pos++){\n                code = state.src.charCodeAt(pos);\n                if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(code) && code !== 0x0A) break;\n            }\n            // [link](  <href>  \"title\"  )\n            //                  ^^^^^^^ parsing link title\n            res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n            if (pos < max && start !== pos && res.ok) {\n                title = res.str;\n                pos = res.pos;\n                // [link](  <href>  \"title\"  )\n                //                         ^^ skipping these spaces\n                for(; pos < max; pos++){\n                    code = state.src.charCodeAt(pos);\n                    if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(code) && code !== 0x0A) break;\n                }\n            }\n        }\n        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) // parsing a valid shortcut link failed, fallback to reference\n        parseReference = true;\n        pos++;\n    }\n    if (parseReference) {\n        //\n        // Link reference\n        //\n        if (typeof state.env.references === 'undefined') return false;\n        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {\n            start = pos + 1;\n            pos = state.md.helpers.parseLinkLabel(state, pos);\n            if (pos >= 0) label = state.src.slice(start, pos++);\n            else pos = labelEnd + 1;\n        } else pos = labelEnd + 1;\n        // covers label === '' and label === undefined\n        // (collapsed reference link and shortcut reference link respectively)\n        if (!label) label = state.src.slice(labelStart, labelEnd);\n        ref = state.env.references[(0, $acb166200129f66e$export$20ef46802c8744b)(label)];\n        if (!ref) {\n            state.pos = oldPos;\n            return false;\n        }\n        href = ref.href;\n        title = ref.title;\n    }\n    //\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n        state.pos = labelStart;\n        state.posMax = labelEnd;\n        const token_o = state.push('link_open', 'a', 1);\n        const attrs = [\n            [\n                'href',\n                href\n            ]\n        ];\n        token_o.attrs = attrs;\n        if (title) attrs.push([\n            'title',\n            title\n        ]);\n        state.linkLevel++;\n        state.md.inline.tokenize(state);\n        state.linkLevel--;\n        state.push('link_close', 'a', -1);\n    }\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n}\n\n\n// Process ![image](<src> \"title\")\n\nfunction $f2e767ae90fa58fa$export$2e2bcd8739ae039(state, silent) {\n    let code, content, label, pos, ref, res, title, start;\n    let href = '';\n    const oldPos = state.pos;\n    const max = state.posMax;\n    if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */ ) return false;\n    if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */ ) return false;\n    const labelStart = state.pos + 2;\n    const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n    // parser failed to find ']', so it's not a valid link\n    if (labelEnd < 0) return false;\n    pos = labelEnd + 1;\n    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {\n        //\n        // Inline link\n        //\n        // [link](  <href>  \"title\"  )\n        //        ^^ skipping these spaces\n        pos++;\n        for(; pos < max; pos++){\n            code = state.src.charCodeAt(pos);\n            if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(code) && code !== 0x0A) break;\n        }\n        if (pos >= max) return false;\n        // [link](  <href>  \"title\"  )\n        //          ^^^^^^ parsing link destination\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n            href = state.md.normalizeLink(res.str);\n            if (state.md.validateLink(href)) pos = res.pos;\n            else href = '';\n        }\n        // [link](  <href>  \"title\"  )\n        //                ^^ skipping these spaces\n        start = pos;\n        for(; pos < max; pos++){\n            code = state.src.charCodeAt(pos);\n            if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(code) && code !== 0x0A) break;\n        }\n        // [link](  <href>  \"title\"  )\n        //                  ^^^^^^^ parsing link title\n        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n        if (pos < max && start !== pos && res.ok) {\n            title = res.str;\n            pos = res.pos;\n            // [link](  <href>  \"title\"  )\n            //                         ^^ skipping these spaces\n            for(; pos < max; pos++){\n                code = state.src.charCodeAt(pos);\n                if (!(0, $acb166200129f66e$export$1d5ccafae59b4926)(code) && code !== 0x0A) break;\n            }\n        } else title = '';\n        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) {\n            state.pos = oldPos;\n            return false;\n        }\n        pos++;\n    } else {\n        //\n        // Link reference\n        //\n        if (typeof state.env.references === 'undefined') return false;\n        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {\n            start = pos + 1;\n            pos = state.md.helpers.parseLinkLabel(state, pos);\n            if (pos >= 0) label = state.src.slice(start, pos++);\n            else pos = labelEnd + 1;\n        } else pos = labelEnd + 1;\n        // covers label === '' and label === undefined\n        // (collapsed reference link and shortcut reference link respectively)\n        if (!label) label = state.src.slice(labelStart, labelEnd);\n        ref = state.env.references[(0, $acb166200129f66e$export$20ef46802c8744b)(label)];\n        if (!ref) {\n            state.pos = oldPos;\n            return false;\n        }\n        href = ref.href;\n        title = ref.title;\n    }\n    //\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n        content = state.src.slice(labelStart, labelEnd);\n        const tokens = [];\n        state.md.inline.parse(content, state.md, state.env, tokens);\n        const token = state.push('image', 'img', 0);\n        const attrs = [\n            [\n                'src',\n                href\n            ],\n            [\n                'alt',\n                ''\n            ]\n        ];\n        token.attrs = attrs;\n        token.children = tokens;\n        token.content = content;\n        if (title) attrs.push([\n            'title',\n            title\n        ]);\n    }\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n}\n\n\n// Process autolinks '<protocol:...>'\n/* eslint max-len:0 */ const $38fe1de13dbca06b$var$EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n/* eslint-disable-next-line no-control-regex */ const $38fe1de13dbca06b$var$AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/;\nfunction $38fe1de13dbca06b$export$2e2bcd8739ae039(state, silent) {\n    let pos = state.pos;\n    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) return false;\n    const start = state.pos;\n    const max = state.posMax;\n    for(;;){\n        if (++pos >= max) return false;\n        const ch = state.src.charCodeAt(pos);\n        if (ch === 0x3C /* < */ ) return false;\n        if (ch === 0x3E /* > */ ) break;\n    }\n    const url = state.src.slice(start + 1, pos);\n    if ($38fe1de13dbca06b$var$AUTOLINK_RE.test(url)) {\n        const fullUrl = state.md.normalizeLink(url);\n        if (!state.md.validateLink(fullUrl)) return false;\n        if (!silent) {\n            const token_o = state.push('link_open', 'a', 1);\n            token_o.attrs = [\n                [\n                    'href',\n                    fullUrl\n                ]\n            ];\n            token_o.markup = 'autolink';\n            token_o.info = 'auto';\n            const token_t = state.push('text', '', 0);\n            token_t.content = state.md.normalizeLinkText(url);\n            const token_c = state.push('link_close', 'a', -1);\n            token_c.markup = 'autolink';\n            token_c.info = 'auto';\n        }\n        state.pos += url.length + 2;\n        return true;\n    }\n    if ($38fe1de13dbca06b$var$EMAIL_RE.test(url)) {\n        const fullUrl = state.md.normalizeLink('mailto:' + url);\n        if (!state.md.validateLink(fullUrl)) return false;\n        if (!silent) {\n            const token_o = state.push('link_open', 'a', 1);\n            token_o.attrs = [\n                [\n                    'href',\n                    fullUrl\n                ]\n            ];\n            token_o.markup = 'autolink';\n            token_o.info = 'auto';\n            const token_t = state.push('text', '', 0);\n            token_t.content = state.md.normalizeLinkText(url);\n            const token_c = state.push('link_close', 'a', -1);\n            token_c.markup = 'autolink';\n            token_c.info = 'auto';\n        }\n        state.pos += url.length + 2;\n        return true;\n    }\n    return false;\n}\n\n\n// Process html tags\n\nfunction $c398d6df9e0474f7$var$isLinkOpen(str) {\n    return /^<a[>\\s]/i.test(str);\n}\nfunction $c398d6df9e0474f7$var$isLinkClose(str) {\n    return /^<\\/a\\s*>/i.test(str);\n}\nfunction $c398d6df9e0474f7$var$isLetter(ch) {\n    /* eslint no-bitwise:0 */ const lc = ch | 0x20 // to lower case\n    ;\n    return lc >= 0x61 /* a */  && lc <= 0x7a /* z */ ;\n}\nfunction $c398d6df9e0474f7$export$2e2bcd8739ae039(state, silent) {\n    if (!state.md.options.html) return false;\n    // Check start\n    const max = state.posMax;\n    const pos = state.pos;\n    if (state.src.charCodeAt(pos) !== 0x3C /* < */  || pos + 2 >= max) return false;\n    // Quick fail on second char\n    const ch = state.src.charCodeAt(pos + 1);\n    if (ch !== 0x21 /* ! */  && ch !== 0x3F /* ? */  && ch !== 0x2F /* / */  && !$c398d6df9e0474f7$var$isLetter(ch)) return false;\n    const match = state.src.slice(pos).match((0, $08e6c33d10f51cc6$export$6db61d2c3a16e419));\n    if (!match) return false;\n    if (!silent) {\n        const token = state.push('html_inline', '', 0);\n        token.content = match[0];\n        if ($c398d6df9e0474f7$var$isLinkOpen(token.content)) state.linkLevel++;\n        if ($c398d6df9e0474f7$var$isLinkClose(token.content)) state.linkLevel--;\n    }\n    state.pos += match[0].length;\n    return true;\n}\n\n\n// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n\nconst $2605af2f776ac07c$var$DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nconst $2605af2f776ac07c$var$NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\nfunction $2605af2f776ac07c$export$2e2bcd8739ae039(state, silent) {\n    const pos = state.pos;\n    const max = state.posMax;\n    if (state.src.charCodeAt(pos) !== 0x26 /* & */ ) return false;\n    if (pos + 1 >= max) return false;\n    const ch = state.src.charCodeAt(pos + 1);\n    if (ch === 0x23 /* # */ ) {\n        const match = state.src.slice(pos).match($2605af2f776ac07c$var$DIGITAL_RE);\n        if (match) {\n            if (!silent) {\n                const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n                const token = state.push('text_special', '', 0);\n                token.content = (0, $acb166200129f66e$export$644a8f5b13b2a36d)(code) ? (0, $acb166200129f66e$export$73bfc63873071f74)(code) : (0, $acb166200129f66e$export$73bfc63873071f74)(0xFFFD);\n                token.markup = match[0];\n                token.info = 'entity';\n            }\n            state.pos += match[0].length;\n            return true;\n        }\n    } else {\n        const match = state.src.slice(pos).match($2605af2f776ac07c$var$NAMED_RE);\n        if (match) {\n            const decoded = (0, $21b54aeefac41b63$export$f045cb747ce77a19)(match[0]);\n            if (decoded !== match[0]) {\n                if (!silent) {\n                    const token = state.push('text_special', '', 0);\n                    token.content = decoded;\n                    token.markup = match[0];\n                    token.info = 'entity';\n                }\n                state.pos += match[0].length;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n// For each opening emphasis-like marker find a matching closing one\n//\nfunction $86b620d722e5f8d3$var$processDelimiters(delimiters) {\n    const openersBottom = {};\n    const max = delimiters.length;\n    if (!max) return;\n    // headerIdx is the first delimiter of the current (where closer is) delimiter run\n    let headerIdx = 0;\n    let lastTokenIdx = -2 // needs any value lower than -1\n    ;\n    const jumps = [];\n    for(let closerIdx = 0; closerIdx < max; closerIdx++){\n        const closer = delimiters[closerIdx];\n        jumps.push(0);\n        // markers belong to same delimiter run if:\n        //  - they have adjacent tokens\n        //  - AND markers are the same\n        //\n        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) headerIdx = closerIdx;\n        lastTokenIdx = closer.token;\n        // Length is only used for emphasis-specific \"rule of 3\",\n        // if it's not defined (in strikethrough or 3rd party plugins),\n        // we can default it to 0 to disable those checks.\n        //\n        closer.length = closer.length || 0;\n        if (!closer.close) continue;\n        // Previously calculated lower bounds (previous fails)\n        // for each marker, each delimiter length modulo 3,\n        // and for whether this closer can be an opener;\n        // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n        /* eslint-disable-next-line no-prototype-builtins */ if (!openersBottom.hasOwnProperty(closer.marker)) openersBottom[closer.marker] = [\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n        ];\n        const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n        let openerIdx = headerIdx - jumps[headerIdx] - 1;\n        let newMinOpenerIdx = openerIdx;\n        for(; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1){\n            const opener = delimiters[openerIdx];\n            if (opener.marker !== closer.marker) continue;\n            if (opener.open && opener.end < 0) {\n                let isOddMatch = false;\n                // from spec:\n                //\n                // If one of the delimiters can both open and close emphasis, then the\n                // sum of the lengths of the delimiter runs containing the opening and\n                // closing delimiters must not be a multiple of 3 unless both lengths\n                // are multiples of 3.\n                //\n                if (opener.close || closer.open) {\n                    if ((opener.length + closer.length) % 3 === 0) {\n                        if (opener.length % 3 !== 0 || closer.length % 3 !== 0) isOddMatch = true;\n                    }\n                }\n                if (!isOddMatch) {\n                    // If previous delimiter cannot be an opener, we can safely skip\n                    // the entire sequence in future checks. This is required to make\n                    // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n                    //\n                    const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n                    jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n                    jumps[openerIdx] = lastJump;\n                    closer.open = false;\n                    opener.end = closerIdx;\n                    opener.close = false;\n                    newMinOpenerIdx = -1;\n                    // treat next token as start of run,\n                    // it optimizes skips in **<...>**a**<...>** pathological case\n                    lastTokenIdx = -2;\n                    break;\n                }\n            }\n        }\n        if (newMinOpenerIdx !== -1) // If match for this delimiter run failed, we want to set lower bound for\n        // future lookups. This is required to make sure algorithm has linear\n        // complexity.\n        //\n        // See details here:\n        // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n        //\n        openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n    }\n}\nfunction $86b620d722e5f8d3$export$2e2bcd8739ae039(state) {\n    const tokens_meta = state.tokens_meta;\n    const max = state.tokens_meta.length;\n    $86b620d722e5f8d3$var$processDelimiters(state.delimiters);\n    for(let curr = 0; curr < max; curr++)if (tokens_meta[curr] && tokens_meta[curr].delimiters) $86b620d722e5f8d3$var$processDelimiters(tokens_meta[curr].delimiters);\n}\n\n\n// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\nfunction $657f3da74a75df34$export$2e2bcd8739ae039(state) {\n    let curr, last;\n    let level = 0;\n    const tokens = state.tokens;\n    const max = state.tokens.length;\n    for(curr = last = 0; curr < max; curr++){\n        // re-calculate levels after emphasis/strikethrough turns some text nodes\n        // into opening/closing tags\n        if (tokens[curr].nesting < 0) level-- // closing tag\n        ;\n        tokens[curr].level = level;\n        if (tokens[curr].nesting > 0) level++ // opening tag\n        ;\n        if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n        else {\n            if (curr !== last) tokens[last] = tokens[curr];\n            last++;\n        }\n    }\n    if (curr !== last) tokens.length = last;\n}\n\n\n// Parser rules\nconst $086c870d02d0d269$var$_rules = [\n    [\n        'text',\n        (0, $52dad52dbdb68874$export$2e2bcd8739ae039)\n    ],\n    [\n        'linkify',\n        (0, $d922190b2670a68c$export$2e2bcd8739ae039)\n    ],\n    [\n        'newline',\n        (0, $4da0439b0e5b89ea$export$2e2bcd8739ae039)\n    ],\n    [\n        'escape',\n        (0, $b91dce80827c08a1$export$2e2bcd8739ae039)\n    ],\n    [\n        'backticks',\n        (0, $b39c44d4094d07d3$export$2e2bcd8739ae039)\n    ],\n    [\n        'strikethrough',\n        (0, $c4e44d3b61071958$export$2e2bcd8739ae039).tokenize\n    ],\n    [\n        'emphasis',\n        (0, $354922e1ef651ea3$export$2e2bcd8739ae039).tokenize\n    ],\n    [\n        'link',\n        (0, $019ddf5760813e0c$export$2e2bcd8739ae039)\n    ],\n    [\n        'image',\n        (0, $f2e767ae90fa58fa$export$2e2bcd8739ae039)\n    ],\n    [\n        'autolink',\n        (0, $38fe1de13dbca06b$export$2e2bcd8739ae039)\n    ],\n    [\n        'html_inline',\n        (0, $c398d6df9e0474f7$export$2e2bcd8739ae039)\n    ],\n    [\n        'entity',\n        (0, $2605af2f776ac07c$export$2e2bcd8739ae039)\n    ]\n];\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst $086c870d02d0d269$var$_rules2 = [\n    [\n        'balance_pairs',\n        (0, $86b620d722e5f8d3$export$2e2bcd8739ae039)\n    ],\n    [\n        'strikethrough',\n        (0, $c4e44d3b61071958$export$2e2bcd8739ae039).postProcess\n    ],\n    [\n        'emphasis',\n        (0, $354922e1ef651ea3$export$2e2bcd8739ae039).postProcess\n    ],\n    // rules for pairs separate '**' into its own text tokens, which may be left unused,\n    // rule below merges unused segments back with the rest of the text\n    [\n        'fragments_join',\n        (0, $657f3da74a75df34$export$2e2bcd8739ae039)\n    ]\n];\n/**\n * new ParserInline()\n **/ function $086c870d02d0d269$var$ParserInline() {\n    /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/ this.ruler = new (0, $41ea3ea6c70806b8$export$2e2bcd8739ae039)();\n    for(let i = 0; i < $086c870d02d0d269$var$_rules.length; i++)this.ruler.push($086c870d02d0d269$var$_rules[i][0], $086c870d02d0d269$var$_rules[i][1]);\n    /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/ this.ruler2 = new (0, $41ea3ea6c70806b8$export$2e2bcd8739ae039)();\n    for(let i = 0; i < $086c870d02d0d269$var$_rules2.length; i++)this.ruler2.push($086c870d02d0d269$var$_rules2[i][0], $086c870d02d0d269$var$_rules2[i][1]);\n}\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\n$086c870d02d0d269$var$ParserInline.prototype.skipToken = function(state) {\n    const pos = state.pos;\n    const rules = this.ruler.getRules('');\n    const len = rules.length;\n    const maxNesting = state.md.options.maxNesting;\n    const cache = state.cache;\n    if (typeof cache[pos] !== 'undefined') {\n        state.pos = cache[pos];\n        return;\n    }\n    let ok = false;\n    if (state.level < maxNesting) for(let i = 0; i < len; i++){\n        // Increment state.level and decrement it later to limit recursion.\n        // It's harmless to do here, because no tokens are created. But ideally,\n        // we'd need a separate private state variable for this purpose.\n        //\n        state.level++;\n        ok = rules[i](state, true);\n        state.level--;\n        if (ok) {\n            if (pos >= state.pos) throw new Error(\"inline rule didn't increment state.pos\");\n            break;\n        }\n    }\n    else // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n    if (!ok) state.pos++;\n    cache[pos] = state.pos;\n};\n// Generate tokens for input range\n//\n$086c870d02d0d269$var$ParserInline.prototype.tokenize = function(state) {\n    const rules = this.ruler.getRules('');\n    const len = rules.length;\n    const end = state.posMax;\n    const maxNesting = state.md.options.maxNesting;\n    while(state.pos < end){\n        // Try all possible rules.\n        // On success, rule should:\n        //\n        // - update `state.pos`\n        // - update `state.tokens`\n        // - return true\n        const prevPos = state.pos;\n        let ok = false;\n        if (state.level < maxNesting) for(let i = 0; i < len; i++){\n            ok = rules[i](state, false);\n            if (ok) {\n                if (prevPos >= state.pos) throw new Error(\"inline rule didn't increment state.pos\");\n                break;\n            }\n        }\n        if (ok) {\n            if (state.pos >= end) break;\n            continue;\n        }\n        state.pending += state.src[state.pos++];\n    }\n    if (state.pending) state.pushPending();\n};\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/ $086c870d02d0d269$var$ParserInline.prototype.parse = function(str, md, env, outTokens) {\n    const state = new this.State(str, md, env, outTokens);\n    this.tokenize(state);\n    const rules = this.ruler2.getRules('');\n    const len = rules.length;\n    for(let i = 0; i < len; i++)rules[i](state);\n};\n$086c870d02d0d269$var$ParserInline.prototype.State = (0, $78766ebe20d230e1$export$2e2bcd8739ae039);\nvar $086c870d02d0d269$export$2e2bcd8739ae039 = $086c870d02d0d269$var$ParserInline;\n\n\n\nfunction $8395954499c294bc$export$2e2bcd8739ae039(opts) {\n    const re = {};\n    opts = opts || {};\n    re.src_Any = (0, $cbc832af4f488565$export$2e2bcd8739ae039).source;\n    re.src_Cc = (0, $c23f5f283a1bf321$export$2e2bcd8739ae039).source;\n    re.src_Z = (0, $df20dc3bfc54166a$export$2e2bcd8739ae039).source;\n    re.src_P = (0, $e24366eb89af439c$export$2e2bcd8739ae039).source;\n    // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n    re.src_ZPCc = [\n        re.src_Z,\n        re.src_P,\n        re.src_Cc\n    ].join('|');\n    // \\p{\\Z\\Cc} (white spaces + control)\n    re.src_ZCc = [\n        re.src_Z,\n        re.src_Cc\n    ].join('|');\n    // Experimental. List of chars, completely prohibited in links\n    // because can separate it from other part of text\n    const text_separators = '[><\\uff5c]';\n    // All possible word characters (everything without punctuation, spaces & controls)\n    // Defined via punctuation & spaces to save space\n    // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n    re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n    // The same as abothe but without [0-9]\n    // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n    re.src_ip4 = '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n    // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n    re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n    re.src_port = '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n    re.src_host_terminator = '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' + '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n    re.src_path = \"(?:[/?#](?:(?!\" + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' + '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' + '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' + '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' + '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' + \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" + // allow `I'm_king` if no pair found\n    \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' + // google has many dots in \"google search\" links (#66, #81).\n    // github has ... in commit range links,\n    // Restrict to\n    // - english\n    // - percent-encoded\n    // - parts of file path\n    // - params separator\n    // until more examples found.\n    '\\\\.{2,}[a-zA-Z0-9%/&]|' + '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' + (opts['---'] ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n     : '\\\\-+|') + // allow `,,,` in paths\n    ',(?!' + re.src_ZCc + '|$)|' + // allow `;` if not followed by space-like char\n    ';(?!' + re.src_ZCc + '|$)|' + // allow `!!!` in paths, but not at the end\n    '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' + '\\\\?(?!' + re.src_ZCc + '|[?]|$)' + ')+' + '|\\\\/' + ')?';\n    // Allow anything in markdown spec, forbid quote (\") at the first position\n    // because emails enclosed in quotes are far more common\n    re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n    re.src_xn = 'xn--[a-z0-9\\\\-]{1,59}';\n    // More to read about domain names\n    // http://serverfault.com/questions/638260/\n    re.src_domain_root = // Allow letters & digits (http://test1)\n    '(?:' + re.src_xn + '|' + re.src_pseudo_letter + '{1,63}' + ')';\n    re.src_domain = '(?:' + re.src_xn + '|' + '(?:' + re.src_pseudo_letter + ')' + '|' + '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' + ')';\n    re.src_host = \"(?:(?:(?:(?:\" + re.src_domain + ')\\\\.)*' + re.src_domain /* _root */  + ')' + ')';\n    re.tpl_host_fuzzy = '(?:' + re.src_ip4 + '|' + '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' + ')';\n    re.tpl_host_no_ip_fuzzy = '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n    re.src_host_strict = re.src_host + re.src_host_terminator;\n    re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n    re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n    re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n    re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n    //\n    // Main rules\n    //\n    // Rude test fuzzy links by host, for quick deny\n    re.tpl_host_fuzzy_test = 'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n    re.tpl_email_fuzzy = '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' + '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n    re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n    // but can start with > (markdown blockquote)\n    '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n    re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n    // but can start with > (markdown blockquote)\n    '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n    return re;\n}\n\n\n//\n// Helpers\n//\n// Merge objects\n//\nfunction $fdfb0b45a2ba540e$var$assign(obj /* from1, from2, from3, ... */ ) {\n    const sources = Array.prototype.slice.call(arguments, 1);\n    sources.forEach(function(source) {\n        if (!source) return;\n        Object.keys(source).forEach(function(key) {\n            obj[key] = source[key];\n        });\n    });\n    return obj;\n}\nfunction $fdfb0b45a2ba540e$var$_class(obj) {\n    return Object.prototype.toString.call(obj);\n}\nfunction $fdfb0b45a2ba540e$var$isString(obj) {\n    return $fdfb0b45a2ba540e$var$_class(obj) === '[object String]';\n}\nfunction $fdfb0b45a2ba540e$var$isObject(obj) {\n    return $fdfb0b45a2ba540e$var$_class(obj) === '[object Object]';\n}\nfunction $fdfb0b45a2ba540e$var$isRegExp(obj) {\n    return $fdfb0b45a2ba540e$var$_class(obj) === '[object RegExp]';\n}\nfunction $fdfb0b45a2ba540e$var$isFunction(obj) {\n    return $fdfb0b45a2ba540e$var$_class(obj) === '[object Function]';\n}\nfunction $fdfb0b45a2ba540e$var$escapeRE(str) {\n    return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n}\n//\nconst $fdfb0b45a2ba540e$var$defaultOptions = {\n    fuzzyLink: true,\n    fuzzyEmail: true,\n    fuzzyIP: false\n};\nfunction $fdfb0b45a2ba540e$var$isOptionsObj(obj) {\n    return Object.keys(obj || {}).reduce(function(acc, k) {\n        /* eslint-disable-next-line no-prototype-builtins */ return acc || $fdfb0b45a2ba540e$var$defaultOptions.hasOwnProperty(k);\n    }, false);\n}\nconst $fdfb0b45a2ba540e$var$defaultSchemas = {\n    'http:': {\n        validate: function(text, pos, self) {\n            const tail = text.slice(pos);\n            if (!self.re.http) // compile lazily, because \"host\"-containing variables can change on tlds update.\n            self.re.http = new RegExp('^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');\n            if (self.re.http.test(tail)) return tail.match(self.re.http)[0].length;\n            return 0;\n        }\n    },\n    'https:': 'http:',\n    'ftp:': 'http:',\n    '//': {\n        validate: function(text, pos, self) {\n            const tail = text.slice(pos);\n            if (!self.re.no_http) // compile lazily, because \"host\"-containing variables can change on tlds update.\n            self.re.no_http = new RegExp('^' + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'\n            // with code comments\n            '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');\n            if (self.re.no_http.test(tail)) {\n                // should not be `://` & `///`, that protects from errors in protocol name\n                if (pos >= 3 && text[pos - 3] === ':') return 0;\n                if (pos >= 3 && text[pos - 3] === '/') return 0;\n                return tail.match(self.re.no_http)[0].length;\n            }\n            return 0;\n        }\n    },\n    'mailto:': {\n        validate: function(text, pos, self) {\n            const tail = text.slice(pos);\n            if (!self.re.mailto) self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');\n            if (self.re.mailto.test(tail)) return tail.match(self.re.mailto)[0].length;\n            return 0;\n        }\n    }\n};\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */ const $fdfb0b45a2ba540e$var$tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst $fdfb0b45a2ba540e$var$tlds_default = \"biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\\u0440\\u0444\".split('|');\nfunction $fdfb0b45a2ba540e$var$resetScanCache(self) {\n    self.__index__ = -1;\n    self.__text_cache__ = '';\n}\nfunction $fdfb0b45a2ba540e$var$createValidator(re) {\n    return function(text, pos) {\n        const tail = text.slice(pos);\n        if (re.test(tail)) return tail.match(re)[0].length;\n        return 0;\n    };\n}\nfunction $fdfb0b45a2ba540e$var$createNormalizer() {\n    return function(match, self) {\n        self.normalize(match);\n    };\n}\n// Schemas compiler. Build regexps.\n//\nfunction $fdfb0b45a2ba540e$var$compile(self) {\n    // Load & clone RE patterns.\n    const re = self.re = (0, $8395954499c294bc$export$2e2bcd8739ae039)(self.__opts__);\n    // Define dynamic patterns\n    const tlds = self.__tlds__.slice();\n    self.onCompile();\n    if (!self.__tlds_replaced__) tlds.push($fdfb0b45a2ba540e$var$tlds_2ch_src_re);\n    tlds.push(re.src_xn);\n    re.src_tlds = tlds.join('|');\n    function untpl(tpl) {\n        return tpl.replace('%TLDS%', re.src_tlds);\n    }\n    re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n    re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n    re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n    re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n    //\n    // Compile each schema\n    //\n    const aliases = [];\n    self.__compiled__ = {} // Reset compiled data\n    ;\n    function schemaError(name, val) {\n        throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n    }\n    Object.keys(self.__schemas__).forEach(function(name) {\n        const val = self.__schemas__[name];\n        // skip disabled methods\n        if (val === null) return;\n        const compiled = {\n            validate: null,\n            link: null\n        };\n        self.__compiled__[name] = compiled;\n        if ($fdfb0b45a2ba540e$var$isObject(val)) {\n            if ($fdfb0b45a2ba540e$var$isRegExp(val.validate)) compiled.validate = $fdfb0b45a2ba540e$var$createValidator(val.validate);\n            else if ($fdfb0b45a2ba540e$var$isFunction(val.validate)) compiled.validate = val.validate;\n            else schemaError(name, val);\n            if ($fdfb0b45a2ba540e$var$isFunction(val.normalize)) compiled.normalize = val.normalize;\n            else if (!val.normalize) compiled.normalize = $fdfb0b45a2ba540e$var$createNormalizer();\n            else schemaError(name, val);\n            return;\n        }\n        if ($fdfb0b45a2ba540e$var$isString(val)) {\n            aliases.push(name);\n            return;\n        }\n        schemaError(name, val);\n    });\n    //\n    // Compile postponed aliases\n    //\n    aliases.forEach(function(alias) {\n        if (!self.__compiled__[self.__schemas__[alias]]) // Silently fail on missed schemas to avoid errons on disable.\n        // schemaError(alias, self.__schemas__[alias]);\n        return;\n        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n    });\n    //\n    // Fake record for guessed links\n    //\n    self.__compiled__[''] = {\n        validate: null,\n        normalize: $fdfb0b45a2ba540e$var$createNormalizer()\n    };\n    //\n    // Build schema condition\n    //\n    const slist = Object.keys(self.__compiled__).filter(function(name) {\n        // Filter disabled & fake schemas\n        return name.length > 0 && self.__compiled__[name];\n    }).map($fdfb0b45a2ba540e$var$escapeRE).join('|');\n    // (?!_) cause 1.5x slowdown\n    self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n    self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n    self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n    self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i');\n    //\n    // Cleanup\n    //\n    $fdfb0b45a2ba540e$var$resetScanCache(self);\n}\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/ function $fdfb0b45a2ba540e$var$Match(self, shift) {\n    const start = self.__index__;\n    const end = self.__last_index__;\n    const text = self.__text_cache__.slice(start, end);\n    /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/ this.schema = self.__schema__.toLowerCase();\n    /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/ this.index = start + shift;\n    /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/ this.lastIndex = end + shift;\n    /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/ this.raw = text;\n    /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/ this.text = text;\n    /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/ this.url = text;\n}\nfunction $fdfb0b45a2ba540e$var$createMatch(self, shift) {\n    const match = new $fdfb0b45a2ba540e$var$Match(self, shift);\n    self.__compiled__[match.schema].normalize(match, self);\n    return match;\n}\n/**\n * class LinkifyIt\n **/ /**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/ function $fdfb0b45a2ba540e$var$LinkifyIt(schemas, options) {\n    if (!(this instanceof $fdfb0b45a2ba540e$var$LinkifyIt)) return new $fdfb0b45a2ba540e$var$LinkifyIt(schemas, options);\n    if (!options) {\n        if ($fdfb0b45a2ba540e$var$isOptionsObj(schemas)) {\n            options = schemas;\n            schemas = {};\n        }\n    }\n    this.__opts__ = $fdfb0b45a2ba540e$var$assign({}, $fdfb0b45a2ba540e$var$defaultOptions, options);\n    // Cache last tested result. Used to skip repeating steps on next `match` call.\n    this.__index__ = -1;\n    this.__last_index__ = -1 // Next scan position\n    ;\n    this.__schema__ = '';\n    this.__text_cache__ = '';\n    this.__schemas__ = $fdfb0b45a2ba540e$var$assign({}, $fdfb0b45a2ba540e$var$defaultSchemas, schemas);\n    this.__compiled__ = {};\n    this.__tlds__ = $fdfb0b45a2ba540e$var$tlds_default;\n    this.__tlds_replaced__ = false;\n    this.re = {};\n    $fdfb0b45a2ba540e$var$compile(this);\n}\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.add = function add(schema, definition) {\n    this.__schemas__[schema] = definition;\n    $fdfb0b45a2ba540e$var$compile(this);\n    return this;\n};\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.set = function set(options) {\n    this.__opts__ = $fdfb0b45a2ba540e$var$assign(this.__opts__, options);\n    return this;\n};\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.test = function test(text) {\n    // Reset scan cache\n    this.__text_cache__ = text;\n    this.__index__ = -1;\n    if (!text.length) return false;\n    let m, ml, me, len, shift, next, re, tld_pos, at_pos;\n    // try to scan for link with schema - that's the most simple rule\n    if (this.re.schema_test.test(text)) {\n        re = this.re.schema_search;\n        re.lastIndex = 0;\n        while((m = re.exec(text)) !== null){\n            len = this.testSchemaAt(text, m[2], re.lastIndex);\n            if (len) {\n                this.__schema__ = m[2];\n                this.__index__ = m.index + m[1].length;\n                this.__last_index__ = m.index + m[0].length + len;\n                break;\n            }\n        }\n    }\n    if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n        // guess schemaless links\n        tld_pos = text.search(this.re.host_fuzzy_test);\n        if (tld_pos >= 0) {\n            // if tld is located after found link - no need to check fuzzy pattern\n            if (this.__index__ < 0 || tld_pos < this.__index__) {\n                if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n                    shift = ml.index + ml[1].length;\n                    if (this.__index__ < 0 || shift < this.__index__) {\n                        this.__schema__ = '';\n                        this.__index__ = shift;\n                        this.__last_index__ = ml.index + ml[0].length;\n                    }\n                }\n            }\n        }\n    }\n    if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n        // guess schemaless emails\n        at_pos = text.indexOf('@');\n        if (at_pos >= 0) // We can't skip this check, because this cases are possible:\n        // 192.168.1.1@gmail.com, my.in@example.com\n        {\n            if ((me = text.match(this.re.email_fuzzy)) !== null) {\n                shift = me.index + me[1].length;\n                next = me.index + me[0].length;\n                if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n                    this.__schema__ = 'mailto:';\n                    this.__index__ = shift;\n                    this.__last_index__ = next;\n                }\n            }\n        }\n    }\n    return this.__index__ >= 0;\n};\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.pretest = function pretest(text) {\n    return this.re.pretest.test(text);\n};\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n    // If not supported schema check requested - terminate\n    if (!this.__compiled__[schema.toLowerCase()]) return 0;\n    return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.match = function match(text) {\n    const result = [];\n    let shift = 0;\n    // Try to take previous element from cache, if .test() called before\n    if (this.__index__ >= 0 && this.__text_cache__ === text) {\n        result.push($fdfb0b45a2ba540e$var$createMatch(this, shift));\n        shift = this.__last_index__;\n    }\n    // Cut head if cache was used\n    let tail = shift ? text.slice(shift) : text;\n    // Scan string until end reached\n    while(this.test(tail)){\n        result.push($fdfb0b45a2ba540e$var$createMatch(this, shift));\n        tail = tail.slice(this.__last_index__);\n        shift += this.__last_index__;\n    }\n    if (result.length) return result;\n    return null;\n};\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n    // Reset scan cache\n    this.__text_cache__ = text;\n    this.__index__ = -1;\n    if (!text.length) return null;\n    const m = this.re.schema_at_start.exec(text);\n    if (!m) return null;\n    const len = this.testSchemaAt(text, m[2], m[0].length);\n    if (!len) return null;\n    this.__schema__ = m[2];\n    this.__index__ = m.index + m[1].length;\n    this.__last_index__ = m.index + m[0].length + len;\n    return $fdfb0b45a2ba540e$var$createMatch(this, 0);\n};\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n    list = Array.isArray(list) ? list : [\n        list\n    ];\n    if (!keepOld) {\n        this.__tlds__ = list.slice();\n        this.__tlds_replaced__ = true;\n        $fdfb0b45a2ba540e$var$compile(this);\n        return this;\n    }\n    this.__tlds__ = this.__tlds__.concat(list).sort().filter(function(el, idx, arr) {\n        return el !== arr[idx - 1];\n    }).reverse();\n    $fdfb0b45a2ba540e$var$compile(this);\n    return this;\n};\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.normalize = function normalize(match) {\n    // Do minimal possible changes by default. Need to collect feedback prior\n    // to move forward https://github.com/markdown-it/linkify-it/issues/1\n    if (!match.schema) match.url = 'http://' + match.url;\n    if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) match.url = 'mailto:' + match.url;\n};\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/ $fdfb0b45a2ba540e$var$LinkifyIt.prototype.onCompile = function onCompile() {};\nvar $fdfb0b45a2ba540e$export$2e2bcd8739ae039 = $fdfb0b45a2ba540e$var$LinkifyIt;\n\n\n\n'use strict';\n/** Highest positive signed 32-bit float value */ const $cc1c99c5745bccf3$var$maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n/** Bootstring parameters */ const $cc1c99c5745bccf3$var$base = 36;\nconst $cc1c99c5745bccf3$var$tMin = 1;\nconst $cc1c99c5745bccf3$var$tMax = 26;\nconst $cc1c99c5745bccf3$var$skew = 38;\nconst $cc1c99c5745bccf3$var$damp = 700;\nconst $cc1c99c5745bccf3$var$initialBias = 72;\nconst $cc1c99c5745bccf3$var$initialN = 128; // 0x80\nconst $cc1c99c5745bccf3$var$delimiter = '-'; // '\\x2D'\n/** Regular expressions */ const $cc1c99c5745bccf3$var$regexPunycode = /^xn--/;\nconst $cc1c99c5745bccf3$var$regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst $cc1c99c5745bccf3$var$regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n/** Error messages */ const $cc1c99c5745bccf3$var$errors = {\n    'overflow': 'Overflow: input needs wider integers to process',\n    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n    'invalid-input': 'Invalid input'\n};\n/** Convenience shortcuts */ const $cc1c99c5745bccf3$var$baseMinusTMin = $cc1c99c5745bccf3$var$base - $cc1c99c5745bccf3$var$tMin;\nconst $cc1c99c5745bccf3$var$floor = Math.floor;\nconst $cc1c99c5745bccf3$var$stringFromCharCode = String.fromCharCode;\n/*--------------------------------------------------------------------------*/ /**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */ function $cc1c99c5745bccf3$var$error(type) {\n    throw new RangeError($cc1c99c5745bccf3$var$errors[type]);\n}\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */ function $cc1c99c5745bccf3$var$map(array, callback) {\n    const result = [];\n    let length = array.length;\n    while(length--)result[length] = callback(array[length]);\n    return result;\n}\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */ function $cc1c99c5745bccf3$var$mapDomain(domain, callback) {\n    const parts = domain.split('@');\n    let result = '';\n    if (parts.length > 1) {\n        // In email addresses, only the domain name should be punycoded. Leave\n        // the local part (i.e. everything up to `@`) intact.\n        result = parts[0] + '@';\n        domain = parts[1];\n    }\n    // Avoid `split(regex)` for IE8 compatibility. See #17.\n    domain = domain.replace($cc1c99c5745bccf3$var$regexSeparators, '\\x2E');\n    const labels = domain.split('.');\n    const encoded = $cc1c99c5745bccf3$var$map(labels, callback).join('.');\n    return result + encoded;\n}\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */ function $cc1c99c5745bccf3$export$c1700176c90f250f(string) {\n    const output = [];\n    let counter = 0;\n    const length = string.length;\n    while(counter < length){\n        const value = string.charCodeAt(counter++);\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            // It's a high surrogate, and there is a next character.\n            const extra = string.charCodeAt(counter++);\n            if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n            else {\n                // It's an unmatched surrogate; only append this code unit, in case the\n                // next code unit is the high surrogate of a surrogate pair.\n                output.push(value);\n                counter--;\n            }\n        } else output.push(value);\n    }\n    return output;\n}\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */ const $cc1c99c5745bccf3$export$f999239d9b149395 = (codePoints)=>String.fromCodePoint(...codePoints);\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */ const $cc1c99c5745bccf3$var$basicToDigit = function(codePoint) {\n    if (codePoint >= 0x30 && codePoint < 0x3A) return 26 + (codePoint - 0x30);\n    if (codePoint >= 0x41 && codePoint < 0x5B) return codePoint - 0x41;\n    if (codePoint >= 0x61 && codePoint < 0x7B) return codePoint - 0x61;\n    return $cc1c99c5745bccf3$var$base;\n};\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */ const $cc1c99c5745bccf3$var$digitToBasic = function(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */ const $cc1c99c5745bccf3$var$adapt = function(delta, numPoints, firstTime) {\n    let k = 0;\n    delta = firstTime ? $cc1c99c5745bccf3$var$floor(delta / $cc1c99c5745bccf3$var$damp) : delta >> 1;\n    delta += $cc1c99c5745bccf3$var$floor(delta / numPoints);\n    for(; delta > $cc1c99c5745bccf3$var$baseMinusTMin * $cc1c99c5745bccf3$var$tMax >> 1; k += $cc1c99c5745bccf3$var$base)delta = $cc1c99c5745bccf3$var$floor(delta / $cc1c99c5745bccf3$var$baseMinusTMin);\n    return $cc1c99c5745bccf3$var$floor(k + ($cc1c99c5745bccf3$var$baseMinusTMin + 1) * delta / (delta + $cc1c99c5745bccf3$var$skew));\n};\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */ const $cc1c99c5745bccf3$export$2f872c0f2117be69 = function(input) {\n    // Don't use UCS-2.\n    const output = [];\n    const inputLength = input.length;\n    let i = 0;\n    let n = $cc1c99c5745bccf3$var$initialN;\n    let bias = $cc1c99c5745bccf3$var$initialBias;\n    // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n    let basic = input.lastIndexOf($cc1c99c5745bccf3$var$delimiter);\n    if (basic < 0) basic = 0;\n    for(let j = 0; j < basic; ++j){\n        // if it's not a basic code point\n        if (input.charCodeAt(j) >= 0x80) $cc1c99c5745bccf3$var$error('not-basic');\n        output.push(input.charCodeAt(j));\n    }\n    // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n    for(let index = basic > 0 ? basic + 1 : 0; index < inputLength;){\n        // `index` is the index of the next character to be consumed.\n        // Decode a generalized variable-length integer into `delta`,\n        // which gets added to `i`. The overflow checking is easier\n        // if we increase `i` as we go, then subtract off its starting\n        // value at the end to obtain `delta`.\n        const oldi = i;\n        for(let w = 1, k = $cc1c99c5745bccf3$var$base;; k += $cc1c99c5745bccf3$var$base){\n            if (index >= inputLength) $cc1c99c5745bccf3$var$error('invalid-input');\n            const digit = $cc1c99c5745bccf3$var$basicToDigit(input.charCodeAt(index++));\n            if (digit >= $cc1c99c5745bccf3$var$base) $cc1c99c5745bccf3$var$error('invalid-input');\n            if (digit > $cc1c99c5745bccf3$var$floor(($cc1c99c5745bccf3$var$maxInt - i) / w)) $cc1c99c5745bccf3$var$error('overflow');\n            i += digit * w;\n            const t = k <= bias ? $cc1c99c5745bccf3$var$tMin : k >= bias + $cc1c99c5745bccf3$var$tMax ? $cc1c99c5745bccf3$var$tMax : k - bias;\n            if (digit < t) break;\n            const baseMinusT = $cc1c99c5745bccf3$var$base - t;\n            if (w > $cc1c99c5745bccf3$var$floor($cc1c99c5745bccf3$var$maxInt / baseMinusT)) $cc1c99c5745bccf3$var$error('overflow');\n            w *= baseMinusT;\n        }\n        const out = output.length + 1;\n        bias = $cc1c99c5745bccf3$var$adapt(i - oldi, out, oldi == 0);\n        // `i` was supposed to wrap around from `out` to `0`,\n        // incrementing `n` each time, so we'll fix that now:\n        if ($cc1c99c5745bccf3$var$floor(i / out) > $cc1c99c5745bccf3$var$maxInt - n) $cc1c99c5745bccf3$var$error('overflow');\n        n += $cc1c99c5745bccf3$var$floor(i / out);\n        i %= out;\n        // Insert `n` at position `i` of the output.\n        output.splice(i++, 0, n);\n    }\n    return String.fromCodePoint(...output);\n};\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */ const $cc1c99c5745bccf3$export$c564cdbbe6da493 = function(input) {\n    const output = [];\n    // Convert the input in UCS-2 to an array of Unicode code points.\n    input = $cc1c99c5745bccf3$export$c1700176c90f250f(input);\n    // Cache the length.\n    const inputLength = input.length;\n    // Initialize the state.\n    let n = $cc1c99c5745bccf3$var$initialN;\n    let delta = 0;\n    let bias = $cc1c99c5745bccf3$var$initialBias;\n    // Handle the basic code points.\n    for (const currentValue of input)if (currentValue < 0x80) output.push($cc1c99c5745bccf3$var$stringFromCharCode(currentValue));\n    const basicLength = output.length;\n    let handledCPCount = basicLength;\n    // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n    // Finish the basic string with a delimiter unless it's empty.\n    if (basicLength) output.push($cc1c99c5745bccf3$var$delimiter);\n    // Main encoding loop:\n    while(handledCPCount < inputLength){\n        // All non-basic code points < n have been handled already. Find the next\n        // larger one:\n        let m = $cc1c99c5745bccf3$var$maxInt;\n        for (const currentValue of input)if (currentValue >= n && currentValue < m) m = currentValue;\n        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n        // but guard against overflow.\n        const handledCPCountPlusOne = handledCPCount + 1;\n        if (m - n > $cc1c99c5745bccf3$var$floor(($cc1c99c5745bccf3$var$maxInt - delta) / handledCPCountPlusOne)) $cc1c99c5745bccf3$var$error('overflow');\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n        for (const currentValue of input){\n            if (currentValue < n && ++delta > $cc1c99c5745bccf3$var$maxInt) $cc1c99c5745bccf3$var$error('overflow');\n            if (currentValue === n) {\n                // Represent delta as a generalized variable-length integer.\n                let q = delta;\n                for(let k = $cc1c99c5745bccf3$var$base;; k += $cc1c99c5745bccf3$var$base){\n                    const t = k <= bias ? $cc1c99c5745bccf3$var$tMin : k >= bias + $cc1c99c5745bccf3$var$tMax ? $cc1c99c5745bccf3$var$tMax : k - bias;\n                    if (q < t) break;\n                    const qMinusT = q - t;\n                    const baseMinusT = $cc1c99c5745bccf3$var$base - t;\n                    output.push($cc1c99c5745bccf3$var$stringFromCharCode($cc1c99c5745bccf3$var$digitToBasic(t + qMinusT % baseMinusT, 0)));\n                    q = $cc1c99c5745bccf3$var$floor(qMinusT / baseMinusT);\n                }\n                output.push($cc1c99c5745bccf3$var$stringFromCharCode($cc1c99c5745bccf3$var$digitToBasic(q, 0)));\n                bias = $cc1c99c5745bccf3$var$adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n                delta = 0;\n                ++handledCPCount;\n            }\n        }\n        ++delta;\n        ++n;\n    }\n    return output.join('');\n};\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */ const $cc1c99c5745bccf3$export$110c810e8727e62b = function(input) {\n    return $cc1c99c5745bccf3$var$mapDomain(input, function(string) {\n        return $cc1c99c5745bccf3$var$regexPunycode.test(string) ? $cc1c99c5745bccf3$export$2f872c0f2117be69(string.slice(4).toLowerCase()) : string;\n    });\n};\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */ const $cc1c99c5745bccf3$export$69111c4ea6e0c4a0 = function(input) {\n    return $cc1c99c5745bccf3$var$mapDomain(input, function(string) {\n        return $cc1c99c5745bccf3$var$regexNonASCII.test(string) ? 'xn--' + $cc1c99c5745bccf3$export$c564cdbbe6da493(string) : string;\n    });\n};\n/*--------------------------------------------------------------------------*/ /** Define the public API */ const $cc1c99c5745bccf3$var$punycode = {\n    /**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */ 'version': '2.3.1',\n    /**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */ 'ucs2': {\n        'decode': $cc1c99c5745bccf3$export$c1700176c90f250f,\n        'encode': $cc1c99c5745bccf3$export$f999239d9b149395\n    },\n    'decode': $cc1c99c5745bccf3$export$2f872c0f2117be69,\n    'encode': $cc1c99c5745bccf3$export$c564cdbbe6da493,\n    'toASCII': $cc1c99c5745bccf3$export$69111c4ea6e0c4a0,\n    'toUnicode': $cc1c99c5745bccf3$export$110c810e8727e62b\n};\nvar $cc1c99c5745bccf3$export$2e2bcd8739ae039 = $cc1c99c5745bccf3$var$punycode;\n\n\n// markdown-it default options\nvar $3fe4a7f778f0f36e$export$2e2bcd8739ae039 = {\n    options: {\n        // Enable HTML tags in source\n        html: false,\n        // Use '/' to close single tags (<br />)\n        xhtmlOut: false,\n        // Convert '\\n' in paragraphs into <br>\n        breaks: false,\n        // CSS language prefix for fenced blocks\n        langPrefix: 'language-',\n        // autoconvert URL-like texts to links\n        linkify: false,\n        // Enable some language-neutral replacements + quotes beautification\n        typographer: false,\n        // Double + single quotes replacement pairs, when typographer enabled,\n        // and smartquotes on. Could be either a String or an Array.\n        //\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n        quotes: '\\u201c\\u201d\\u2018\\u2019',\n        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n        // or '' if the source string is not changed and should be escaped externaly.\n        // If result starts with <pre... internal wrapper is skipped.\n        //\n        // function (/*str, lang*/) { return ''; }\n        //\n        highlight: null,\n        // Internal protection, recursion limit\n        maxNesting: 100\n    },\n    components: {\n        core: {},\n        block: {},\n        inline: {}\n    }\n};\n\n\n// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\nvar $d8eecf2af6991231$export$2e2bcd8739ae039 = {\n    options: {\n        // Enable HTML tags in source\n        html: false,\n        // Use '/' to close single tags (<br />)\n        xhtmlOut: false,\n        // Convert '\\n' in paragraphs into <br>\n        breaks: false,\n        // CSS language prefix for fenced blocks\n        langPrefix: 'language-',\n        // autoconvert URL-like texts to links\n        linkify: false,\n        // Enable some language-neutral replacements + quotes beautification\n        typographer: false,\n        // Double + single quotes replacement pairs, when typographer enabled,\n        // and smartquotes on. Could be either a String or an Array.\n        //\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n        quotes: '\\u201c\\u201d\\u2018\\u2019',\n        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n        // or '' if the source string is not changed and should be escaped externaly.\n        // If result starts with <pre... internal wrapper is skipped.\n        //\n        // function (/*str, lang*/) { return ''; }\n        //\n        highlight: null,\n        // Internal protection, recursion limit\n        maxNesting: 20\n    },\n    components: {\n        core: {\n            rules: [\n                'normalize',\n                'block',\n                'inline',\n                'text_join'\n            ]\n        },\n        block: {\n            rules: [\n                'paragraph'\n            ]\n        },\n        inline: {\n            rules: [\n                'text'\n            ],\n            rules2: [\n                'balance_pairs',\n                'fragments_join'\n            ]\n        }\n    }\n};\n\n\n// Commonmark default options\nvar $b06235d334be6c3f$export$2e2bcd8739ae039 = {\n    options: {\n        // Enable HTML tags in source\n        html: true,\n        // Use '/' to close single tags (<br />)\n        xhtmlOut: true,\n        // Convert '\\n' in paragraphs into <br>\n        breaks: false,\n        // CSS language prefix for fenced blocks\n        langPrefix: 'language-',\n        // autoconvert URL-like texts to links\n        linkify: false,\n        // Enable some language-neutral replacements + quotes beautification\n        typographer: false,\n        // Double + single quotes replacement pairs, when typographer enabled,\n        // and smartquotes on. Could be either a String or an Array.\n        //\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n        quotes: '\\u201c\\u201d\\u2018\\u2019',\n        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n        // or '' if the source string is not changed and should be escaped externaly.\n        // If result starts with <pre... internal wrapper is skipped.\n        //\n        // function (/*str, lang*/) { return ''; }\n        //\n        highlight: null,\n        // Internal protection, recursion limit\n        maxNesting: 20\n    },\n    components: {\n        core: {\n            rules: [\n                'normalize',\n                'block',\n                'inline',\n                'text_join'\n            ]\n        },\n        block: {\n            rules: [\n                'blockquote',\n                'code',\n                'fence',\n                'heading',\n                'hr',\n                'html_block',\n                'lheading',\n                'list',\n                'reference',\n                'paragraph'\n            ]\n        },\n        inline: {\n            rules: [\n                'autolink',\n                'backticks',\n                'emphasis',\n                'entity',\n                'escape',\n                'html_inline',\n                'image',\n                'link',\n                'newline',\n                'text'\n            ],\n            rules2: [\n                'balance_pairs',\n                'emphasis',\n                'fragments_join'\n            ]\n        }\n    }\n};\n\n\nconst $0d15360f132ce1e2$var$config = {\n    default: (0, $3fe4a7f778f0f36e$export$2e2bcd8739ae039),\n    zero: (0, $d8eecf2af6991231$export$2e2bcd8739ae039),\n    commonmark: (0, $b06235d334be6c3f$export$2e2bcd8739ae039)\n};\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\nconst $0d15360f132ce1e2$var$BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nconst $0d15360f132ce1e2$var$GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\nfunction $0d15360f132ce1e2$var$validateLink(url) {\n    // url should be normalized at this point, and existing entities are decoded\n    const str = url.trim().toLowerCase();\n    return $0d15360f132ce1e2$var$BAD_PROTO_RE.test(str) ? $0d15360f132ce1e2$var$GOOD_DATA_RE.test(str) : true;\n}\nconst $0d15360f132ce1e2$var$RECODE_HOSTNAME_FOR = [\n    'http:',\n    'https:',\n    'mailto:'\n];\nfunction $0d15360f132ce1e2$var$normalizeLink(url) {\n    const parsed = $544ec39afc7ce01f$export$2e2bcd8739ae039(url, true);\n    if (parsed.hostname) {\n        // Encode hostnames in urls like:\n        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n        //\n        // We don't encode unknown schemas, because it's likely that we encode\n        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n        //\n        if (!parsed.protocol || $0d15360f132ce1e2$var$RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) try {\n            parsed.hostname = (0, $cc1c99c5745bccf3$export$2e2bcd8739ae039).toASCII(parsed.hostname);\n        } catch (er) {}\n    }\n    return $a16db32880174ee4$export$2e2bcd8739ae039($555640cbd60e2fdc$export$2e2bcd8739ae039(parsed));\n}\nfunction $0d15360f132ce1e2$var$normalizeLinkText(url) {\n    const parsed = $544ec39afc7ce01f$export$2e2bcd8739ae039(url, true);\n    if (parsed.hostname) {\n        // Encode hostnames in urls like:\n        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n        //\n        // We don't encode unknown schemas, because it's likely that we encode\n        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n        //\n        if (!parsed.protocol || $0d15360f132ce1e2$var$RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) try {\n            parsed.hostname = (0, $cc1c99c5745bccf3$export$2e2bcd8739ae039).toUnicode(parsed.hostname);\n        } catch (er) {}\n    }\n    // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n    return $0d34e69e6f2a0359$export$2e2bcd8739ae039($555640cbd60e2fdc$export$2e2bcd8739ae039(parsed), $0d34e69e6f2a0359$export$2e2bcd8739ae039.defaultChars + '%');\n}\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/ /**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/ function $0d15360f132ce1e2$var$MarkdownIt(presetName, options) {\n    if (!(this instanceof $0d15360f132ce1e2$var$MarkdownIt)) return new $0d15360f132ce1e2$var$MarkdownIt(presetName, options);\n    if (!options) {\n        if (!$acb166200129f66e$exports.isString(presetName)) {\n            options = presetName || {};\n            presetName = 'default';\n        }\n    }\n    /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/ this.inline = new (0, $086c870d02d0d269$export$2e2bcd8739ae039)();\n    /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/ this.block = new (0, $3349c57a2e9a47a9$export$2e2bcd8739ae039)();\n    /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/ this.core = new (0, $1dbd8732bf2ea1e5$export$2e2bcd8739ae039)();\n    /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n   **/ this.renderer = new (0, $1aad198f750e42d7$export$2e2bcd8739ae039)();\n    /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n   * rule.\n   **/ this.linkify = new (0, $fdfb0b45a2ba540e$export$2e2bcd8739ae039)();\n    /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/ this.validateLink = $0d15360f132ce1e2$var$validateLink;\n    /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/ this.normalizeLink = $0d15360f132ce1e2$var$normalizeLink;\n    /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/ this.normalizeLinkText = $0d15360f132ce1e2$var$normalizeLinkText;\n    // Expose utils & helpers for easy acces from plugins\n    /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/ this.utils = $acb166200129f66e$exports;\n    /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/ this.helpers = $acb166200129f66e$exports.assign({}, $99119f957fdc25f6$exports);\n    this.options = {};\n    this.configure(presetName);\n    if (options) this.set(options);\n}\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.set = function(options) {\n    $acb166200129f66e$exports.assign(this.options, options);\n    return this;\n};\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.configure = function(presets) {\n    const self = this;\n    if ($acb166200129f66e$exports.isString(presets)) {\n        const presetName = presets;\n        presets = $0d15360f132ce1e2$var$config[presetName];\n        if (!presets) throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n    }\n    if (!presets) throw new Error('Wrong `markdown-it` preset, can\\'t be empty');\n    if (presets.options) self.set(presets.options);\n    if (presets.components) Object.keys(presets.components).forEach(function(name) {\n        if (presets.components[name].rules) self[name].ruler.enableOnly(presets.components[name].rules);\n        if (presets.components[name].rules2) self[name].ruler2.enableOnly(presets.components[name].rules2);\n    });\n    return this;\n};\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.enable = function(list, ignoreInvalid) {\n    let result = [];\n    if (!Array.isArray(list)) list = [\n        list\n    ];\n    [\n        'core',\n        'block',\n        'inline'\n    ].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.enable(list, true));\n    }, this);\n    result = result.concat(this.inline.ruler2.enable(list, true));\n    const missed = list.filter(function(name) {\n        return result.indexOf(name) < 0;\n    });\n    if (missed.length && !ignoreInvalid) throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n    return this;\n};\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.disable = function(list, ignoreInvalid) {\n    let result = [];\n    if (!Array.isArray(list)) list = [\n        list\n    ];\n    [\n        'core',\n        'block',\n        'inline'\n    ].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.disable(list, true));\n    }, this);\n    result = result.concat(this.inline.ruler2.disable(list, true));\n    const missed = list.filter(function(name) {\n        return result.indexOf(name) < 0;\n    });\n    if (missed.length && !ignoreInvalid) throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n    return this;\n};\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.use = function(plugin /*, params, ... */ ) {\n    const args = [\n        this\n    ].concat(Array.prototype.slice.call(arguments, 1));\n    plugin.apply(plugin, args);\n    return this;\n};\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.parse = function(src, env) {\n    if (typeof src !== 'string') throw new Error('Input data should be a String');\n    const state = new this.core.State(src, this, env);\n    this.core.process(state);\n    return state.tokens;\n};\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.render = function(src, env) {\n    env = env || {};\n    return this.renderer.render(this.parse(src, env), this.options, env);\n};\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.parseInline = function(src, env) {\n    const state = new this.core.State(src, this, env);\n    state.inlineMode = true;\n    this.core.process(state);\n    return state.tokens;\n};\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/ $0d15360f132ce1e2$var$MarkdownIt.prototype.renderInline = function(src, env) {\n    env = env || {};\n    return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\nvar $0d15360f132ce1e2$export$2e2bcd8739ae039 = $0d15360f132ce1e2$var$MarkdownIt;\n\n\n\n\nfunction $2a3fd41f2d8265f9$export$e1bef8d96c7ba086(post) {\n    if (!post || typeof post.content !== 'string') return '';\n    const convertedToTimeStamp = new Date(post.created * 1000);\n    let message = (0, (/*@__PURE__*/$parcel$interopDefault($baC4Q)))(post.content);\n    const md = (0, $0d15360f132ce1e2$export$2e2bcd8739ae039)({\n        breaks: true,\n        langPrefix: 'language-',\n        typographer: false\n    });\n    message = md.renderInline(message);\n    message = message.replace(/\\[b](.*?)\\[\\/b]/g, '<strong>$1</strong>') // bold\n    .replace(/\\[u](.*?)\\[\\/u]/g, '<u>$1</u>') // underline\n    .replace(/\\[s](.*?)\\[\\/s]/g, '<strike>$1</strike>') // strikethrough\n    .replace(/\\[i](.*?)\\[\\/i]/g, '<em>$1</em>') // italic\n    .replace(/\\[marquee](.*?)\\[\\/marquee]/g, '<marquee>$1</marquee>') // marquee\n    .replace(/\\[url=(.*?)](.*?)\\[\\/url]/g, '<a href=\"$1\">$2</a>') // links\n    .replace(/\\[code](.*?)\\[\\/code]/gs, '<pre><code>$1</code></pre>') // code blocks\n    .replace(/\\[rainbow](.*?)\\[\\/rainbow]/g, '<rainbow>$1</rainbow>') // rainbow text\n    .replace(/\\[img](.*?)\\[\\/img]/g, '<img src=\"$1\" />') // images\n    .replace(/\\[size=(.*?)\\](.*?)\\[\\/size]/g, '<span style=\"font-size: $1;\">$2</span>') // font size\n    .replace(/\\[color=((?:[a-zA-Z]+)|(?:#[0-9a-fA-F]{3})|(?:#[0-9a-fA-F]{4})|(?:#[0-9a-fA-F]{6})|(?:#[0-9a-fA-F]{8}))]([^[]+)\\[\\/color]/g, '<span style=\"color: $1;\">$2</span>') // color\n    .replace(/\\[center](.*?)\\[\\/center]/g, '<center>$1</center>') // center\n    .replace(/\\[left](.*?)\\[\\/left]/g, '<p align=\"left\">$1</p>') // left align\n    .replace(/\\[right](.*?)\\[\\/right]/g, '<p align=\"right\">$1</p>') // right align\n    .replace(/\\[quote\\](.*?)\\[\\/quote]/g, '<blockquote>$1</blockquote>') // quote\n    .replace(/\\[list]((?:\\[\\*].*?)+)\\[\\/list]/g, '<ul>$1</ul>') // unordered list\n    .replace(/\\[\\*](.*?)/g, '<li>$1</li>') // list items\n    .replace(/\\[olist]((?:\\[\\*].*?)+)\\[\\/olist]/g, '<ol>$1</ol>') // ordered list\n    .replace(/\\[h([1-6])](.*?)\\[\\/h\\1]/g, '<h$1>$2</h$1>') // headers\n    .replace(/\\[hr\\]/g, '<hr>') // horizontal rule\n    .replace(/([a-z]+:\\/\\/[^\\s]+)/g, (match)=>`<a href=\"${match}\">${match}</a>`) // URLs\n    .replace(/<(a)?:(\\w+):(\\d+)>/gi, (match, a, name, id)=>{\n        const ext = a ? 'gif' : 'webp';\n        return `<img class=\"emoji\" src=\"https://cdn.discordapp.com/emojis/${id}.${ext}?size=128&quality=lossless\" alt=\"${name}\">`;\n    }); // Discord emojis\n    let attachmentsHtml = '';\n    if (post.attachments && post.attachments.length > 0) attachmentsHtml = post.attachments.map((attachment)=>`<img src=\"${attachment}\" />`).join('');\n    let postReplies = '';\n    if (post.replies && post.replies.length > 0) postReplies = post.replies.map((reply)=>`<img style=\"width: 24px\" src=${reply.author.avatar || `./assets/default.png`}>\n        <span class=\"reply-displayname\">\n        <a href=\"\">@${reply.author.username}</a>\n        </span>: ${md.renderInline((0, (/*@__PURE__*/$parcel$interopDefault($baC4Q)))(reply.content))}\n      <br>`).join('');\n    return `\n  <div class=\"post\" post_id=\"${post.id}\">\n    <div class=\"post-profilepicture\">\n      <img src=${post.author.avatar || `/assets/default.png`}>\n    </div>\n    <div>\n      <div>\n        <span class=\"post-replies\">\n          ${postReplies}\n        </span>\n        <span class=\"post-displayname\">\n          <a href=\"/profile?user=${post.author.username}\" class=\"profile-link\">\n            ${post.author.display_name} \n          </a>\n          <span class=\"post-username\">\n            (@${post.author.username})\n          </span>\n        </span>\n        <span class=\"post-message\">: ${message}</span>\n      </div>\n      <div>\n        <span class=\"post-attachments\">\n        ${attachmentsHtml}\n        </span>\n      </div>\n      <div>\n        <a href=\"\" post_id=\"${post.id}\" class=\"reply-link\">Reply</a>\n        <span class=\"post-timestamp\">\n        &#183;\t${convertedToTimeStamp.toLocaleString()}\n        </span>\n      </div>\n    </div>\n  </div>`;\n}\n\n\n\nlet $1c9b5713e0e7c6c5$var$ws, $1c9b5713e0e7c6c5$var$user;\nlet $1c9b5713e0e7c6c5$var$replies = [];\nlet $1c9b5713e0e7c6c5$var$attachmentURls = [];\nlet $1c9b5713e0e7c6c5$var$replies_details = document.getElementById('replies_details');\nif (!localStorage.getItem('token')) window.location.hash = '#login';\nfunction $1c9b5713e0e7c6c5$var$clearReplies() {\n    $1c9b5713e0e7c6c5$var$replies = [], $1c9b5713e0e7c6c5$var$replies_details.innerHTML = ``;\n}\nfunction $1c9b5713e0e7c6c5$var$clearAttachmentURls() {\n    $1c9b5713e0e7c6c5$var$attachmentURls = [];\n}\nfunction $1c9b5713e0e7c6c5$var$getUserCredentials() {\n    const d = JSON.parse(localStorage.getItem('userData')) || {};\n    const u = Object.keys(d);\n    return u.length ? {\n        username: u[0],\n        password: d[u[0]].password\n    } : null;\n}\nfunction $1c9b5713e0e7c6c5$export$1a74410ad8ecd82c(posts) {\n    console.log(posts);\n    const postsContainer = document.getElementById('post-container');\n    posts.forEach((post)=>{\n        const postHtml = (0, $2a3fd41f2d8265f9$export$e1bef8d96c7ba086)(post);\n        postsContainer.innerHTML += postHtml;\n    });\n}\nfunction $1c9b5713e0e7c6c5$export$468d058bfbcf795e(post) {\n    const postsContainer = document.getElementById('post-container');\n    const postHtml = (0, $2a3fd41f2d8265f9$export$e1bef8d96c7ba086)(post);\n    postsContainer.innerHTML = postHtml + postsContainer.innerHTML;\n}\nfunction $1c9b5713e0e7c6c5$export$2afd9a5dec09e31d(ulist) {\n    const ulistElement = document.getElementById('ulist');\n    const users = Object.keys(ulist).map((u)=>{\n        const client = ulist[u];\n        let title;\n        if (client === 'DeerChat') title = 'This user is using the amazing epic sauce best looking client around... DeerChat!!';\n        else title = `This user is using ${client}`;\n        return `<a class=\"profile-link\" href=\"#profile?user=${u}\" title=\"${title}\">${u}</a>`;\n    }).join(', ');\n    const userCount = Object.keys(ulist).length;\n    let ulistHtml;\n    if (userCount > 1) ulistHtml = `(${userCount}) Users: ${users}`;\n    else ulistHtml = `You are the only user online :(`;\n    ulistElement.innerHTML = ulistHtml + `<br/>`;\n}\nconst $1c9b5713e0e7c6c5$var$u = $1c9b5713e0e7c6c5$var$getUserCredentials();\nif ($1c9b5713e0e7c6c5$var$u) (0, $b759142ed5621c22$export$95e4bcd851dd915f)($1c9b5713e0e7c6c5$var$u.username, $1c9b5713e0e7c6c5$var$u.password).then((webSocket)=>{\n    $1c9b5713e0e7c6c5$var$ws = webSocket;\n    console.log(\"WebSocket connection is open!\");\n}).catch((error)=>{\n    console.error(\"Failed to connect to WebSocket:\", error);\n});\nelse console.error('User data not found in localStorage.');\nfunction $1c9b5713e0e7c6c5$var$sendPost() {\n    let message = document.getElementById(\"commentbox\");\n    if ($1c9b5713e0e7c6c5$var$ws && $1c9b5713e0e7c6c5$var$ws.readyState === WebSocket.OPEN) {\n        const postCommand = JSON.stringify({\n            command: \"post\",\n            content: message.value,\n            replies: $1c9b5713e0e7c6c5$var$replies,\n            attachments: $1c9b5713e0e7c6c5$var$attachmentURls\n        });\n        $1c9b5713e0e7c6c5$var$ws.send(postCommand);\n        message.value = \"\";\n        $1c9b5713e0e7c6c5$var$clearReplies();\n        $1c9b5713e0e7c6c5$var$clearAttachmentURls();\n    } else console.error(\"WebSocket connection is not open.\");\n}\nfunction $1c9b5713e0e7c6c5$var$showPageFromHash() {\n    let hash = window.location.hash;\n    if (!hash.startsWith('#')) hash = hash.split('#')[1] || '';\n    const hashParts = hash.split('?');\n    const pageId = hashParts[0].substring(1) || \"home\";\n    const query = hashParts[1];\n    const allPages = document.querySelectorAll(\".page\");\n    allPages.forEach((page)=>page.classList.remove(\"active\"));\n    const pageToShow = document.getElementById(`${pageId}-page`);\n    if (pageToShow) {\n        pageToShow.classList.add(\"active\");\n        switch(pageId){\n            case \"profile\":\n                $1c9b5713e0e7c6c5$var$loadProfilePage(query);\n                break;\n            case \"home\":\n                $1c9b5713e0e7c6c5$var$loadHomePage();\n                break;\n            case \"login\":\n                $1c9b5713e0e7c6c5$var$loadLoginPage();\n                break;\n        }\n    } else document.getElementById('not-found-page').classList.add('active');\n}\nwindow.addEventListener(\"hashchange\", $1c9b5713e0e7c6c5$var$showPageFromHash);\nwindow.onload = ()=>$1c9b5713e0e7c6c5$var$showPageFromHash();\nconst $1c9b5713e0e7c6c5$var$contentDiv = document.getElementById(\"content\");\n$1c9b5713e0e7c6c5$var$contentDiv.addEventListener(\"click\", (event)=>{\n    event.preventDefault();\n    if (event.target.matches(\".profile-link\")) {\n        const url = event.target.getAttribute(\"href\");\n        const username = new URLSearchParams(url.split('?')[1]).get('user');\n        window.location.hash = `#profile?user=${username}`;\n    } else if (event.target.matches(\".reply-link\")) {\n        const postId = Number(event.target.getAttribute('post_id'));\n        $1c9b5713e0e7c6c5$var$replies.push(postId);\n        $1c9b5713e0e7c6c5$var$replies_details.innerHTML = `${$1c9b5713e0e7c6c5$var$replies.length} Replies - <span class=\"link\" id=\"clear-replies\">Remove All</span>`;\n        const removeAll = document.getElementById(\"clear-replies\");\n        if (removeAll) removeAll.addEventListener(\"click\", $1c9b5713e0e7c6c5$var$clearReplies);\n    } else if (event.target.matches(\"#clear-replies\")) $1c9b5713e0e7c6c5$var$clearReplies();\n});\nconst $1c9b5713e0e7c6c5$var$attachButton = document.getElementById('attach-btn');\n$1c9b5713e0e7c6c5$var$attachButton && (document.querySelector(\"#attach-btn\").onclick = (event)=>{\n    event.preventDefault();\n    let result = prompt(\"Attach a file? (Enter a URL):\");\n    if (result) $1c9b5713e0e7c6c5$var$attachmentURls.push(result);\n});\nfunction $1c9b5713e0e7c6c5$var$loadHomePage() {\n    const sendButton = document.getElementById(\"send-button\");\n    if (sendButton) sendButton.addEventListener(\"click\", $1c9b5713e0e7c6c5$var$sendPost);\n}\nfunction $1c9b5713e0e7c6c5$var$loadProfilePage(query) {\n    if (!query) return;\n    const username = new URLSearchParams(query).get('user');\n    if (!username) return;\n    const contentDiv = document.getElementById(\"profile-page\");\n    if (!contentDiv) {\n        console.error(\"Could not find profile-page\");\n        return;\n    }\n    const handleUserData = (userData)=>{\n        $1c9b5713e0e7c6c5$var$user = userData;\n        const md = (0, $0d15360f132ce1e2$export$2e2bcd8739ae039)();\n        const mdBio = md.render($1c9b5713e0e7c6c5$var$user.bio);\n        const userPermissions = $1c9b5713e0e7c6c5$var$user.permissions.map((permission)=>permission).join(', ');\n        console.log($1c9b5713e0e7c6c5$var$user);\n        const contentDiv = document.getElementById(\"profile-page\");\n        if (!contentDiv) {\n            console.error(\"Could not find profile-page\");\n            return;\n        }\n        contentDiv.innerHTML = `\n        <div style=\"display: flex\">\n            <div id=\"profile-pic\">\n                <img src=\"${$1c9b5713e0e7c6c5$var$user.avatar || `/assets/default.png`}\"/>\n            </div>\n            <div style=\"width: 100%\">\n                <h1>${$1c9b5713e0e7c6c5$var$user.display_name}</h1>\n                <small>@${$1c9b5713e0e7c6c5$var$user.username}</small>\n                <p>Joined: ${new Date($1c9b5713e0e7c6c5$var$user.created * 1000).toLocaleString()}</p>\n                <p>Permissions: ${userPermissions}</p>\n                <hr>\n                <p>${mdBio}</p>\n            </div>\n        </div>\n      `;\n    };\n    const sendGetUserCommand = ()=>{\n        $1c9b5713e0e7c6c5$var$ws.send(JSON.stringify({\n            command: \"get_user\",\n            username: username\n        }));\n        $1c9b5713e0e7c6c5$var$ws.onmessage = (e)=>{\n            const parsedData = JSON.parse(e.data);\n            if (parsedData.user) handleUserData(parsedData.user);\n            $1c9b5713e0e7c6c5$var$ws.onmessage = null;\n        };\n    };\n    const waitForWebSocket = ()=>{\n        if ($1c9b5713e0e7c6c5$var$ws?.readyState === WebSocket.OPEN) {\n            console.log(\"WebSocket is now open.\");\n            sendGetUserCommand();\n        } else {\n            console.log(\"WebSocket not open, waiting for connection...\");\n            setTimeout(waitForWebSocket, 100);\n        }\n    };\n    if ($1c9b5713e0e7c6c5$var$ws?.readyState === WebSocket.OPEN) sendGetUserCommand();\n    else waitForWebSocket();\n}\nfunction $1c9b5713e0e7c6c5$var$loadLoginPage() {\n    const contentDiv = document.getElementById(\"login-page\");\n    if (!contentDiv) {\n        console.error(\"Could not find login-page\");\n        return;\n    }\n    contentDiv.innerHTML = `\n    <h1>Login - DeerChat</h1>\n    <form id=\"login-form\" action=\"\" method=\"post\">\n      Username:\n      <br>\n      <input type=\"text\" id=\"username\" aria required></input>\n      <br>\n      Password:\n      <br>\n      <input type=\"password\" id=\"password\" aria required></input>\n      <br>\n      <input id=\"submit\" type=\"submit\" name=\"Submit!\"></input>\n    </form>\n  `;\n    const storedUserData = JSON.parse(localStorage.getItem('userData')) || {};\n    const loginElement = document.getElementById('login-form');\n    if (loginElement) document.querySelector(\"#submit\").onclick = (event)=>{\n        event.preventDefault();\n        const username = document.getElementById('username').value;\n        const password = document.getElementById('password').value;\n        console.log(username, password);\n        $1c9b5713e0e7c6c5$var$ws = new WebSocket('wss://sokt.fraudulent.loan/');\n        $1c9b5713e0e7c6c5$var$ws.onopen = ()=>{\n            $1c9b5713e0e7c6c5$var$ws.send(JSON.stringify({\n                command: \"login_pswd\",\n                username: username,\n                password: password,\n                listener: \"RegisterLoginPswdListener\"\n            }));\n        };\n        $1c9b5713e0e7c6c5$var$ws.onmessage = function(event) {\n            console.log(\"Message received:\", event.data);\n            const response = JSON.parse(event.data);\n            if (response.token && !response.error) {\n                localStorage.setItem('token', response.token);\n                storedUserData[username] = {\n                    password: password,\n                    token: response.token\n                };\n                localStorage.setItem('userData', JSON.stringify(storedUserData));\n                $1c9b5713e0e7c6c5$var$ws.close();\n                window.location.href = '';\n            } else console.error(\"Login failed:\", response.error);\n        };\n        $1c9b5713e0e7c6c5$var$ws.onerror = function(error) {\n            console.error(\"WebSocket error:\", error);\n        };\n        $1c9b5713e0e7c6c5$var$ws.onclose = function(event) {\n            console.log(\"WebSocket connection closed:\", event);\n        };\n    };\n}\n\n\n//# sourceMappingURL=index.31fdb665.js.map\n","/**\n * xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\n\nvar DEFAULT = require(\"./default\");\nvar parser = require(\"./parser\");\nvar FilterXSS = require(\"./xss\");\n\n/**\n * filter xss function\n *\n * @param {String} html\n * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }\n * @return {String}\n */\nfunction filterXSS(html, options) {\n  var xss = new FilterXSS(options);\n  return xss.process(html);\n}\n\nexports = module.exports = filterXSS;\nexports.filterXSS = filterXSS;\nexports.FilterXSS = FilterXSS;\n\n(function () {\n  for (var i in DEFAULT) {\n    exports[i] = DEFAULT[i];\n  }\n  for (var j in parser) {\n    exports[j] = parser[j];\n  }\n})();\n\n// using `xss` on the browser, output `filterXSS` to the globals\nif (typeof window !== \"undefined\") {\n  window.filterXSS = module.exports;\n}\n\n// using `xss` on the WebWorker, output `filterXSS` to the globals\nfunction isWorkerEnv() {\n  return (\n    typeof self !== \"undefined\" &&\n    typeof DedicatedWorkerGlobalScope !== \"undefined\" &&\n    self instanceof DedicatedWorkerGlobalScope\n  );\n}\nif (isWorkerEnv()) {\n  self.filterXSS = module.exports;\n}\n","/**\n * default settings\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\n\nvar FilterCSS = require(\"cssfilter\").FilterCSS;\nvar getDefaultCSSWhiteList = require(\"cssfilter\").getDefaultWhiteList;\nvar _ = require(\"./util\");\n\nfunction getDefaultWhiteList() {\n  return {\n    a: [\"target\", \"href\", \"title\"],\n    abbr: [\"title\"],\n    address: [],\n    area: [\"shape\", \"coords\", \"href\", \"alt\"],\n    article: [],\n    aside: [],\n    audio: [\n      \"autoplay\",\n      \"controls\",\n      \"crossorigin\",\n      \"loop\",\n      \"muted\",\n      \"preload\",\n      \"src\",\n    ],\n    b: [],\n    bdi: [\"dir\"],\n    bdo: [\"dir\"],\n    big: [],\n    blockquote: [\"cite\"],\n    br: [],\n    caption: [],\n    center: [],\n    cite: [],\n    code: [],\n    col: [\"align\", \"valign\", \"span\", \"width\"],\n    colgroup: [\"align\", \"valign\", \"span\", \"width\"],\n    dd: [],\n    del: [\"datetime\"],\n    details: [\"open\"],\n    div: [],\n    dl: [],\n    dt: [],\n    em: [],\n    figcaption: [],\n    figure: [],\n    font: [\"color\", \"size\", \"face\"],\n    footer: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    header: [],\n    hr: [],\n    i: [],\n    img: [\"src\", \"alt\", \"title\", \"width\", \"height\", \"loading\"],\n    ins: [\"datetime\"],\n    kbd: [],\n    li: [],\n    mark: [],\n    nav: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    section: [],\n    small: [],\n    span: [],\n    sub: [],\n    summary: [],\n    sup: [],\n    strong: [],\n    strike: [],\n    table: [\"width\", \"border\", \"align\", \"valign\"],\n    tbody: [\"align\", \"valign\"],\n    td: [\"width\", \"rowspan\", \"colspan\", \"align\", \"valign\"],\n    tfoot: [\"align\", \"valign\"],\n    th: [\"width\", \"rowspan\", \"colspan\", \"align\", \"valign\"],\n    thead: [\"align\", \"valign\"],\n    tr: [\"rowspan\", \"align\", \"valign\"],\n    tt: [],\n    u: [],\n    ul: [],\n    video: [\n      \"autoplay\",\n      \"controls\",\n      \"crossorigin\",\n      \"loop\",\n      \"muted\",\n      \"playsinline\",\n      \"poster\",\n      \"preload\",\n      \"src\",\n      \"height\",\n      \"width\",\n    ],\n  };\n}\n\nvar defaultCSSFilter = new FilterCSS();\n\n/**\n * default onTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */\nfunction onTag(tag, html, options) {\n  // do nothing\n}\n\n/**\n * default onIgnoreTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */\nfunction onIgnoreTag(tag, html, options) {\n  // do nothing\n}\n\n/**\n * default onTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */\nfunction onTagAttr(tag, name, value) {\n  // do nothing\n}\n\n/**\n * default onIgnoreTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */\nfunction onIgnoreTagAttr(tag, name, value) {\n  // do nothing\n}\n\n/**\n * default escapeHtml function\n *\n * @param {String} html\n */\nfunction escapeHtml(html) {\n  return html.replace(REGEXP_LT, \"&lt;\").replace(REGEXP_GT, \"&gt;\");\n}\n\n/**\n * default safeAttrValue function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @param {Object} cssFilter\n * @return {String}\n */\nfunction safeAttrValue(tag, name, value, cssFilter) {\n  // unescape attribute value firstly\n  value = friendlyAttrValue(value);\n\n  if (name === \"href\" || name === \"src\") {\n    // filter `href` and `src` attribute\n    // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`\n    value = _.trim(value);\n    if (value === \"#\") return \"#\";\n    if (\n      !(\n        value.substr(0, 7) === \"http://\" ||\n        value.substr(0, 8) === \"https://\" ||\n        value.substr(0, 7) === \"mailto:\" ||\n        value.substr(0, 4) === \"tel:\" ||\n        value.substr(0, 11) === \"data:image/\" ||\n        value.substr(0, 6) === \"ftp://\" ||\n        value.substr(0, 2) === \"./\" ||\n        value.substr(0, 3) === \"../\" ||\n        value[0] === \"#\" ||\n        value[0] === \"/\"\n      )\n    ) {\n      return \"\";\n    }\n  } else if (name === \"background\") {\n    // filter `background` attribute (maybe no use)\n    // `javascript:`\n    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n      return \"\";\n    }\n  } else if (name === \"style\") {\n    // `expression()`\n    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;\n    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {\n      return \"\";\n    }\n    // `url()`\n    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;\n    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {\n      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n        return \"\";\n      }\n    }\n    if (cssFilter !== false) {\n      cssFilter = cssFilter || defaultCSSFilter;\n      value = cssFilter.process(value);\n    }\n  }\n\n  // escape `<>\"` before returns\n  value = escapeAttrValue(value);\n  return value;\n}\n\n// RegExp list\nvar REGEXP_LT = /</g;\nvar REGEXP_GT = />/g;\nvar REGEXP_QUOTE = /\"/g;\nvar REGEXP_QUOTE_2 = /&quot;/g;\nvar REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;\nvar REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;\nvar REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\\/\\*|\\*\\//gm;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_4 =\n  /((j\\s*a\\s*v\\s*a|v\\s*b|l\\s*i\\s*v\\s*e)\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*|m\\s*o\\s*c\\s*h\\s*a):/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:\\s*image\\//gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_7 =\n  /e\\s*x\\s*p\\s*r\\s*e\\s*s\\s*s\\s*i\\s*o\\s*n\\s*\\(.*/gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\\s*r\\s*l\\s*\\(.*/gi;\n\n/**\n * escape double quote\n *\n * @param {String} str\n * @return {String} str\n */\nfunction escapeQuote(str) {\n  return str.replace(REGEXP_QUOTE, \"&quot;\");\n}\n\n/**\n * unescape double quote\n *\n * @param {String} str\n * @return {String} str\n */\nfunction unescapeQuote(str) {\n  return str.replace(REGEXP_QUOTE_2, '\"');\n}\n\n/**\n * escape html entities\n *\n * @param {String} str\n * @return {String}\n */\nfunction escapeHtmlEntities(str) {\n  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {\n    return code[0] === \"x\" || code[0] === \"X\"\n      ? String.fromCharCode(parseInt(code.substr(1), 16))\n      : String.fromCharCode(parseInt(code, 10));\n  });\n}\n\n/**\n * escape html5 new danger entities\n *\n * @param {String} str\n * @return {String}\n */\nfunction escapeDangerHtml5Entities(str) {\n  return str\n    .replace(REGEXP_ATTR_VALUE_COLON, \":\")\n    .replace(REGEXP_ATTR_VALUE_NEWLINE, \" \");\n}\n\n/**\n * clear nonprintable characters\n *\n * @param {String} str\n * @return {String}\n */\nfunction clearNonPrintableCharacter(str) {\n  var str2 = \"\";\n  for (var i = 0, len = str.length; i < len; i++) {\n    str2 += str.charCodeAt(i) < 32 ? \" \" : str.charAt(i);\n  }\n  return _.trim(str2);\n}\n\n/**\n * get friendly attribute value\n *\n * @param {String} str\n * @return {String}\n */\nfunction friendlyAttrValue(str) {\n  str = unescapeQuote(str);\n  str = escapeHtmlEntities(str);\n  str = escapeDangerHtml5Entities(str);\n  str = clearNonPrintableCharacter(str);\n  return str;\n}\n\n/**\n * unescape attribute value\n *\n * @param {String} str\n * @return {String}\n */\nfunction escapeAttrValue(str) {\n  str = escapeQuote(str);\n  str = escapeHtml(str);\n  return str;\n}\n\n/**\n * `onIgnoreTag` function for removing all the tags that are not in whitelist\n */\nfunction onIgnoreTagStripAll() {\n  return \"\";\n}\n\n/**\n * remove tag body\n * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)\n *\n * @param {array} tags\n * @param {function} next\n */\nfunction StripTagBody(tags, next) {\n  if (typeof next !== \"function\") {\n    next = function () {};\n  }\n\n  var isRemoveAllTag = !Array.isArray(tags);\n  function isRemoveTag(tag) {\n    if (isRemoveAllTag) return true;\n    return _.indexOf(tags, tag) !== -1;\n  }\n\n  var removeList = [];\n  var posStart = false;\n\n  return {\n    onIgnoreTag: function (tag, html, options) {\n      if (isRemoveTag(tag)) {\n        if (options.isClosing) {\n          var ret = \"[/removed]\";\n          var end = options.position + ret.length;\n          removeList.push([\n            posStart !== false ? posStart : options.position,\n            end,\n          ]);\n          posStart = false;\n          return ret;\n        } else {\n          if (!posStart) {\n            posStart = options.position;\n          }\n          return \"[removed]\";\n        }\n      } else {\n        return next(tag, html, options);\n      }\n    },\n    remove: function (html) {\n      var rethtml = \"\";\n      var lastPos = 0;\n      _.forEach(removeList, function (pos) {\n        rethtml += html.slice(lastPos, pos[0]);\n        lastPos = pos[1];\n      });\n      rethtml += html.slice(lastPos);\n      return rethtml;\n    },\n  };\n}\n\n/**\n * remove html comments\n *\n * @param {String} html\n * @return {String}\n */\nfunction stripCommentTag(html) {\n  var retHtml = \"\";\n  var lastPos = 0;\n  while (lastPos < html.length) {\n    var i = html.indexOf(\"<!--\", lastPos);\n    if (i === -1) {\n      retHtml += html.slice(lastPos);\n      break;\n    }\n    retHtml += html.slice(lastPos, i);\n    var j = html.indexOf(\"-->\", i);\n    if (j === -1) {\n      break;\n    }\n    lastPos = j + 3;\n  }\n  return retHtml;\n}\n\n/**\n * remove invisible characters\n *\n * @param {String} html\n * @return {String}\n */\nfunction stripBlankChar(html) {\n  var chars = html.split(\"\");\n  chars = chars.filter(function (char) {\n    var c = char.charCodeAt(0);\n    if (c === 127) return false;\n    if (c <= 31) {\n      if (c === 10 || c === 13) return true;\n      return false;\n    }\n    return true;\n  });\n  return chars.join(\"\");\n}\n\nexports.whiteList = getDefaultWhiteList();\nexports.getDefaultWhiteList = getDefaultWhiteList;\nexports.onTag = onTag;\nexports.onIgnoreTag = onIgnoreTag;\nexports.onTagAttr = onTagAttr;\nexports.onIgnoreTagAttr = onIgnoreTagAttr;\nexports.safeAttrValue = safeAttrValue;\nexports.escapeHtml = escapeHtml;\nexports.escapeQuote = escapeQuote;\nexports.unescapeQuote = unescapeQuote;\nexports.escapeHtmlEntities = escapeHtmlEntities;\nexports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;\nexports.clearNonPrintableCharacter = clearNonPrintableCharacter;\nexports.friendlyAttrValue = friendlyAttrValue;\nexports.escapeAttrValue = escapeAttrValue;\nexports.onIgnoreTagStripAll = onIgnoreTagStripAll;\nexports.StripTagBody = StripTagBody;\nexports.stripCommentTag = stripCommentTag;\nexports.stripBlankChar = stripBlankChar;\nexports.attributeWrapSign = '\"';\nexports.cssFilter = defaultCSSFilter;\nexports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;\n","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nvar DEFAULT = require('./default');\nvar FilterCSS = require('./css');\n\n\n/**\n * XSS过滤\n *\n * @param {String} css 要过滤的CSS代码\n * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr\n * @return {String}\n */\nfunction filterCSS (html, options) {\n  var xss = new FilterCSS(options);\n  return xss.process(html);\n}\n\n\n// 输出\nexports = module.exports = filterCSS;\nexports.FilterCSS = FilterCSS;\nfor (var i in DEFAULT) exports[i] = DEFAULT[i];\n\n// 在浏览器端使用\nif (typeof window !== 'undefined') {\n  window.filterCSS = module.exports;\n}\n","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nfunction getDefaultWhiteList () {\n  // 白名单值说明：\n  // true: 允许该属性\n  // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许\n  // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许\n  // 除上面列出的值外均表示不允许\n  var whiteList = {};\n\n  whiteList['align-content'] = false; // default: auto\n  whiteList['align-items'] = false; // default: auto\n  whiteList['align-self'] = false; // default: auto\n  whiteList['alignment-adjust'] = false; // default: auto\n  whiteList['alignment-baseline'] = false; // default: baseline\n  whiteList['all'] = false; // default: depending on individual properties\n  whiteList['anchor-point'] = false; // default: none\n  whiteList['animation'] = false; // default: depending on individual properties\n  whiteList['animation-delay'] = false; // default: 0\n  whiteList['animation-direction'] = false; // default: normal\n  whiteList['animation-duration'] = false; // default: 0\n  whiteList['animation-fill-mode'] = false; // default: none\n  whiteList['animation-iteration-count'] = false; // default: 1\n  whiteList['animation-name'] = false; // default: none\n  whiteList['animation-play-state'] = false; // default: running\n  whiteList['animation-timing-function'] = false; // default: ease\n  whiteList['azimuth'] = false; // default: center\n  whiteList['backface-visibility'] = false; // default: visible\n  whiteList['background'] = true; // default: depending on individual properties\n  whiteList['background-attachment'] = true; // default: scroll\n  whiteList['background-clip'] = true; // default: border-box\n  whiteList['background-color'] = true; // default: transparent\n  whiteList['background-image'] = true; // default: none\n  whiteList['background-origin'] = true; // default: padding-box\n  whiteList['background-position'] = true; // default: 0% 0%\n  whiteList['background-repeat'] = true; // default: repeat\n  whiteList['background-size'] = true; // default: auto\n  whiteList['baseline-shift'] = false; // default: baseline\n  whiteList['binding'] = false; // default: none\n  whiteList['bleed'] = false; // default: 6pt\n  whiteList['bookmark-label'] = false; // default: content()\n  whiteList['bookmark-level'] = false; // default: none\n  whiteList['bookmark-state'] = false; // default: open\n  whiteList['border'] = true; // default: depending on individual properties\n  whiteList['border-bottom'] = true; // default: depending on individual properties\n  whiteList['border-bottom-color'] = true; // default: current color\n  whiteList['border-bottom-left-radius'] = true; // default: 0\n  whiteList['border-bottom-right-radius'] = true; // default: 0\n  whiteList['border-bottom-style'] = true; // default: none\n  whiteList['border-bottom-width'] = true; // default: medium\n  whiteList['border-collapse'] = true; // default: separate\n  whiteList['border-color'] = true; // default: depending on individual properties\n  whiteList['border-image'] = true; // default: none\n  whiteList['border-image-outset'] = true; // default: 0\n  whiteList['border-image-repeat'] = true; // default: stretch\n  whiteList['border-image-slice'] = true; // default: 100%\n  whiteList['border-image-source'] = true; // default: none\n  whiteList['border-image-width'] = true; // default: 1\n  whiteList['border-left'] = true; // default: depending on individual properties\n  whiteList['border-left-color'] = true; // default: current color\n  whiteList['border-left-style'] = true; // default: none\n  whiteList['border-left-width'] = true; // default: medium\n  whiteList['border-radius'] = true; // default: 0\n  whiteList['border-right'] = true; // default: depending on individual properties\n  whiteList['border-right-color'] = true; // default: current color\n  whiteList['border-right-style'] = true; // default: none\n  whiteList['border-right-width'] = true; // default: medium\n  whiteList['border-spacing'] = true; // default: 0\n  whiteList['border-style'] = true; // default: depending on individual properties\n  whiteList['border-top'] = true; // default: depending on individual properties\n  whiteList['border-top-color'] = true; // default: current color\n  whiteList['border-top-left-radius'] = true; // default: 0\n  whiteList['border-top-right-radius'] = true; // default: 0\n  whiteList['border-top-style'] = true; // default: none\n  whiteList['border-top-width'] = true; // default: medium\n  whiteList['border-width'] = true; // default: depending on individual properties\n  whiteList['bottom'] = false; // default: auto\n  whiteList['box-decoration-break'] = true; // default: slice\n  whiteList['box-shadow'] = true; // default: none\n  whiteList['box-sizing'] = true; // default: content-box\n  whiteList['box-snap'] = true; // default: none\n  whiteList['box-suppress'] = true; // default: show\n  whiteList['break-after'] = true; // default: auto\n  whiteList['break-before'] = true; // default: auto\n  whiteList['break-inside'] = true; // default: auto\n  whiteList['caption-side'] = false; // default: top\n  whiteList['chains'] = false; // default: none\n  whiteList['clear'] = true; // default: none\n  whiteList['clip'] = false; // default: auto\n  whiteList['clip-path'] = false; // default: none\n  whiteList['clip-rule'] = false; // default: nonzero\n  whiteList['color'] = true; // default: implementation dependent\n  whiteList['color-interpolation-filters'] = true; // default: auto\n  whiteList['column-count'] = false; // default: auto\n  whiteList['column-fill'] = false; // default: balance\n  whiteList['column-gap'] = false; // default: normal\n  whiteList['column-rule'] = false; // default: depending on individual properties\n  whiteList['column-rule-color'] = false; // default: current color\n  whiteList['column-rule-style'] = false; // default: medium\n  whiteList['column-rule-width'] = false; // default: medium\n  whiteList['column-span'] = false; // default: none\n  whiteList['column-width'] = false; // default: auto\n  whiteList['columns'] = false; // default: depending on individual properties\n  whiteList['contain'] = false; // default: none\n  whiteList['content'] = false; // default: normal\n  whiteList['counter-increment'] = false; // default: none\n  whiteList['counter-reset'] = false; // default: none\n  whiteList['counter-set'] = false; // default: none\n  whiteList['crop'] = false; // default: auto\n  whiteList['cue'] = false; // default: depending on individual properties\n  whiteList['cue-after'] = false; // default: none\n  whiteList['cue-before'] = false; // default: none\n  whiteList['cursor'] = false; // default: auto\n  whiteList['direction'] = false; // default: ltr\n  whiteList['display'] = true; // default: depending on individual properties\n  whiteList['display-inside'] = true; // default: auto\n  whiteList['display-list'] = true; // default: none\n  whiteList['display-outside'] = true; // default: inline-level\n  whiteList['dominant-baseline'] = false; // default: auto\n  whiteList['elevation'] = false; // default: level\n  whiteList['empty-cells'] = false; // default: show\n  whiteList['filter'] = false; // default: none\n  whiteList['flex'] = false; // default: depending on individual properties\n  whiteList['flex-basis'] = false; // default: auto\n  whiteList['flex-direction'] = false; // default: row\n  whiteList['flex-flow'] = false; // default: depending on individual properties\n  whiteList['flex-grow'] = false; // default: 0\n  whiteList['flex-shrink'] = false; // default: 1\n  whiteList['flex-wrap'] = false; // default: nowrap\n  whiteList['float'] = false; // default: none\n  whiteList['float-offset'] = false; // default: 0 0\n  whiteList['flood-color'] = false; // default: black\n  whiteList['flood-opacity'] = false; // default: 1\n  whiteList['flow-from'] = false; // default: none\n  whiteList['flow-into'] = false; // default: none\n  whiteList['font'] = true; // default: depending on individual properties\n  whiteList['font-family'] = true; // default: implementation dependent\n  whiteList['font-feature-settings'] = true; // default: normal\n  whiteList['font-kerning'] = true; // default: auto\n  whiteList['font-language-override'] = true; // default: normal\n  whiteList['font-size'] = true; // default: medium\n  whiteList['font-size-adjust'] = true; // default: none\n  whiteList['font-stretch'] = true; // default: normal\n  whiteList['font-style'] = true; // default: normal\n  whiteList['font-synthesis'] = true; // default: weight style\n  whiteList['font-variant'] = true; // default: normal\n  whiteList['font-variant-alternates'] = true; // default: normal\n  whiteList['font-variant-caps'] = true; // default: normal\n  whiteList['font-variant-east-asian'] = true; // default: normal\n  whiteList['font-variant-ligatures'] = true; // default: normal\n  whiteList['font-variant-numeric'] = true; // default: normal\n  whiteList['font-variant-position'] = true; // default: normal\n  whiteList['font-weight'] = true; // default: normal\n  whiteList['grid'] = false; // default: depending on individual properties\n  whiteList['grid-area'] = false; // default: depending on individual properties\n  whiteList['grid-auto-columns'] = false; // default: auto\n  whiteList['grid-auto-flow'] = false; // default: none\n  whiteList['grid-auto-rows'] = false; // default: auto\n  whiteList['grid-column'] = false; // default: depending on individual properties\n  whiteList['grid-column-end'] = false; // default: auto\n  whiteList['grid-column-start'] = false; // default: auto\n  whiteList['grid-row'] = false; // default: depending on individual properties\n  whiteList['grid-row-end'] = false; // default: auto\n  whiteList['grid-row-start'] = false; // default: auto\n  whiteList['grid-template'] = false; // default: depending on individual properties\n  whiteList['grid-template-areas'] = false; // default: none\n  whiteList['grid-template-columns'] = false; // default: none\n  whiteList['grid-template-rows'] = false; // default: none\n  whiteList['hanging-punctuation'] = false; // default: none\n  whiteList['height'] = true; // default: auto\n  whiteList['hyphens'] = false; // default: manual\n  whiteList['icon'] = false; // default: auto\n  whiteList['image-orientation'] = false; // default: auto\n  whiteList['image-resolution'] = false; // default: normal\n  whiteList['ime-mode'] = false; // default: auto\n  whiteList['initial-letters'] = false; // default: normal\n  whiteList['inline-box-align'] = false; // default: last\n  whiteList['justify-content'] = false; // default: auto\n  whiteList['justify-items'] = false; // default: auto\n  whiteList['justify-self'] = false; // default: auto\n  whiteList['left'] = false; // default: auto\n  whiteList['letter-spacing'] = true; // default: normal\n  whiteList['lighting-color'] = true; // default: white\n  whiteList['line-box-contain'] = false; // default: block inline replaced\n  whiteList['line-break'] = false; // default: auto\n  whiteList['line-grid'] = false; // default: match-parent\n  whiteList['line-height'] = false; // default: normal\n  whiteList['line-snap'] = false; // default: none\n  whiteList['line-stacking'] = false; // default: depending on individual properties\n  whiteList['line-stacking-ruby'] = false; // default: exclude-ruby\n  whiteList['line-stacking-shift'] = false; // default: consider-shifts\n  whiteList['line-stacking-strategy'] = false; // default: inline-line-height\n  whiteList['list-style'] = true; // default: depending on individual properties\n  whiteList['list-style-image'] = true; // default: none\n  whiteList['list-style-position'] = true; // default: outside\n  whiteList['list-style-type'] = true; // default: disc\n  whiteList['margin'] = true; // default: depending on individual properties\n  whiteList['margin-bottom'] = true; // default: 0\n  whiteList['margin-left'] = true; // default: 0\n  whiteList['margin-right'] = true; // default: 0\n  whiteList['margin-top'] = true; // default: 0\n  whiteList['marker-offset'] = false; // default: auto\n  whiteList['marker-side'] = false; // default: list-item\n  whiteList['marks'] = false; // default: none\n  whiteList['mask'] = false; // default: border-box\n  whiteList['mask-box'] = false; // default: see individual properties\n  whiteList['mask-box-outset'] = false; // default: 0\n  whiteList['mask-box-repeat'] = false; // default: stretch\n  whiteList['mask-box-slice'] = false; // default: 0 fill\n  whiteList['mask-box-source'] = false; // default: none\n  whiteList['mask-box-width'] = false; // default: auto\n  whiteList['mask-clip'] = false; // default: border-box\n  whiteList['mask-image'] = false; // default: none\n  whiteList['mask-origin'] = false; // default: border-box\n  whiteList['mask-position'] = false; // default: center\n  whiteList['mask-repeat'] = false; // default: no-repeat\n  whiteList['mask-size'] = false; // default: border-box\n  whiteList['mask-source-type'] = false; // default: auto\n  whiteList['mask-type'] = false; // default: luminance\n  whiteList['max-height'] = true; // default: none\n  whiteList['max-lines'] = false; // default: none\n  whiteList['max-width'] = true; // default: none\n  whiteList['min-height'] = true; // default: 0\n  whiteList['min-width'] = true; // default: 0\n  whiteList['move-to'] = false; // default: normal\n  whiteList['nav-down'] = false; // default: auto\n  whiteList['nav-index'] = false; // default: auto\n  whiteList['nav-left'] = false; // default: auto\n  whiteList['nav-right'] = false; // default: auto\n  whiteList['nav-up'] = false; // default: auto\n  whiteList['object-fit'] = false; // default: fill\n  whiteList['object-position'] = false; // default: 50% 50%\n  whiteList['opacity'] = false; // default: 1\n  whiteList['order'] = false; // default: 0\n  whiteList['orphans'] = false; // default: 2\n  whiteList['outline'] = false; // default: depending on individual properties\n  whiteList['outline-color'] = false; // default: invert\n  whiteList['outline-offset'] = false; // default: 0\n  whiteList['outline-style'] = false; // default: none\n  whiteList['outline-width'] = false; // default: medium\n  whiteList['overflow'] = false; // default: depending on individual properties\n  whiteList['overflow-wrap'] = false; // default: normal\n  whiteList['overflow-x'] = false; // default: visible\n  whiteList['overflow-y'] = false; // default: visible\n  whiteList['padding'] = true; // default: depending on individual properties\n  whiteList['padding-bottom'] = true; // default: 0\n  whiteList['padding-left'] = true; // default: 0\n  whiteList['padding-right'] = true; // default: 0\n  whiteList['padding-top'] = true; // default: 0\n  whiteList['page'] = false; // default: auto\n  whiteList['page-break-after'] = false; // default: auto\n  whiteList['page-break-before'] = false; // default: auto\n  whiteList['page-break-inside'] = false; // default: auto\n  whiteList['page-policy'] = false; // default: start\n  whiteList['pause'] = false; // default: implementation dependent\n  whiteList['pause-after'] = false; // default: implementation dependent\n  whiteList['pause-before'] = false; // default: implementation dependent\n  whiteList['perspective'] = false; // default: none\n  whiteList['perspective-origin'] = false; // default: 50% 50%\n  whiteList['pitch'] = false; // default: medium\n  whiteList['pitch-range'] = false; // default: 50\n  whiteList['play-during'] = false; // default: auto\n  whiteList['position'] = false; // default: static\n  whiteList['presentation-level'] = false; // default: 0\n  whiteList['quotes'] = false; // default: text\n  whiteList['region-fragment'] = false; // default: auto\n  whiteList['resize'] = false; // default: none\n  whiteList['rest'] = false; // default: depending on individual properties\n  whiteList['rest-after'] = false; // default: none\n  whiteList['rest-before'] = false; // default: none\n  whiteList['richness'] = false; // default: 50\n  whiteList['right'] = false; // default: auto\n  whiteList['rotation'] = false; // default: 0\n  whiteList['rotation-point'] = false; // default: 50% 50%\n  whiteList['ruby-align'] = false; // default: auto\n  whiteList['ruby-merge'] = false; // default: separate\n  whiteList['ruby-position'] = false; // default: before\n  whiteList['shape-image-threshold'] = false; // default: 0.0\n  whiteList['shape-outside'] = false; // default: none\n  whiteList['shape-margin'] = false; // default: 0\n  whiteList['size'] = false; // default: auto\n  whiteList['speak'] = false; // default: auto\n  whiteList['speak-as'] = false; // default: normal\n  whiteList['speak-header'] = false; // default: once\n  whiteList['speak-numeral'] = false; // default: continuous\n  whiteList['speak-punctuation'] = false; // default: none\n  whiteList['speech-rate'] = false; // default: medium\n  whiteList['stress'] = false; // default: 50\n  whiteList['string-set'] = false; // default: none\n  whiteList['tab-size'] = false; // default: 8\n  whiteList['table-layout'] = false; // default: auto\n  whiteList['text-align'] = true; // default: start\n  whiteList['text-align-last'] = true; // default: auto\n  whiteList['text-combine-upright'] = true; // default: none\n  whiteList['text-decoration'] = true; // default: none\n  whiteList['text-decoration-color'] = true; // default: currentColor\n  whiteList['text-decoration-line'] = true; // default: none\n  whiteList['text-decoration-skip'] = true; // default: objects\n  whiteList['text-decoration-style'] = true; // default: solid\n  whiteList['text-emphasis'] = true; // default: depending on individual properties\n  whiteList['text-emphasis-color'] = true; // default: currentColor\n  whiteList['text-emphasis-position'] = true; // default: over right\n  whiteList['text-emphasis-style'] = true; // default: none\n  whiteList['text-height'] = true; // default: auto\n  whiteList['text-indent'] = true; // default: 0\n  whiteList['text-justify'] = true; // default: auto\n  whiteList['text-orientation'] = true; // default: mixed\n  whiteList['text-overflow'] = true; // default: clip\n  whiteList['text-shadow'] = true; // default: none\n  whiteList['text-space-collapse'] = true; // default: collapse\n  whiteList['text-transform'] = true; // default: none\n  whiteList['text-underline-position'] = true; // default: auto\n  whiteList['text-wrap'] = true; // default: normal\n  whiteList['top'] = false; // default: auto\n  whiteList['transform'] = false; // default: none\n  whiteList['transform-origin'] = false; // default: 50% 50% 0\n  whiteList['transform-style'] = false; // default: flat\n  whiteList['transition'] = false; // default: depending on individual properties\n  whiteList['transition-delay'] = false; // default: 0s\n  whiteList['transition-duration'] = false; // default: 0s\n  whiteList['transition-property'] = false; // default: all\n  whiteList['transition-timing-function'] = false; // default: ease\n  whiteList['unicode-bidi'] = false; // default: normal\n  whiteList['vertical-align'] = false; // default: baseline\n  whiteList['visibility'] = false; // default: visible\n  whiteList['voice-balance'] = false; // default: center\n  whiteList['voice-duration'] = false; // default: auto\n  whiteList['voice-family'] = false; // default: implementation dependent\n  whiteList['voice-pitch'] = false; // default: medium\n  whiteList['voice-range'] = false; // default: medium\n  whiteList['voice-rate'] = false; // default: normal\n  whiteList['voice-stress'] = false; // default: normal\n  whiteList['voice-volume'] = false; // default: medium\n  whiteList['volume'] = false; // default: medium\n  whiteList['white-space'] = false; // default: normal\n  whiteList['widows'] = false; // default: 2\n  whiteList['width'] = true; // default: auto\n  whiteList['will-change'] = false; // default: auto\n  whiteList['word-break'] = true; // default: normal\n  whiteList['word-spacing'] = true; // default: normal\n  whiteList['word-wrap'] = true; // default: normal\n  whiteList['wrap-flow'] = false; // default: auto\n  whiteList['wrap-through'] = false; // default: wrap\n  whiteList['writing-mode'] = false; // default: horizontal-tb\n  whiteList['z-index'] = false; // default: auto\n\n  return whiteList;\n}\n\n\n/**\n * 匹配到白名单上的一个属性时\n *\n * @param {String} name\n * @param {String} value\n * @param {Object} options\n * @return {String}\n */\nfunction onAttr (name, value, options) {\n  // do nothing\n}\n\n/**\n * 匹配到不在白名单上的一个属性时\n *\n * @param {String} name\n * @param {String} value\n * @param {Object} options\n * @return {String}\n */\nfunction onIgnoreAttr (name, value, options) {\n  // do nothing\n}\n\nvar REGEXP_URL_JAVASCRIPT = /javascript\\s*\\:/img;\n\n/**\n * 过滤属性值\n *\n * @param {String} name\n * @param {String} value\n * @return {String}\n */\nfunction safeAttrValue(name, value) {\n  if (REGEXP_URL_JAVASCRIPT.test(value)) return '';\n  return value;\n}\n\n\nexports.whiteList = getDefaultWhiteList();\nexports.getDefaultWhiteList = getDefaultWhiteList;\nexports.onAttr = onAttr;\nexports.onIgnoreAttr = onIgnoreAttr;\nexports.safeAttrValue = safeAttrValue;\n","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nvar DEFAULT = require('./default');\nvar parseStyle = require('./parser');\nvar _ = require('./util');\n\n\n/**\n * 返回值是否为空\n *\n * @param {Object} obj\n * @return {Boolean}\n */\nfunction isNull (obj) {\n  return (obj === undefined || obj === null);\n}\n\n/**\n * 浅拷贝对象\n *\n * @param {Object} obj\n * @return {Object}\n */\nfunction shallowCopyObject (obj) {\n  var ret = {};\n  for (var i in obj) {\n    ret[i] = obj[i];\n  }\n  return ret;\n}\n\n/**\n * 创建CSS过滤器\n *\n * @param {Object} options\n *   - {Object} whiteList\n *   - {Function} onAttr\n *   - {Function} onIgnoreAttr\n *   - {Function} safeAttrValue\n */\nfunction FilterCSS (options) {\n  options = shallowCopyObject(options || {});\n  options.whiteList = options.whiteList || DEFAULT.whiteList;\n  options.onAttr = options.onAttr || DEFAULT.onAttr;\n  options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;\n  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;\n  this.options = options;\n}\n\nFilterCSS.prototype.process = function (css) {\n  // 兼容各种奇葩输入\n  css = css || '';\n  css = css.toString();\n  if (!css) return '';\n\n  var me = this;\n  var options = me.options;\n  var whiteList = options.whiteList;\n  var onAttr = options.onAttr;\n  var onIgnoreAttr = options.onIgnoreAttr;\n  var safeAttrValue = options.safeAttrValue;\n\n  var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {\n\n    var check = whiteList[name];\n    var isWhite = false;\n    if (check === true) isWhite = check;\n    else if (typeof check === 'function') isWhite = check(value);\n    else if (check instanceof RegExp) isWhite = check.test(value);\n    if (isWhite !== true) isWhite = false;\n\n    // 如果过滤后 value 为空则直接忽略\n    value = safeAttrValue(name, value);\n    if (!value) return;\n\n    var opts = {\n      position: position,\n      sourcePosition: sourcePosition,\n      source: source,\n      isWhite: isWhite\n    };\n\n    if (isWhite) {\n\n      var ret = onAttr(name, value, opts);\n      if (isNull(ret)) {\n        return name + ':' + value;\n      } else {\n        return ret;\n      }\n\n    } else {\n\n      var ret = onIgnoreAttr(name, value, opts);\n      if (!isNull(ret)) {\n        return ret;\n      }\n\n    }\n  });\n\n  return retCSS;\n};\n\n\nmodule.exports = FilterCSS;\n","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nvar _ = require('./util');\n\n\n/**\n * 解析style\n *\n * @param {String} css\n * @param {Function} onAttr 处理属性的函数\n *   参数格式： function (sourcePosition, position, name, value, source)\n * @return {String}\n */\nfunction parseStyle (css, onAttr) {\n  css = _.trimRight(css);\n  if (css[css.length - 1] !== ';') css += ';';\n  var cssLength = css.length;\n  var isParenthesisOpen = false;\n  var lastPos = 0;\n  var i = 0;\n  var retCSS = '';\n\n  function addNewAttr () {\n    // 如果没有正常的闭合圆括号，则直接忽略当前属性\n    if (!isParenthesisOpen) {\n      var source = _.trim(css.slice(lastPos, i));\n      var j = source.indexOf(':');\n      if (j !== -1) {\n        var name = _.trim(source.slice(0, j));\n        var value = _.trim(source.slice(j + 1));\n        // 必须有属性名称\n        if (name) {\n          var ret = onAttr(lastPos, retCSS.length, name, value, source);\n          if (ret) retCSS += ret + '; ';\n        }\n      }\n    }\n    lastPos = i + 1;\n  }\n\n  for (; i < cssLength; i++) {\n    var c = css[i];\n    if (c === '/' && css[i + 1] === '*') {\n      // 备注开始\n      var j = css.indexOf('*/', i + 2);\n      // 如果没有正常的备注结束，则后面的部分全部跳过\n      if (j === -1) break;\n      // 直接将当前位置调到备注结尾，并且初始化状态\n      i = j + 1;\n      lastPos = i + 1;\n      isParenthesisOpen = false;\n    } else if (c === '(') {\n      isParenthesisOpen = true;\n    } else if (c === ')') {\n      isParenthesisOpen = false;\n    } else if (c === ';') {\n      if (isParenthesisOpen) {\n        // 在圆括号里面，忽略\n      } else {\n        addNewAttr();\n      }\n    } else if (c === '\\n') {\n      addNewAttr();\n    }\n  }\n\n  return _.trim(retCSS);\n}\n\nmodule.exports = parseStyle;\n","module.exports = {\n  indexOf: function (arr, item) {\n    var i, j;\n    if (Array.prototype.indexOf) {\n      return arr.indexOf(item);\n    }\n    for (i = 0, j = arr.length; i < j; i++) {\n      if (arr[i] === item) {\n        return i;\n      }\n    }\n    return -1;\n  },\n  forEach: function (arr, fn, scope) {\n    var i, j;\n    if (Array.prototype.forEach) {\n      return arr.forEach(fn, scope);\n    }\n    for (i = 0, j = arr.length; i < j; i++) {\n      fn.call(scope, arr[i], i, arr);\n    }\n  },\n  trim: function (str) {\n    if (String.prototype.trim) {\n      return str.trim();\n    }\n    return str.replace(/(^\\s*)|(\\s*$)/g, '');\n  },\n  trimRight: function (str) {\n    if (String.prototype.trimRight) {\n      return str.trimRight();\n    }\n    return str.replace(/(\\s*$)/g, '');\n  }\n};\n","module.exports = {\n  indexOf: function (arr, item) {\n    var i, j;\n    if (Array.prototype.indexOf) {\n      return arr.indexOf(item);\n    }\n    for (i = 0, j = arr.length; i < j; i++) {\n      if (arr[i] === item) {\n        return i;\n      }\n    }\n    return -1;\n  },\n  forEach: function (arr, fn, scope) {\n    var i, j;\n    if (Array.prototype.forEach) {\n      return arr.forEach(fn, scope);\n    }\n    for (i = 0, j = arr.length; i < j; i++) {\n      fn.call(scope, arr[i], i, arr);\n    }\n  },\n  trim: function (str) {\n    if (String.prototype.trim) {\n      return str.trim();\n    }\n    return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n  },\n  spaceIndex: function (str) {\n    var reg = /\\s|\\n|\\t/;\n    var match = reg.exec(str);\n    return match ? match.index : -1;\n  },\n};\n","/**\n * Simple HTML Parser\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\n\nvar _ = require(\"./util\");\n\n/**\n * get tag name\n *\n * @param {String} html e.g. '<a hef=\"#\">'\n * @return {String}\n */\nfunction getTagName(html) {\n  var i = _.spaceIndex(html);\n  var tagName;\n  if (i === -1) {\n    tagName = html.slice(1, -1);\n  } else {\n    tagName = html.slice(1, i + 1);\n  }\n  tagName = _.trim(tagName).toLowerCase();\n  if (tagName.slice(0, 1) === \"/\") tagName = tagName.slice(1);\n  if (tagName.slice(-1) === \"/\") tagName = tagName.slice(0, -1);\n  return tagName;\n}\n\n/**\n * is close tag?\n *\n * @param {String} html 如：'<a hef=\"#\">'\n * @return {Boolean}\n */\nfunction isClosing(html) {\n  return html.slice(0, 2) === \"</\";\n}\n\n/**\n * parse input html and returns processed html\n *\n * @param {String} html\n * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)\n * @param {Function} escapeHtml\n * @return {String}\n */\nfunction parseTag(html, onTag, escapeHtml) {\n  \"use strict\";\n\n  var rethtml = \"\";\n  var lastPos = 0;\n  var tagStart = false;\n  var quoteStart = false;\n  var currentPos = 0;\n  var len = html.length;\n  var currentTagName = \"\";\n  var currentHtml = \"\";\n\n  chariterator: for (currentPos = 0; currentPos < len; currentPos++) {\n    var c = html.charAt(currentPos);\n    if (tagStart === false) {\n      if (c === \"<\") {\n        tagStart = currentPos;\n        continue;\n      }\n    } else {\n      if (quoteStart === false) {\n        if (c === \"<\") {\n          rethtml += escapeHtml(html.slice(lastPos, currentPos));\n          tagStart = currentPos;\n          lastPos = currentPos;\n          continue;\n        }\n        if (c === \">\" || currentPos === len - 1) {\n          rethtml += escapeHtml(html.slice(lastPos, tagStart));\n          currentHtml = html.slice(tagStart, currentPos + 1);\n          currentTagName = getTagName(currentHtml);\n          rethtml += onTag(\n            tagStart,\n            rethtml.length,\n            currentTagName,\n            currentHtml,\n            isClosing(currentHtml)\n          );\n          lastPos = currentPos + 1;\n          tagStart = false;\n          continue;\n        }\n        if (c === '\"' || c === \"'\") {\n          var i = 1;\n          var ic = html.charAt(currentPos - i);\n\n          while (ic.trim() === \"\" || ic === \"=\") {\n            if (ic === \"=\") {\n              quoteStart = c;\n              continue chariterator;\n            }\n            ic = html.charAt(currentPos - ++i);\n          }\n        }\n      } else {\n        if (c === quoteStart) {\n          quoteStart = false;\n          continue;\n        }\n      }\n    }\n  }\n  if (lastPos < len) {\n    rethtml += escapeHtml(html.substr(lastPos));\n  }\n\n  return rethtml;\n}\n\nvar REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\\\_:.-]/gim;\n\n/**\n * parse input attributes and returns processed attributes\n *\n * @param {String} html e.g. `href=\"#\" target=\"_blank\"`\n * @param {Function} onAttr e.g. `function (name, value)`\n * @return {String}\n */\nfunction parseAttr(html, onAttr) {\n  \"use strict\";\n\n  var lastPos = 0;\n  var lastMarkPos = 0;\n  var retAttrs = [];\n  var tmpName = false;\n  var len = html.length;\n\n  function addAttr(name, value) {\n    name = _.trim(name);\n    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, \"\").toLowerCase();\n    if (name.length < 1) return;\n    var ret = onAttr(name, value || \"\");\n    if (ret) retAttrs.push(ret);\n  }\n\n  // 逐个分析字符\n  for (var i = 0; i < len; i++) {\n    var c = html.charAt(i);\n    var v, j;\n    if (tmpName === false && c === \"=\") {\n      tmpName = html.slice(lastPos, i);\n      lastPos = i + 1;\n      lastMarkPos = html.charAt(lastPos) === '\"' || html.charAt(lastPos) === \"'\" ? lastPos : findNextQuotationMark(html, i + 1);\n      continue;\n    }\n    if (tmpName !== false) {\n      if (\n        i === lastMarkPos\n      ) {\n        j = html.indexOf(c, i + 1);\n        if (j === -1) {\n          break;\n        } else {\n          v = _.trim(html.slice(lastMarkPos + 1, j));\n          addAttr(tmpName, v);\n          tmpName = false;\n          i = j;\n          lastPos = i + 1;\n          continue;\n        }\n      }\n    }\n    if (/\\s|\\n|\\t/.test(c)) {\n      html = html.replace(/\\s|\\n|\\t/g, \" \");\n      if (tmpName === false) {\n        j = findNextEqual(html, i);\n        if (j === -1) {\n          v = _.trim(html.slice(lastPos, i));\n          addAttr(v);\n          tmpName = false;\n          lastPos = i + 1;\n          continue;\n        } else {\n          i = j - 1;\n          continue;\n        }\n      } else {\n        j = findBeforeEqual(html, i - 1);\n        if (j === -1) {\n          v = _.trim(html.slice(lastPos, i));\n          v = stripQuoteWrap(v);\n          addAttr(tmpName, v);\n          tmpName = false;\n          lastPos = i + 1;\n          continue;\n        } else {\n          continue;\n        }\n      }\n    }\n  }\n\n  if (lastPos < html.length) {\n    if (tmpName === false) {\n      addAttr(html.slice(lastPos));\n    } else {\n      addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));\n    }\n  }\n\n  return _.trim(retAttrs.join(\" \"));\n}\n\nfunction findNextEqual(str, i) {\n  for (; i < str.length; i++) {\n    var c = str[i];\n    if (c === \" \") continue;\n    if (c === \"=\") return i;\n    return -1;\n  }\n}\n\nfunction findNextQuotationMark(str, i) {\n  for (; i < str.length; i++) {\n    var c = str[i];\n    if (c === \" \") continue;\n    if (c === \"'\" || c === '\"') return i;\n    return -1;\n  }\n}\n\nfunction findBeforeEqual(str, i) {\n  for (; i > 0; i--) {\n    var c = str[i];\n    if (c === \" \") continue;\n    if (c === \"=\") return i;\n    return -1;\n  }\n}\n\nfunction isQuoteWrapString(text) {\n  if (\n    (text[0] === '\"' && text[text.length - 1] === '\"') ||\n    (text[0] === \"'\" && text[text.length - 1] === \"'\")\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction stripQuoteWrap(text) {\n  if (isQuoteWrapString(text)) {\n    return text.substr(1, text.length - 2);\n  } else {\n    return text;\n  }\n}\n\nexports.parseTag = parseTag;\nexports.parseAttr = parseAttr;\n","/**\n * filter xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\n\nvar FilterCSS = require(\"cssfilter\").FilterCSS;\nvar DEFAULT = require(\"./default\");\nvar parser = require(\"./parser\");\nvar parseTag = parser.parseTag;\nvar parseAttr = parser.parseAttr;\nvar _ = require(\"./util\");\n\n/**\n * returns `true` if the input value is `undefined` or `null`\n *\n * @param {Object} obj\n * @return {Boolean}\n */\nfunction isNull(obj) {\n  return obj === undefined || obj === null;\n}\n\n/**\n * get attributes for a tag\n *\n * @param {String} html\n * @return {Object}\n *   - {String} html\n *   - {Boolean} closing\n */\nfunction getAttrs(html) {\n  var i = _.spaceIndex(html);\n  if (i === -1) {\n    return {\n      html: \"\",\n      closing: html[html.length - 2] === \"/\",\n    };\n  }\n  html = _.trim(html.slice(i + 1, -1));\n  var isClosing = html[html.length - 1] === \"/\";\n  if (isClosing) html = _.trim(html.slice(0, -1));\n  return {\n    html: html,\n    closing: isClosing,\n  };\n}\n\n/**\n * shallow copy\n *\n * @param {Object} obj\n * @return {Object}\n */\nfunction shallowCopyObject(obj) {\n  var ret = {};\n  for (var i in obj) {\n    ret[i] = obj[i];\n  }\n  return ret;\n}\n\nfunction keysToLowerCase(obj) {\n  var ret = {};\n  for (var i in obj) {\n    if (Array.isArray(obj[i])) {\n      ret[i.toLowerCase()] = obj[i].map(function (item) {\n        return item.toLowerCase();\n      });\n    } else {\n      ret[i.toLowerCase()] = obj[i];\n    }\n  }\n  return ret;\n}\n\n/**\n * FilterXSS class\n *\n * @param {Object} options\n *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,\n *        onIgnoreTagAttr, safeAttrValue, escapeHtml\n *        stripIgnoreTagBody, allowCommentTag, stripBlankChar\n *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`\n */\nfunction FilterXSS(options) {\n  options = shallowCopyObject(options || {});\n\n  if (options.stripIgnoreTag) {\n    if (options.onIgnoreTag) {\n      console.error(\n        'Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time'\n      );\n    }\n    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;\n  }\n  if (options.whiteList || options.allowList) {\n    options.whiteList = keysToLowerCase(options.whiteList || options.allowList);\n  } else {\n    options.whiteList = DEFAULT.whiteList;\n  }\n\n  this.attributeWrapSign = options.singleQuotedAttributeValue === true ? \"'\" : DEFAULT.attributeWrapSign;\n\n  options.onTag = options.onTag || DEFAULT.onTag;\n  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;\n  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;\n  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;\n  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;\n  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;\n  this.options = options;\n\n  if (options.css === false) {\n    this.cssFilter = false;\n  } else {\n    options.css = options.css || {};\n    this.cssFilter = new FilterCSS(options.css);\n  }\n}\n\n/**\n * start process and returns result\n *\n * @param {String} html\n * @return {String}\n */\nFilterXSS.prototype.process = function (html) {\n  // compatible with the input\n  html = html || \"\";\n  html = html.toString();\n  if (!html) return \"\";\n\n  var me = this;\n  var options = me.options;\n  var whiteList = options.whiteList;\n  var onTag = options.onTag;\n  var onIgnoreTag = options.onIgnoreTag;\n  var onTagAttr = options.onTagAttr;\n  var onIgnoreTagAttr = options.onIgnoreTagAttr;\n  var safeAttrValue = options.safeAttrValue;\n  var escapeHtml = options.escapeHtml;\n  var attributeWrapSign = me.attributeWrapSign;\n  var cssFilter = me.cssFilter;\n\n  // remove invisible characters\n  if (options.stripBlankChar) {\n    html = DEFAULT.stripBlankChar(html);\n  }\n\n  // remove html comments\n  if (!options.allowCommentTag) {\n    html = DEFAULT.stripCommentTag(html);\n  }\n\n  // if enable stripIgnoreTagBody\n  var stripIgnoreTagBody = false;\n  if (options.stripIgnoreTagBody) {\n    stripIgnoreTagBody = DEFAULT.StripTagBody(\n      options.stripIgnoreTagBody,\n      onIgnoreTag\n    );\n    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;\n  }\n\n  var retHtml = parseTag(\n    html,\n    function (sourcePosition, position, tag, html, isClosing) {\n      var info = {\n        sourcePosition: sourcePosition,\n        position: position,\n        isClosing: isClosing,\n        isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag),\n      };\n\n      // call `onTag()`\n      var ret = onTag(tag, html, info);\n      if (!isNull(ret)) return ret;\n\n      if (info.isWhite) {\n        if (info.isClosing) {\n          return \"</\" + tag + \">\";\n        }\n\n        var attrs = getAttrs(html);\n        var whiteAttrList = whiteList[tag];\n        var attrsHtml = parseAttr(attrs.html, function (name, value) {\n          // call `onTagAttr()`\n          var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;\n          var ret = onTagAttr(tag, name, value, isWhiteAttr);\n          if (!isNull(ret)) return ret;\n\n          if (isWhiteAttr) {\n            // call `safeAttrValue()`\n            value = safeAttrValue(tag, name, value, cssFilter);\n            if (value) {\n              return name + '=' + attributeWrapSign + value + attributeWrapSign;\n            } else {\n              return name;\n            }\n          } else {\n            // call `onIgnoreTagAttr()`\n            ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);\n            if (!isNull(ret)) return ret;\n            return;\n          }\n        });\n\n        // build new tag html\n        html = \"<\" + tag;\n        if (attrsHtml) html += \" \" + attrsHtml;\n        if (attrs.closing) html += \" /\";\n        html += \">\";\n        return html;\n      } else {\n        // call `onIgnoreTag()`\n        ret = onIgnoreTag(tag, html, info);\n        if (!isNull(ret)) return ret;\n        return escapeHtml(html);\n      }\n    },\n    escapeHtml\n  );\n\n  // if enable stripIgnoreTagBody\n  if (stripIgnoreTagBody) {\n    retHtml = stripIgnoreTagBody.remove(retHtml);\n  }\n\n  return retHtml;\n};\n\nmodule.exports = FilterXSS;\n","import { connectToWebSocket } from './connectToWebSocket.js';\nimport { createPost } from './post.js';\nimport MarkdownIt from 'markdown-it';\n\nlet ws, user\nlet replies = []\nlet attachmentURls = []\nlet replies_details = document.getElementById('replies_details');\n\nif (!localStorage.getItem('token')) { window.location.hash = '#login' }\nfunction clearReplies() { replies = [], replies_details.innerHTML = `` }\nfunction clearAttachmentURls() { attachmentURls = [] }\n\nfunction getUserCredentials() {\n    const d = JSON.parse(localStorage.getItem('userData')) || {};\n    const u = Object.keys(d);\n    return u.length ? { username: u[0], password: d[u[0]].password } : null;\n}\n\nexport function handlePosts(posts) {\n    console.log(posts)\n    const postsContainer = document.getElementById('post-container');\n    posts.forEach(post => {\n        const postHtml = createPost(post);\n        postsContainer.innerHTML += postHtml;\n    });\n}\n\nexport function handleNewPost(post) {\n    const postsContainer = document.getElementById('post-container');\n    const postHtml = createPost(post);\n    postsContainer.innerHTML = postHtml + postsContainer.innerHTML;\n}\n\nexport function handleUlist(ulist) {\n    const ulistElement = document.getElementById('ulist');\n    const users = Object.keys(ulist).map(u => {\n        const client = ulist[u]\n        let title;\n            if (client === 'DeerChat') {\n                title='This user is using the amazing epic sauce best looking client around... DeerChat!!'\n            } else {\n                title=`This user is using ${client}`\n            }\n        return `<a class=\"profile-link\" href=\"#profile?user=${u}\" title=\"${title}\">${u}</a>`\n    }).join(', ');\n    const userCount = Object.keys(ulist).length\n    let ulistHtml;\n        if (userCount > 1) { \n        ulistHtml = `(${userCount}) Users: ${users}`;\n    } else {\n        ulistHtml = `You are the only user online :(`\n    }\n    ulistElement.innerHTML = ulistHtml + `<br/>`;\n}\n\nconst u = getUserCredentials();\nif (u) {\n    connectToWebSocket(u.username, u.password)\n        .then((webSocket) => {\n            ws = webSocket;\n            console.log(\"WebSocket connection is open!\");\n        })\n        .catch((error) => {\n            console.error(\"Failed to connect to WebSocket:\", error);\n        });\n} else {\n    console.error('User data not found in localStorage.');\n}\n\nfunction sendPost() {\n    let message = document.getElementById(\"commentbox\");\n    if (ws && ws.readyState === WebSocket.OPEN) {\n        const postCommand = JSON.stringify({\n            command: \"post\",\n            content: message.value,\n            replies: replies,\n            attachments: attachmentURls\n            ,\n        });\n        ws.send(postCommand);\n        message.value = \"\";\n        clearReplies();\n        clearAttachmentURls();\n    } else {\n        console.error(\"WebSocket connection is not open.\");\n    }\n}\n\nfunction showPageFromHash() {\n    let hash = window.location.hash\n    if (!hash.startsWith('#')) {\n      hash = hash.split('#')[1] || ''\n    }\n    const hashParts = hash.split('?');\n    const pageId = hashParts[0].substring(1) || \"home\";\n    const query = hashParts[1];\n    const allPages = document.querySelectorAll(\".page\");\n    allPages.forEach(page => page.classList.remove(\"active\"));\n    const pageToShow = document.getElementById(`${pageId}-page`);\n    if (pageToShow) {\n        pageToShow.classList.add(\"active\");\n        switch (pageId) {\n            case \"profile\":\n                loadProfilePage(query)\n                break;\n            case \"home\":\n                loadHomePage();\n                break;\n            case \"login\":\n                loadLoginPage()\n                break;\n        }\n    }\n    else {\n        document.getElementById('not-found-page').classList.add('active');\n    }\n}\n\nwindow.addEventListener(\"hashchange\", showPageFromHash);\nwindow.onload = () => showPageFromHash()\n\nconst contentDiv = document.getElementById(\"content\");\ncontentDiv.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    if (event.target.matches(\".profile-link\")) {\n        const url = event.target.getAttribute(\"href\");\n        const username = new URLSearchParams(url.split('?')[1]).get('user');\n        window.location.hash = `#profile?user=${username}`;\n    } else if (event.target.matches(\".reply-link\")) {\n        const postId = Number(event.target.getAttribute('post_id'));\n        replies.push(postId);\n        replies_details.innerHTML = `${replies.length} Replies - <span class=\"link\" id=\"clear-replies\">Remove All</span>`;\n        const removeAll = document.getElementById(\"clear-replies\");\n        if (removeAll) {\n            removeAll.addEventListener(\"click\", clearReplies);\n        }\n    } else if (event.target.matches(\"#clear-replies\")) {\n        clearReplies();\n    }\n});\n\nconst attachButton = document.getElementById('attach-btn')\nattachButton ? document.querySelector(\"#attach-btn\").onclick = (event) => {\n    event.preventDefault()\n    let result = prompt(\"Attach a file? (Enter a URL):\")\n    if (result) {\n        attachmentURls.push(result)\n    }\n} : null;\n\nfunction loadHomePage() {\n    const sendButton = document.getElementById(\"send-button\");\n    if (sendButton) { sendButton.addEventListener(\"click\", sendPost) }\n}\n\nfunction loadProfilePage(query) {\n    if (!query) return;\n    const username = new URLSearchParams(query).get('user');\n    if (!username) return;\n\n    const contentDiv = document.getElementById(\"profile-page\");\n    if (!contentDiv) { console.error(\"Could not find profile-page\"); return }\n\n    const handleUserData = (userData) => {\n        user = userData;\n        const md = MarkdownIt();\n        const mdBio = md.render(user.bio);\n        const userPermissions = user.permissions.map(permission => permission).join(', ');\n        console.log(user);\n\n        const contentDiv = document.getElementById(\"profile-page\");\n        if (!contentDiv) { console.error(\"Could not find profile-page\"); return }\n        contentDiv.innerHTML = `\n        <div style=\"display: flex\">\n            <div id=\"profile-pic\">\n                <img src=\"${user.avatar || `/assets/default.png`}\"/>\n            </div>\n            <div style=\"width: 100%\">\n                <h1>${user.display_name}</h1>\n                <small>@${user.username}</small>\n                <p>Joined: ${new Date(user.created * 1000).toLocaleString()}</p>\n                <p>Permissions: ${userPermissions}</p>\n                <hr>\n                <p>${mdBio}</p>\n            </div>\n        </div>\n      `;\n    };\n\n    const sendGetUserCommand = () => {\n        ws.send(JSON.stringify({ command: \"get_user\", username }));\n        ws.onmessage = (e) => {\n            const parsedData = JSON.parse(e.data);\n            if (parsedData.user) {\n                handleUserData(parsedData.user);\n            }\n            ws.onmessage = null;\n        };\n    };\n\n    const waitForWebSocket = () => {\n        if (ws?.readyState === WebSocket.OPEN) {\n            console.log(\"WebSocket is now open.\");\n            sendGetUserCommand();\n        } else {\n            console.log(\"WebSocket not open, waiting for connection...\");\n            setTimeout(waitForWebSocket, 100);\n        }\n    };\n\n    if (ws?.readyState === WebSocket.OPEN) {\n        sendGetUserCommand();\n    } else {\n        waitForWebSocket();\n    }\n}\n\nfunction loadLoginPage() {\n    const contentDiv = document.getElementById(\"login-page\");\n    if (!contentDiv) { console.error(\"Could not find login-page\"); return }\n\n    contentDiv.innerHTML = `\n    <h1>Login - DeerChat</h1>\n    <form id=\"login-form\" action=\"\" method=\"post\">\n      Username:\n      <br>\n      <input type=\"text\" id=\"username\" aria required></input>\n      <br>\n      Password:\n      <br>\n      <input type=\"password\" id=\"password\" aria required></input>\n      <br>\n      <input id=\"submit\" type=\"submit\" name=\"Submit!\"></input>\n    </form>\n  `;\n  \n    const storedUserData = JSON.parse(localStorage.getItem('userData')) || {};\n    const loginElement = document.getElementById('login-form');\n\n    if (loginElement) {\n        document.querySelector(\"#submit\").onclick = (event) => {\n        event.preventDefault();\n        const username = document.getElementById('username').value;\n        const password = document.getElementById('password').value;\n        console.log(username, password)\n\n        ws = new WebSocket('wss://sokt.fraudulent.loan/');\n\n        ws.onopen = () => {\n            ws.send(JSON.stringify({\n                command: \"login_pswd\",\n                username: username,\n                password: password,\n                listener: \"RegisterLoginPswdListener\"\n            }));\n        };\n\n        ws.onmessage = function (event) {\n            console.log(\"Message received:\", event.data);\n            const response = JSON.parse(event.data);\n\n            if (response.token && !response.error) {\n                localStorage.setItem('token', response.token);\n                storedUserData[username] = {\n                    password: password,\n                    token: response.token\n                };\n                localStorage.setItem('userData', JSON.stringify(storedUserData));\n                ws.close();\n                window.location.href = '';\n            } else {\n                console.error(\"Login failed:\", response.error);\n            }\n        };\n\n        ws.onerror = function (error) { console.error(\"WebSocket error:\", error) }\n        ws.onclose = function (event) { console.log(\"WebSocket connection closed:\", event) }\n    }\n    }\n}","import { handlePosts, handleNewPost, handleUlist } from './loadCorrectPage.js';\n\nexport function connectToWebSocket(u, p) {\n    return new Promise((resolve, reject) => {\n        const ws = new WebSocket('wss://sokt.fraudulent.loan/');\n\n        ws.onopen = () => {\n            ws.send(JSON.stringify({\n                command: 'login_pswd',\n                username: u,\n                password: p,\n                client: 'DeerChat'\n            }));\n            resolve(ws);\n        };\n\n        ws.onmessage = (e) => {\n            try {\n                const r = JSON.parse(e.data);\n                if (r.listener === 'RegisterLoginPswdListener' && !r.error) {\n                    localStorage.setItem('token', r.token);\n                    const d = JSON.parse(localStorage.getItem('userData')) || {};\n                    if (d[r.user.username]) { d[r.user.username].token = r.token; }\n                    localStorage.setItem('userData', JSON.stringify(d));\n                } \n                if (r) {\n                    switch(r.command) {\n                        case 'greet':\n                            handlePosts(r.messages)\n                            r.ulist && console.log('Received user list:', r.ulist);\n                            break;\n                        case 'new_post':\n                            handleNewPost(r.data);\n                            break;\n                        case 'ulist':\n                            handleUlist(r.ulist);\n                            break;\n                        case 'error':\n                            console.error('Error:', r);\n                            break;\n                        default:\n                            console.log(r);\n                            break; \n                    }\n                }\n            } catch (e) {\n                console.error('Error parsing JSON:', e);\n            }\n        };\n\n        ws.onerror = (e) => {\n            console.error('WebSocket error:', e);\n            reject(e); // Reject the promise on error\n        };\n        ws.onclose = (e) => console.log('WebSocket connection closed:', e);\n    });\n}\n","import xss from 'xss';\nimport MarkdownIt from 'markdown-it';\n\nfunction createPost(post) {\n  if (!post || typeof post.content !== 'string') {\n    return '';\n  }\n\n  const convertedToTimeStamp = new Date(post.created * 1000);\n  let message = xss((post.content));\n  const md = MarkdownIt({ \n    breaks: true,\n    langPrefix:   'language-', \n    typographer:  false,\n  });\n  \n  message = md.renderInline(message);\n  message = message\n  .replace(/\\[b](.*?)\\[\\/b]/g, '<strong>$1</strong>') // bold\n  .replace(/\\[u](.*?)\\[\\/u]/g, '<u>$1</u>') // underline\n  .replace(/\\[s](.*?)\\[\\/s]/g, '<strike>$1</strike>') // strikethrough\n  .replace(/\\[i](.*?)\\[\\/i]/g, '<em>$1</em>') // italic\n  .replace(/\\[marquee](.*?)\\[\\/marquee]/g, '<marquee>$1</marquee>') // marquee\n  .replace(/\\[url=(.*?)](.*?)\\[\\/url]/g, '<a href=\"$1\">$2</a>') // links\n  .replace(/\\[code](.*?)\\[\\/code]/gs, '<pre><code>$1</code></pre>') // code blocks\n  .replace(/\\[rainbow](.*?)\\[\\/rainbow]/g, '<rainbow>$1</rainbow>') // rainbow text\n  .replace(/\\[img](.*?)\\[\\/img]/g, '<img src=\"$1\" />') // images\n  .replace(/\\[size=(.*?)\\](.*?)\\[\\/size]/g, '<span style=\"font-size: $1;\">$2</span>') // font size\n  .replace(/\\[color=((?:[a-zA-Z]+)|(?:#[0-9a-fA-F]{3})|(?:#[0-9a-fA-F]{4})|(?:#[0-9a-fA-F]{6})|(?:#[0-9a-fA-F]{8}))]([^[]+)\\[\\/color]/g, '<span style=\"color: $1;\">$2</span>') // color\n  .replace(/\\[center](.*?)\\[\\/center]/g, '<center>$1</center>') // center\n  .replace(/\\[left](.*?)\\[\\/left]/g, '<p align=\"left\">$1</p>') // left align\n  .replace(/\\[right](.*?)\\[\\/right]/g, '<p align=\"right\">$1</p>') // right align\n  .replace(/\\[quote\\](.*?)\\[\\/quote]/g, '<blockquote>$1</blockquote>') // quote\n  .replace(/\\[list]((?:\\[\\*].*?)+)\\[\\/list]/g, '<ul>$1</ul>') // unordered list\n  .replace(/\\[\\*](.*?)/g, '<li>$1</li>') // list items\n  .replace(/\\[olist]((?:\\[\\*].*?)+)\\[\\/olist]/g, '<ol>$1</ol>') // ordered list\n  .replace(/\\[h([1-6])](.*?)\\[\\/h\\1]/g, '<h$1>$2</h$1>') // headers\n  .replace(/\\[hr\\]/g, '<hr>') // horizontal rule\n  .replace(/([a-z]+:\\/\\/[^\\s]+)/g, match => `<a href=\"${match}\">${match}</a>`) // URLs\n  .replace(/<(a)?:(\\w+):(\\d+)>/gi, (match, a, name, id) => {\n    const ext = a ? 'gif' : 'webp';\n    return `<img class=\"emoji\" src=\"https://cdn.discordapp.com/emojis/${id}.${ext}?size=128&quality=lossless\" alt=\"${name}\">`;\n  }); // Discord emojis\n\n  let attachmentsHtml = '';\n  if (post.attachments && post.attachments.length > 0) {\n    attachmentsHtml = post.attachments.map(attachment => `<img src=\"${attachment}\" />`).join('');\n  }\n\n  let postReplies = '';\n  if (post.replies && post.replies.length > 0) {\n    postReplies = post.replies.map(reply => \n      `<img style=\"width: 24px\" src=${reply.author.avatar || `./assets/default.png`}>\n        <span class=\"reply-displayname\">\n        <a href=\"\">@${reply.author.username}</a>\n        </span>: ${md.renderInline(xss(reply.content))}\n      <br>`\n    ).join('');\n  }\n\n  return `\n  <div class=\"post\" post_id=\"${post.id}\">\n    <div class=\"post-profilepicture\">\n      <img src=${post.author.avatar || `/assets/default.png`}>\n    </div>\n    <div>\n      <div>\n        <span class=\"post-replies\">\n          ${postReplies}\n        </span>\n        <span class=\"post-displayname\">\n          <a href=\"/profile?user=${post.author.username}\" class=\"profile-link\">\n            ${post.author.display_name} \n          </a>\n          <span class=\"post-username\">\n            (@${post.author.username})\n          </span>\n        </span>\n        <span class=\"post-message\">: ${message}</span>\n      </div>\n      <div>\n        <span class=\"post-attachments\">\n        ${attachmentsHtml}\n        </span>\n      </div>\n      <div>\n        <a href=\"\" post_id=\"${post.id}\" class=\"reply-link\">Reply</a>\n        <span class=\"post-timestamp\">\n        &#183;\t${convertedToTimeStamp.toLocaleString()}\n        </span>\n      </div>\n    </div>\n  </div>`\n  ;\n}\n\nexport { createPost };","export { default } from './lib/index.mjs'\n","// Main parser class\n\nimport * as utils from './common/utils.mjs'\nimport * as helpers from './helpers/index.mjs'\nimport Renderer from './renderer.mjs'\nimport ParserCore from './parser_core.mjs'\nimport ParserBlock from './parser_block.mjs'\nimport ParserInline from './parser_inline.mjs'\nimport LinkifyIt from 'linkify-it'\nimport * as mdurl from 'mdurl'\nimport punycode from 'punycode.js'\n\nimport cfg_default from './presets/default.mjs'\nimport cfg_zero from './presets/zero.mjs'\nimport cfg_commonmark from './presets/commonmark.mjs'\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n}\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/\n\nfunction validateLink (url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase()\n\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true\n}\n\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']\n\nfunction normalizeLink (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed))\n}\n\nfunction normalizeLinkText (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%')\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt (presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options)\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {}\n      presetName = 'default'\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline()\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock()\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore()\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n   **/\n  this.renderer = new Renderer()\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt()\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers)\n\n  this.options = {}\n  this.configure(presetName)\n\n  if (options) { this.set(options) }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options)\n  return this\n}\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this\n\n  if (utils.isString(presets)) {\n    const presetName = presets\n    presets = config[presetName]\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name') }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty') }\n\n  if (presets.options) { self.set(presets.options) }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules)\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2)\n      }\n    })\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.enable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)\n  }\n\n  return this\n}\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.disable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1))\n  plugin.apply(plugin, args)\n  return this\n}\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String')\n  }\n\n  const state = new this.core.State(src, this, env)\n\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parse(src, env), this.options, env)\n}\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env)\n\n  state.inlineMode = true\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env)\n}\n\nexport default MarkdownIt\n","// Utilities\n//\n\nimport * as mdurl from 'mdurl'\nimport * as ucmicro from 'uc.micro'\nimport { decodeHTML } from 'entities'\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\n\nfunction isString (obj) { return _class(obj) === '[object String]' }\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty\n\nfunction has (object, key) {\n  return _hasOwnProperty.call(object, key)\n}\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object')\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt (src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1))\n}\n\nfunction isValidEntityCode (c) {\n  /* eslint no-bitwise:0 */\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false }\n  if (c === 0x0B) { return false }\n  if (c >= 0x0E && c <= 0x1F) { return false }\n  if (c >= 0x7F && c <= 0x9F) { return false }\n  // out of range\n  if (c > 0x10FFFF) { return false }\n  return true\n}\n\nfunction fromCodePoint (c) {\n  /* eslint no-bitwise:0 */\n  if (c > 0xffff) {\n    c -= 0x10000\n    const surrogate1 = 0xd800 + (c >> 10)\n    const surrogate2 = 0xdc00 + (c & 0x3ff)\n\n    return String.fromCharCode(surrogate1, surrogate2)\n  }\n  return String.fromCharCode(c)\n}\n\nconst UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g\nconst ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi\nconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi')\n\nconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i\n\nfunction replaceEntityPattern (match, name) {\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    const code = name[1].toLowerCase() === 'x'\n      ? parseInt(name.slice(2), 16)\n      : parseInt(name.slice(1), 10)\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code)\n    }\n\n    return match\n  }\n\n  const decoded = decodeHTML(match)\n  if (decoded !== match) {\n    return decoded\n  }\n\n  return match\n}\n\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */\n\nfunction unescapeMd (str) {\n  if (str.indexOf('\\\\') < 0) { return str }\n  return str.replace(UNESCAPE_MD_RE, '$1')\n}\n\nfunction unescapeAll (str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped }\n    return replaceEntityPattern(match, entity)\n  })\n}\n\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n}\n\nfunction replaceUnsafeChar (ch) {\n  return HTML_REPLACEMENTS[ch]\n}\n\nfunction escapeHtml (str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar)\n  }\n  return str\n}\n\nconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g\n\nfunction escapeRE (str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&')\n}\n\nfunction isSpace (code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true\n  }\n  return false\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace (code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true\n  }\n  return false\n}\n\n/* eslint-disable max-len */\n\n// Currently without astral characters support.\nfunction isPunctChar (ch) {\n  return ucmicro.P.test(ch) || ucmicro.S.test(ch)\n}\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct (ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference (str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ')\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß')\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase()\n}\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst lib = { mdurl, ucmicro }\n\nexport {\n  lib,\n  assign,\n  isString,\n  has,\n  unescapeMd,\n  unescapeAll,\n  isValidEntityCode,\n  fromCodePoint,\n  escapeHtml,\n  arrayReplaceAt,\n  isSpace,\n  isWhiteSpace,\n  isMdAsciiPunct,\n  isPunctChar,\n  escapeRE,\n  normalizeReference\n}\n","import decode from './lib/decode.mjs'\nimport encode from './lib/encode.mjs'\nimport format from './lib/format.mjs'\nimport parse from './lib/parse.mjs'\n\nexport {\n  decode,\n  encode,\n  format,\n  parse\n}\n","/* eslint-disable no-bitwise */\n\nconst decodeCache = {}\n\nfunction getDecodeCache (exclude) {\n  let cache = decodeCache[exclude]\n  if (cache) { return cache }\n\n  cache = decodeCache[exclude] = []\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i)\n    cache.push(ch)\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    const ch = exclude.charCodeAt(i)\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2)\n  }\n\n  return cache\n}\n\n// Decode percent-encoded string.\n//\nfunction decode (string, exclude) {\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars\n  }\n\n  const cache = getDecodeCache(exclude)\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {\n    let result = ''\n\n    for (let i = 0, l = seq.length; i < l; i += 3) {\n      const b1 = parseInt(seq.slice(i + 1, i + 3), 16)\n\n      if (b1 < 0x80) {\n        result += cache[b1]\n        continue\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n\n        if ((b2 & 0xC0) === 0x80) {\n          const chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F)\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd'\n          } else {\n            result += String.fromCharCode(chr)\n          }\n\n          i += 3\n          continue\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          const chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F)\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd'\n          } else {\n            result += String.fromCharCode(chr)\n          }\n\n          i += 6\n          continue\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)\n        const b4 = parseInt(seq.slice(i + 10, i + 12), 16)\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          let chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F)\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd'\n          } else {\n            chr -= 0x10000\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF))\n          }\n\n          i += 9\n          continue\n        }\n      }\n\n      result += '\\ufffd'\n    }\n\n    return result\n  })\n}\n\ndecode.defaultChars = ';/?:@&=+$,#'\ndecode.componentChars = ''\n\nexport default decode\n","const encodeCache = {}\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache (exclude) {\n  let cache = encodeCache[exclude]\n  if (cache) { return cache }\n\n  cache = encodeCache[exclude] = []\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i)\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch)\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2))\n    }\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i]\n  }\n\n  return cache\n}\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode (string, exclude, keepEscaped) {\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped = exclude\n    exclude = encode.defaultChars\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true\n  }\n\n  const cache = getEncodeCache(exclude)\n  let result = ''\n\n  for (let i = 0, l = string.length; i < l; i++) {\n    const code = string.charCodeAt(i)\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3)\n        i += 2\n        continue\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code]\n      continue\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        const nextCode = string.charCodeAt(i + 1)\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1])\n          i++\n          continue\n        }\n      }\n      result += '%EF%BF%BD'\n      continue\n    }\n\n    result += encodeURIComponent(string[i])\n  }\n\n  return result\n}\n\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\"\nencode.componentChars = \"-_.!~*'()\"\n\nexport default encode\n","export default function format (url) {\n  let result = ''\n\n  result += url.protocol || ''\n  result += url.slashes ? '//' : ''\n  result += url.auth ? url.auth + '@' : ''\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']'\n  } else {\n    result += url.hostname || ''\n  }\n\n  result += url.port ? ':' + url.port : ''\n  result += url.pathname || ''\n  result += url.search || ''\n  result += url.hash || ''\n\n  return result\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\nfunction Url () {\n  this.protocol = null\n  this.slashes = null\n  this.auth = null\n  this.port = null\n  this.hostname = null\n  this.hash = null\n  this.search = null\n  this.pathname = null\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst protocolPattern = /^([a-z0-9.+-]+:)/i\nconst portPattern = /:[0-9]*$/\n\n// Special case for a simple path URL\n/* eslint-disable-next-line no-useless-escape */\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/\n\n// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\nconst delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t']\n\n// RFC 2396: characters not allowed for various reasons.\nconst unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims)\n\n// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nconst autoEscape = ['\\''].concat(unwise)\n// Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nconst nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape)\nconst hostEndingChars = ['/', '?', '#']\nconst hostnameMaxLen = 255\nconst hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/\nconst hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/\n// protocols that can allow \"unsafe\" and \"unwise\" chars.\n// protocols that never have a hostname.\nconst hostlessProtocol = {\n  javascript: true,\n  'javascript:': true\n}\n// protocols that always contain a // bit.\nconst slashedProtocol = {\n  http: true,\n  https: true,\n  ftp: true,\n  gopher: true,\n  file: true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n}\n\nfunction urlParse (url, slashesDenoteHost) {\n  if (url && url instanceof Url) return url\n\n  const u = new Url()\n  u.parse(url, slashesDenoteHost)\n  return u\n}\n\nUrl.prototype.parse = function (url, slashesDenoteHost) {\n  let lowerProto, hec, slashes\n  let rest = url\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim()\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    const simplePath = simplePathPattern.exec(rest)\n    if (simplePath) {\n      this.pathname = simplePath[1]\n      if (simplePath[2]) {\n        this.search = simplePath[2]\n      }\n      return this\n    }\n  }\n\n  let proto = protocolPattern.exec(rest)\n  if (proto) {\n    proto = proto[0]\n    lowerProto = proto.toLowerCase()\n    this.protocol = proto\n    rest = rest.substr(proto.length)\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  /* eslint-disable-next-line no-useless-escape */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//'\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2)\n      this.slashes = true\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    let hostEnd = -1\n    for (let i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i])\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    let auth, atSign\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@')\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd)\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign)\n      rest = rest.slice(atSign + 1)\n      this.auth = auth\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1\n    for (let i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i])\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd-- }\n    const host = rest.slice(0, hostEnd)\n    rest = rest.slice(hostEnd)\n\n    // pull out port.\n    this.parseHost(host)\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || ''\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    const ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']'\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      const hostparts = this.hostname.split(/\\./)\n      for (let i = 0, l = hostparts.length; i < l; i++) {\n        const part = hostparts[i]\n        if (!part) { continue }\n        if (!part.match(hostnamePartPattern)) {\n          let newpart = ''\n          for (let j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x'\n            } else {\n              newpart += part[j]\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            const validParts = hostparts.slice(0, i)\n            const notHost = hostparts.slice(i + 1)\n            const bit = part.match(hostnamePartStart)\n            if (bit) {\n              validParts.push(bit[1])\n              notHost.unshift(bit[2])\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest\n            }\n            this.hostname = validParts.join('.')\n            break\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = ''\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2)\n    }\n  }\n\n  // chop off from the tail first.\n  const hash = rest.indexOf('#')\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash)\n    rest = rest.slice(0, hash)\n  }\n  const qm = rest.indexOf('?')\n  if (qm !== -1) {\n    this.search = rest.substr(qm)\n    rest = rest.slice(0, qm)\n  }\n  if (rest) { this.pathname = rest }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = ''\n  }\n\n  return this\n}\n\nUrl.prototype.parseHost = function (host) {\n  let port = portPattern.exec(host)\n  if (port) {\n    port = port[0]\n    if (port !== ':') {\n      this.port = port.substr(1)\n    }\n    host = host.substr(0, host.length - port.length)\n  }\n  if (host) { this.hostname = host }\n}\n\nexport default urlParse\n","import Any from './properties/Any/regex.mjs';\nimport Cc  from './categories/Cc/regex.mjs';\nimport Cf  from './categories/Cf/regex.mjs';\nimport P   from './categories/P/regex.mjs';\nimport S   from './categories/S/regex.mjs';\nimport Z   from './categories/Z/regex.mjs';\n\nexport { Any, Cc, Cf, P, S, Z };\n","export default /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","export default /[\\0-\\x1F\\x7F-\\x9F]/","export default /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD80D[\\uDC30-\\uDC3F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","export default /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","export default /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u0888\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC2\\uFD40-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD833[\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0\\uDCB1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC5\\uDECE-\\uDEDB\\uDEE0-\\uDEE8\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFCA]/","export default /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","import { decodeXML, decodeHTML, DecodingMode } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\n/** The level of entities to support. */\nexport var EntityLevel;\n(function (EntityLevel) {\n    /** Support only XML entities. */\n    EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */\n    EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\nexport var EncodingMode;\n(function (EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */\n    EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */\n    EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */\n    EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\nexport function decode(data, options = EntityLevel.XML) {\n    const level = typeof options === \"number\" ? options : options.level;\n    if (level === EntityLevel.HTML) {\n        const mode = typeof options === \"object\" ? options.mode : undefined;\n        return decodeHTML(data, mode);\n    }\n    return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\nexport function decodeStrict(data, options = EntityLevel.XML) {\n    var _a;\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    (_a = opts.mode) !== null && _a !== void 0 ? _a : (opts.mode = DecodingMode.Strict);\n    return decode(data, opts);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\nexport function encode(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === EncodingMode.UTF8)\n        return escapeUTF8(data);\n    if (opts.mode === EncodingMode.Attribute)\n        return escapeAttribute(data);\n    if (opts.mode === EncodingMode.Text)\n        return escapeText(data);\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === EncodingMode.ASCII) {\n            return encodeNonAsciiHTML(data);\n        }\n        return encodeHTML(data);\n    }\n    // ASCII and Extensive are equivalent\n    return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML, \n// Legacy aliases (deprecated)\nencodeHTML as encodeHTML4, encodeHTML as encodeHTML5, } from \"./encode.js\";\nexport { EntityDecoder, DecodingMode, decodeXML, decodeHTML, decodeHTMLStrict, decodeHTMLAttribute, \n// Legacy aliases (deprecated)\ndecodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict, } from \"./decode.js\";\n//# sourceMappingURL=index.js.map",null,"import htmlDecodeTree from \"./generated/decode-data-html.js\";\nimport xmlDecodeTree from \"./generated/decode-data-xml.js\";\nimport decodeCodePoint, { replaceCodePoint, fromCodePoint, } from \"./decode_codepoint.js\";\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree, xmlDecodeTree, decodeCodePoint };\nexport { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nconst TO_LOWER_BIT = 0b100000;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nexport class EntityDecoder {\n    constructor(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    write(str, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (str.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(str, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(str, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(str, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(str, offset);\n            }\n        }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericStart(str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    }\n    addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n            const digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericHex(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericDecimal(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNamedEntity(str, offset) {\n        const { decodeTree } = this;\n        let current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n            const char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNotTerminatedNamedEntity() {\n        var _a;\n        const { result, decodeTree } = this;\n        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNamedEntityData(result, valueLength, consumed) {\n        const { decodeTree } = this;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    end() {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    let ret = \"\";\n    const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));\n    return function decodeWithTrie(str, decodeMode) {\n        let lastIndex = 0;\n        let offset = 0;\n        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            const len = decoder.write(str, \n            // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        const result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nexport function determineBranch(decodeTree, current, nodeIdx, char) {\n    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        const value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    let lo = nodeIdx;\n    let hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nconst htmlDecoder = getDecoder(htmlDecodeTree);\nconst xmlDecoder = getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nexport function decodeHTML(str, mode = DecodingMode.Legacy) {\n    return htmlDecoder(str, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\n//# sourceMappingURL=decode.js.map",null,"// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-html.js.map",null,"// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-xml.js.map",null,"// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([\n    [0, 65533],\n    // C1 Unicode control character reference replacements\n    [128, 8364],\n    [130, 8218],\n    [131, 402],\n    [132, 8222],\n    [133, 8230],\n    [134, 8224],\n    [135, 8225],\n    [136, 710],\n    [137, 8240],\n    [138, 352],\n    [139, 8249],\n    [140, 338],\n    [142, 381],\n    [145, 8216],\n    [146, 8217],\n    [147, 8220],\n    [148, 8221],\n    [149, 8226],\n    [150, 8211],\n    [151, 8212],\n    [152, 732],\n    [153, 8482],\n    [154, 353],\n    [155, 8250],\n    [156, 339],\n    [158, 382],\n    [159, 376],\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */\nexport const fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n    let output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */\nexport function replaceCodePoint(codePoint) {\n    var _a;\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return 0xfffd;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */\nexport default function decodeCodePoint(codePoint) {\n    return fromCodePoint(replaceCodePoint(codePoint));\n}\n//# sourceMappingURL=decode_codepoint.js.map",null,"import htmlTrie from \"./generated/encode-html.js\";\nimport { xmlReplacer, getCodePoint } from \"./escape.js\";\nconst htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nexport function encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nexport function encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(xmlReplacer, data);\n}\nfunction encodeHTMLTrieRe(regExp, str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while ((match = regExp.exec(str)) !== null) {\n        const i = match.index;\n        ret += str.substring(lastIdx, i);\n        const char = str.charCodeAt(i);\n        let next = htmlTrie.get(char);\n        if (typeof next === \"object\") {\n            // We are in a branch. Try to match the next char.\n            if (i + 1 < str.length) {\n                const nextChar = str.charCodeAt(i + 1);\n                const value = typeof next.n === \"number\"\n                    ? next.n === nextChar\n                        ? next.o\n                        : undefined\n                    : next.n.get(nextChar);\n                if (value !== undefined) {\n                    ret += value;\n                    lastIdx = regExp.lastIndex += 1;\n                    continue;\n                }\n            }\n            next = next.v;\n        }\n        // We might have a tree node without a value; skip and use a numeric entity.\n        if (next !== undefined) {\n            ret += next;\n            lastIdx = i + 1;\n        }\n        else {\n            const cp = getCodePoint(str, i);\n            ret += `&#x${cp.toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = regExp.lastIndex += Number(cp !== char);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n//# sourceMappingURL=encode.js.map",null,"// Generated using scripts/write-encode-map.ts\nfunction restoreDiff(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        arr[i][0] += arr[i - 1][0] + 1;\n    }\n    return arr;\n}\n// prettier-ignore\nexport default new Map(/* #__PURE__ */ restoreDiff([[9, \"&Tab;\"], [0, \"&NewLine;\"], [22, \"&excl;\"], [0, \"&quot;\"], [0, \"&num;\"], [0, \"&dollar;\"], [0, \"&percnt;\"], [0, \"&amp;\"], [0, \"&apos;\"], [0, \"&lpar;\"], [0, \"&rpar;\"], [0, \"&ast;\"], [0, \"&plus;\"], [0, \"&comma;\"], [1, \"&period;\"], [0, \"&sol;\"], [10, \"&colon;\"], [0, \"&semi;\"], [0, { v: \"&lt;\", n: 8402, o: \"&nvlt;\" }], [0, { v: \"&equals;\", n: 8421, o: \"&bne;\" }], [0, { v: \"&gt;\", n: 8402, o: \"&nvgt;\" }], [0, \"&quest;\"], [0, \"&commat;\"], [26, \"&lbrack;\"], [0, \"&bsol;\"], [0, \"&rbrack;\"], [0, \"&Hat;\"], [0, \"&lowbar;\"], [0, \"&DiacriticalGrave;\"], [5, { n: 106, o: \"&fjlig;\" }], [20, \"&lbrace;\"], [0, \"&verbar;\"], [0, \"&rbrace;\"], [34, \"&nbsp;\"], [0, \"&iexcl;\"], [0, \"&cent;\"], [0, \"&pound;\"], [0, \"&curren;\"], [0, \"&yen;\"], [0, \"&brvbar;\"], [0, \"&sect;\"], [0, \"&die;\"], [0, \"&copy;\"], [0, \"&ordf;\"], [0, \"&laquo;\"], [0, \"&not;\"], [0, \"&shy;\"], [0, \"&circledR;\"], [0, \"&macr;\"], [0, \"&deg;\"], [0, \"&PlusMinus;\"], [0, \"&sup2;\"], [0, \"&sup3;\"], [0, \"&acute;\"], [0, \"&micro;\"], [0, \"&para;\"], [0, \"&centerdot;\"], [0, \"&cedil;\"], [0, \"&sup1;\"], [0, \"&ordm;\"], [0, \"&raquo;\"], [0, \"&frac14;\"], [0, \"&frac12;\"], [0, \"&frac34;\"], [0, \"&iquest;\"], [0, \"&Agrave;\"], [0, \"&Aacute;\"], [0, \"&Acirc;\"], [0, \"&Atilde;\"], [0, \"&Auml;\"], [0, \"&angst;\"], [0, \"&AElig;\"], [0, \"&Ccedil;\"], [0, \"&Egrave;\"], [0, \"&Eacute;\"], [0, \"&Ecirc;\"], [0, \"&Euml;\"], [0, \"&Igrave;\"], [0, \"&Iacute;\"], [0, \"&Icirc;\"], [0, \"&Iuml;\"], [0, \"&ETH;\"], [0, \"&Ntilde;\"], [0, \"&Ograve;\"], [0, \"&Oacute;\"], [0, \"&Ocirc;\"], [0, \"&Otilde;\"], [0, \"&Ouml;\"], [0, \"&times;\"], [0, \"&Oslash;\"], [0, \"&Ugrave;\"], [0, \"&Uacute;\"], [0, \"&Ucirc;\"], [0, \"&Uuml;\"], [0, \"&Yacute;\"], [0, \"&THORN;\"], [0, \"&szlig;\"], [0, \"&agrave;\"], [0, \"&aacute;\"], [0, \"&acirc;\"], [0, \"&atilde;\"], [0, \"&auml;\"], [0, \"&aring;\"], [0, \"&aelig;\"], [0, \"&ccedil;\"], [0, \"&egrave;\"], [0, \"&eacute;\"], [0, \"&ecirc;\"], [0, \"&euml;\"], [0, \"&igrave;\"], [0, \"&iacute;\"], [0, \"&icirc;\"], [0, \"&iuml;\"], [0, \"&eth;\"], [0, \"&ntilde;\"], [0, \"&ograve;\"], [0, \"&oacute;\"], [0, \"&ocirc;\"], [0, \"&otilde;\"], [0, \"&ouml;\"], [0, \"&div;\"], [0, \"&oslash;\"], [0, \"&ugrave;\"], [0, \"&uacute;\"], [0, \"&ucirc;\"], [0, \"&uuml;\"], [0, \"&yacute;\"], [0, \"&thorn;\"], [0, \"&yuml;\"], [0, \"&Amacr;\"], [0, \"&amacr;\"], [0, \"&Abreve;\"], [0, \"&abreve;\"], [0, \"&Aogon;\"], [0, \"&aogon;\"], [0, \"&Cacute;\"], [0, \"&cacute;\"], [0, \"&Ccirc;\"], [0, \"&ccirc;\"], [0, \"&Cdot;\"], [0, \"&cdot;\"], [0, \"&Ccaron;\"], [0, \"&ccaron;\"], [0, \"&Dcaron;\"], [0, \"&dcaron;\"], [0, \"&Dstrok;\"], [0, \"&dstrok;\"], [0, \"&Emacr;\"], [0, \"&emacr;\"], [2, \"&Edot;\"], [0, \"&edot;\"], [0, \"&Eogon;\"], [0, \"&eogon;\"], [0, \"&Ecaron;\"], [0, \"&ecaron;\"], [0, \"&Gcirc;\"], [0, \"&gcirc;\"], [0, \"&Gbreve;\"], [0, \"&gbreve;\"], [0, \"&Gdot;\"], [0, \"&gdot;\"], [0, \"&Gcedil;\"], [1, \"&Hcirc;\"], [0, \"&hcirc;\"], [0, \"&Hstrok;\"], [0, \"&hstrok;\"], [0, \"&Itilde;\"], [0, \"&itilde;\"], [0, \"&Imacr;\"], [0, \"&imacr;\"], [2, \"&Iogon;\"], [0, \"&iogon;\"], [0, \"&Idot;\"], [0, \"&imath;\"], [0, \"&IJlig;\"], [0, \"&ijlig;\"], [0, \"&Jcirc;\"], [0, \"&jcirc;\"], [0, \"&Kcedil;\"], [0, \"&kcedil;\"], [0, \"&kgreen;\"], [0, \"&Lacute;\"], [0, \"&lacute;\"], [0, \"&Lcedil;\"], [0, \"&lcedil;\"], [0, \"&Lcaron;\"], [0, \"&lcaron;\"], [0, \"&Lmidot;\"], [0, \"&lmidot;\"], [0, \"&Lstrok;\"], [0, \"&lstrok;\"], [0, \"&Nacute;\"], [0, \"&nacute;\"], [0, \"&Ncedil;\"], [0, \"&ncedil;\"], [0, \"&Ncaron;\"], [0, \"&ncaron;\"], [0, \"&napos;\"], [0, \"&ENG;\"], [0, \"&eng;\"], [0, \"&Omacr;\"], [0, \"&omacr;\"], [2, \"&Odblac;\"], [0, \"&odblac;\"], [0, \"&OElig;\"], [0, \"&oelig;\"], [0, \"&Racute;\"], [0, \"&racute;\"], [0, \"&Rcedil;\"], [0, \"&rcedil;\"], [0, \"&Rcaron;\"], [0, \"&rcaron;\"], [0, \"&Sacute;\"], [0, \"&sacute;\"], [0, \"&Scirc;\"], [0, \"&scirc;\"], [0, \"&Scedil;\"], [0, \"&scedil;\"], [0, \"&Scaron;\"], [0, \"&scaron;\"], [0, \"&Tcedil;\"], [0, \"&tcedil;\"], [0, \"&Tcaron;\"], [0, \"&tcaron;\"], [0, \"&Tstrok;\"], [0, \"&tstrok;\"], [0, \"&Utilde;\"], [0, \"&utilde;\"], [0, \"&Umacr;\"], [0, \"&umacr;\"], [0, \"&Ubreve;\"], [0, \"&ubreve;\"], [0, \"&Uring;\"], [0, \"&uring;\"], [0, \"&Udblac;\"], [0, \"&udblac;\"], [0, \"&Uogon;\"], [0, \"&uogon;\"], [0, \"&Wcirc;\"], [0, \"&wcirc;\"], [0, \"&Ycirc;\"], [0, \"&ycirc;\"], [0, \"&Yuml;\"], [0, \"&Zacute;\"], [0, \"&zacute;\"], [0, \"&Zdot;\"], [0, \"&zdot;\"], [0, \"&Zcaron;\"], [0, \"&zcaron;\"], [19, \"&fnof;\"], [34, \"&imped;\"], [63, \"&gacute;\"], [65, \"&jmath;\"], [142, \"&circ;\"], [0, \"&caron;\"], [16, \"&breve;\"], [0, \"&DiacriticalDot;\"], [0, \"&ring;\"], [0, \"&ogon;\"], [0, \"&DiacriticalTilde;\"], [0, \"&dblac;\"], [51, \"&DownBreve;\"], [127, \"&Alpha;\"], [0, \"&Beta;\"], [0, \"&Gamma;\"], [0, \"&Delta;\"], [0, \"&Epsilon;\"], [0, \"&Zeta;\"], [0, \"&Eta;\"], [0, \"&Theta;\"], [0, \"&Iota;\"], [0, \"&Kappa;\"], [0, \"&Lambda;\"], [0, \"&Mu;\"], [0, \"&Nu;\"], [0, \"&Xi;\"], [0, \"&Omicron;\"], [0, \"&Pi;\"], [0, \"&Rho;\"], [1, \"&Sigma;\"], [0, \"&Tau;\"], [0, \"&Upsilon;\"], [0, \"&Phi;\"], [0, \"&Chi;\"], [0, \"&Psi;\"], [0, \"&ohm;\"], [7, \"&alpha;\"], [0, \"&beta;\"], [0, \"&gamma;\"], [0, \"&delta;\"], [0, \"&epsi;\"], [0, \"&zeta;\"], [0, \"&eta;\"], [0, \"&theta;\"], [0, \"&iota;\"], [0, \"&kappa;\"], [0, \"&lambda;\"], [0, \"&mu;\"], [0, \"&nu;\"], [0, \"&xi;\"], [0, \"&omicron;\"], [0, \"&pi;\"], [0, \"&rho;\"], [0, \"&sigmaf;\"], [0, \"&sigma;\"], [0, \"&tau;\"], [0, \"&upsi;\"], [0, \"&phi;\"], [0, \"&chi;\"], [0, \"&psi;\"], [0, \"&omega;\"], [7, \"&thetasym;\"], [0, \"&Upsi;\"], [2, \"&phiv;\"], [0, \"&piv;\"], [5, \"&Gammad;\"], [0, \"&digamma;\"], [18, \"&kappav;\"], [0, \"&rhov;\"], [3, \"&epsiv;\"], [0, \"&backepsilon;\"], [10, \"&IOcy;\"], [0, \"&DJcy;\"], [0, \"&GJcy;\"], [0, \"&Jukcy;\"], [0, \"&DScy;\"], [0, \"&Iukcy;\"], [0, \"&YIcy;\"], [0, \"&Jsercy;\"], [0, \"&LJcy;\"], [0, \"&NJcy;\"], [0, \"&TSHcy;\"], [0, \"&KJcy;\"], [1, \"&Ubrcy;\"], [0, \"&DZcy;\"], [0, \"&Acy;\"], [0, \"&Bcy;\"], [0, \"&Vcy;\"], [0, \"&Gcy;\"], [0, \"&Dcy;\"], [0, \"&IEcy;\"], [0, \"&ZHcy;\"], [0, \"&Zcy;\"], [0, \"&Icy;\"], [0, \"&Jcy;\"], [0, \"&Kcy;\"], [0, \"&Lcy;\"], [0, \"&Mcy;\"], [0, \"&Ncy;\"], [0, \"&Ocy;\"], [0, \"&Pcy;\"], [0, \"&Rcy;\"], [0, \"&Scy;\"], [0, \"&Tcy;\"], [0, \"&Ucy;\"], [0, \"&Fcy;\"], [0, \"&KHcy;\"], [0, \"&TScy;\"], [0, \"&CHcy;\"], [0, \"&SHcy;\"], [0, \"&SHCHcy;\"], [0, \"&HARDcy;\"], [0, \"&Ycy;\"], [0, \"&SOFTcy;\"], [0, \"&Ecy;\"], [0, \"&YUcy;\"], [0, \"&YAcy;\"], [0, \"&acy;\"], [0, \"&bcy;\"], [0, \"&vcy;\"], [0, \"&gcy;\"], [0, \"&dcy;\"], [0, \"&iecy;\"], [0, \"&zhcy;\"], [0, \"&zcy;\"], [0, \"&icy;\"], [0, \"&jcy;\"], [0, \"&kcy;\"], [0, \"&lcy;\"], [0, \"&mcy;\"], [0, \"&ncy;\"], [0, \"&ocy;\"], [0, \"&pcy;\"], [0, \"&rcy;\"], [0, \"&scy;\"], [0, \"&tcy;\"], [0, \"&ucy;\"], [0, \"&fcy;\"], [0, \"&khcy;\"], [0, \"&tscy;\"], [0, \"&chcy;\"], [0, \"&shcy;\"], [0, \"&shchcy;\"], [0, \"&hardcy;\"], [0, \"&ycy;\"], [0, \"&softcy;\"], [0, \"&ecy;\"], [0, \"&yucy;\"], [0, \"&yacy;\"], [1, \"&iocy;\"], [0, \"&djcy;\"], [0, \"&gjcy;\"], [0, \"&jukcy;\"], [0, \"&dscy;\"], [0, \"&iukcy;\"], [0, \"&yicy;\"], [0, \"&jsercy;\"], [0, \"&ljcy;\"], [0, \"&njcy;\"], [0, \"&tshcy;\"], [0, \"&kjcy;\"], [1, \"&ubrcy;\"], [0, \"&dzcy;\"], [7074, \"&ensp;\"], [0, \"&emsp;\"], [0, \"&emsp13;\"], [0, \"&emsp14;\"], [1, \"&numsp;\"], [0, \"&puncsp;\"], [0, \"&ThinSpace;\"], [0, \"&hairsp;\"], [0, \"&NegativeMediumSpace;\"], [0, \"&zwnj;\"], [0, \"&zwj;\"], [0, \"&lrm;\"], [0, \"&rlm;\"], [0, \"&dash;\"], [2, \"&ndash;\"], [0, \"&mdash;\"], [0, \"&horbar;\"], [0, \"&Verbar;\"], [1, \"&lsquo;\"], [0, \"&CloseCurlyQuote;\"], [0, \"&lsquor;\"], [1, \"&ldquo;\"], [0, \"&CloseCurlyDoubleQuote;\"], [0, \"&bdquo;\"], [1, \"&dagger;\"], [0, \"&Dagger;\"], [0, \"&bull;\"], [2, \"&nldr;\"], [0, \"&hellip;\"], [9, \"&permil;\"], [0, \"&pertenk;\"], [0, \"&prime;\"], [0, \"&Prime;\"], [0, \"&tprime;\"], [0, \"&backprime;\"], [3, \"&lsaquo;\"], [0, \"&rsaquo;\"], [3, \"&oline;\"], [2, \"&caret;\"], [1, \"&hybull;\"], [0, \"&frasl;\"], [10, \"&bsemi;\"], [7, \"&qprime;\"], [7, { v: \"&MediumSpace;\", n: 8202, o: \"&ThickSpace;\" }], [0, \"&NoBreak;\"], [0, \"&af;\"], [0, \"&InvisibleTimes;\"], [0, \"&ic;\"], [72, \"&euro;\"], [46, \"&tdot;\"], [0, \"&DotDot;\"], [37, \"&complexes;\"], [2, \"&incare;\"], [4, \"&gscr;\"], [0, \"&hamilt;\"], [0, \"&Hfr;\"], [0, \"&Hopf;\"], [0, \"&planckh;\"], [0, \"&hbar;\"], [0, \"&imagline;\"], [0, \"&Ifr;\"], [0, \"&lagran;\"], [0, \"&ell;\"], [1, \"&naturals;\"], [0, \"&numero;\"], [0, \"&copysr;\"], [0, \"&weierp;\"], [0, \"&Popf;\"], [0, \"&Qopf;\"], [0, \"&realine;\"], [0, \"&real;\"], [0, \"&reals;\"], [0, \"&rx;\"], [3, \"&trade;\"], [1, \"&integers;\"], [2, \"&mho;\"], [0, \"&zeetrf;\"], [0, \"&iiota;\"], [2, \"&bernou;\"], [0, \"&Cayleys;\"], [1, \"&escr;\"], [0, \"&Escr;\"], [0, \"&Fouriertrf;\"], [1, \"&Mellintrf;\"], [0, \"&order;\"], [0, \"&alefsym;\"], [0, \"&beth;\"], [0, \"&gimel;\"], [0, \"&daleth;\"], [12, \"&CapitalDifferentialD;\"], [0, \"&dd;\"], [0, \"&ee;\"], [0, \"&ii;\"], [10, \"&frac13;\"], [0, \"&frac23;\"], [0, \"&frac15;\"], [0, \"&frac25;\"], [0, \"&frac35;\"], [0, \"&frac45;\"], [0, \"&frac16;\"], [0, \"&frac56;\"], [0, \"&frac18;\"], [0, \"&frac38;\"], [0, \"&frac58;\"], [0, \"&frac78;\"], [49, \"&larr;\"], [0, \"&ShortUpArrow;\"], [0, \"&rarr;\"], [0, \"&darr;\"], [0, \"&harr;\"], [0, \"&updownarrow;\"], [0, \"&nwarr;\"], [0, \"&nearr;\"], [0, \"&LowerRightArrow;\"], [0, \"&LowerLeftArrow;\"], [0, \"&nlarr;\"], [0, \"&nrarr;\"], [1, { v: \"&rarrw;\", n: 824, o: \"&nrarrw;\" }], [0, \"&Larr;\"], [0, \"&Uarr;\"], [0, \"&Rarr;\"], [0, \"&Darr;\"], [0, \"&larrtl;\"], [0, \"&rarrtl;\"], [0, \"&LeftTeeArrow;\"], [0, \"&mapstoup;\"], [0, \"&map;\"], [0, \"&DownTeeArrow;\"], [1, \"&hookleftarrow;\"], [0, \"&hookrightarrow;\"], [0, \"&larrlp;\"], [0, \"&looparrowright;\"], [0, \"&harrw;\"], [0, \"&nharr;\"], [1, \"&lsh;\"], [0, \"&rsh;\"], [0, \"&ldsh;\"], [0, \"&rdsh;\"], [1, \"&crarr;\"], [0, \"&cularr;\"], [0, \"&curarr;\"], [2, \"&circlearrowleft;\"], [0, \"&circlearrowright;\"], [0, \"&leftharpoonup;\"], [0, \"&DownLeftVector;\"], [0, \"&RightUpVector;\"], [0, \"&LeftUpVector;\"], [0, \"&rharu;\"], [0, \"&DownRightVector;\"], [0, \"&dharr;\"], [0, \"&dharl;\"], [0, \"&RightArrowLeftArrow;\"], [0, \"&udarr;\"], [0, \"&LeftArrowRightArrow;\"], [0, \"&leftleftarrows;\"], [0, \"&upuparrows;\"], [0, \"&rightrightarrows;\"], [0, \"&ddarr;\"], [0, \"&leftrightharpoons;\"], [0, \"&Equilibrium;\"], [0, \"&nlArr;\"], [0, \"&nhArr;\"], [0, \"&nrArr;\"], [0, \"&DoubleLeftArrow;\"], [0, \"&DoubleUpArrow;\"], [0, \"&DoubleRightArrow;\"], [0, \"&dArr;\"], [0, \"&DoubleLeftRightArrow;\"], [0, \"&DoubleUpDownArrow;\"], [0, \"&nwArr;\"], [0, \"&neArr;\"], [0, \"&seArr;\"], [0, \"&swArr;\"], [0, \"&lAarr;\"], [0, \"&rAarr;\"], [1, \"&zigrarr;\"], [6, \"&larrb;\"], [0, \"&rarrb;\"], [15, \"&DownArrowUpArrow;\"], [7, \"&loarr;\"], [0, \"&roarr;\"], [0, \"&hoarr;\"], [0, \"&forall;\"], [0, \"&comp;\"], [0, { v: \"&part;\", n: 824, o: \"&npart;\" }], [0, \"&exist;\"], [0, \"&nexist;\"], [0, \"&empty;\"], [1, \"&Del;\"], [0, \"&Element;\"], [0, \"&NotElement;\"], [1, \"&ni;\"], [0, \"&notni;\"], [2, \"&prod;\"], [0, \"&coprod;\"], [0, \"&sum;\"], [0, \"&minus;\"], [0, \"&MinusPlus;\"], [0, \"&dotplus;\"], [1, \"&Backslash;\"], [0, \"&lowast;\"], [0, \"&compfn;\"], [1, \"&radic;\"], [2, \"&prop;\"], [0, \"&infin;\"], [0, \"&angrt;\"], [0, { v: \"&ang;\", n: 8402, o: \"&nang;\" }], [0, \"&angmsd;\"], [0, \"&angsph;\"], [0, \"&mid;\"], [0, \"&nmid;\"], [0, \"&DoubleVerticalBar;\"], [0, \"&NotDoubleVerticalBar;\"], [0, \"&and;\"], [0, \"&or;\"], [0, { v: \"&cap;\", n: 65024, o: \"&caps;\" }], [0, { v: \"&cup;\", n: 65024, o: \"&cups;\" }], [0, \"&int;\"], [0, \"&Int;\"], [0, \"&iiint;\"], [0, \"&conint;\"], [0, \"&Conint;\"], [0, \"&Cconint;\"], [0, \"&cwint;\"], [0, \"&ClockwiseContourIntegral;\"], [0, \"&awconint;\"], [0, \"&there4;\"], [0, \"&becaus;\"], [0, \"&ratio;\"], [0, \"&Colon;\"], [0, \"&dotminus;\"], [1, \"&mDDot;\"], [0, \"&homtht;\"], [0, { v: \"&sim;\", n: 8402, o: \"&nvsim;\" }], [0, { v: \"&backsim;\", n: 817, o: \"&race;\" }], [0, { v: \"&ac;\", n: 819, o: \"&acE;\" }], [0, \"&acd;\"], [0, \"&VerticalTilde;\"], [0, \"&NotTilde;\"], [0, { v: \"&eqsim;\", n: 824, o: \"&nesim;\" }], [0, \"&sime;\"], [0, \"&NotTildeEqual;\"], [0, \"&cong;\"], [0, \"&simne;\"], [0, \"&ncong;\"], [0, \"&ap;\"], [0, \"&nap;\"], [0, \"&ape;\"], [0, { v: \"&apid;\", n: 824, o: \"&napid;\" }], [0, \"&backcong;\"], [0, { v: \"&asympeq;\", n: 8402, o: \"&nvap;\" }], [0, { v: \"&bump;\", n: 824, o: \"&nbump;\" }], [0, { v: \"&bumpe;\", n: 824, o: \"&nbumpe;\" }], [0, { v: \"&doteq;\", n: 824, o: \"&nedot;\" }], [0, \"&doteqdot;\"], [0, \"&efDot;\"], [0, \"&erDot;\"], [0, \"&Assign;\"], [0, \"&ecolon;\"], [0, \"&ecir;\"], [0, \"&circeq;\"], [1, \"&wedgeq;\"], [0, \"&veeeq;\"], [1, \"&triangleq;\"], [2, \"&equest;\"], [0, \"&ne;\"], [0, { v: \"&Congruent;\", n: 8421, o: \"&bnequiv;\" }], [0, \"&nequiv;\"], [1, { v: \"&le;\", n: 8402, o: \"&nvle;\" }], [0, { v: \"&ge;\", n: 8402, o: \"&nvge;\" }], [0, { v: \"&lE;\", n: 824, o: \"&nlE;\" }], [0, { v: \"&gE;\", n: 824, o: \"&ngE;\" }], [0, { v: \"&lnE;\", n: 65024, o: \"&lvertneqq;\" }], [0, { v: \"&gnE;\", n: 65024, o: \"&gvertneqq;\" }], [0, { v: \"&ll;\", n: new Map(/* #__PURE__ */ restoreDiff([[824, \"&nLtv;\"], [7577, \"&nLt;\"]])) }], [0, { v: \"&gg;\", n: new Map(/* #__PURE__ */ restoreDiff([[824, \"&nGtv;\"], [7577, \"&nGt;\"]])) }], [0, \"&between;\"], [0, \"&NotCupCap;\"], [0, \"&nless;\"], [0, \"&ngt;\"], [0, \"&nle;\"], [0, \"&nge;\"], [0, \"&lesssim;\"], [0, \"&GreaterTilde;\"], [0, \"&nlsim;\"], [0, \"&ngsim;\"], [0, \"&LessGreater;\"], [0, \"&gl;\"], [0, \"&NotLessGreater;\"], [0, \"&NotGreaterLess;\"], [0, \"&pr;\"], [0, \"&sc;\"], [0, \"&prcue;\"], [0, \"&sccue;\"], [0, \"&PrecedesTilde;\"], [0, { v: \"&scsim;\", n: 824, o: \"&NotSucceedsTilde;\" }], [0, \"&NotPrecedes;\"], [0, \"&NotSucceeds;\"], [0, { v: \"&sub;\", n: 8402, o: \"&NotSubset;\" }], [0, { v: \"&sup;\", n: 8402, o: \"&NotSuperset;\" }], [0, \"&nsub;\"], [0, \"&nsup;\"], [0, \"&sube;\"], [0, \"&supe;\"], [0, \"&NotSubsetEqual;\"], [0, \"&NotSupersetEqual;\"], [0, { v: \"&subne;\", n: 65024, o: \"&varsubsetneq;\" }], [0, { v: \"&supne;\", n: 65024, o: \"&varsupsetneq;\" }], [1, \"&cupdot;\"], [0, \"&UnionPlus;\"], [0, { v: \"&sqsub;\", n: 824, o: \"&NotSquareSubset;\" }], [0, { v: \"&sqsup;\", n: 824, o: \"&NotSquareSuperset;\" }], [0, \"&sqsube;\"], [0, \"&sqsupe;\"], [0, { v: \"&sqcap;\", n: 65024, o: \"&sqcaps;\" }], [0, { v: \"&sqcup;\", n: 65024, o: \"&sqcups;\" }], [0, \"&CirclePlus;\"], [0, \"&CircleMinus;\"], [0, \"&CircleTimes;\"], [0, \"&osol;\"], [0, \"&CircleDot;\"], [0, \"&circledcirc;\"], [0, \"&circledast;\"], [1, \"&circleddash;\"], [0, \"&boxplus;\"], [0, \"&boxminus;\"], [0, \"&boxtimes;\"], [0, \"&dotsquare;\"], [0, \"&RightTee;\"], [0, \"&dashv;\"], [0, \"&DownTee;\"], [0, \"&bot;\"], [1, \"&models;\"], [0, \"&DoubleRightTee;\"], [0, \"&Vdash;\"], [0, \"&Vvdash;\"], [0, \"&VDash;\"], [0, \"&nvdash;\"], [0, \"&nvDash;\"], [0, \"&nVdash;\"], [0, \"&nVDash;\"], [0, \"&prurel;\"], [1, \"&LeftTriangle;\"], [0, \"&RightTriangle;\"], [0, { v: \"&LeftTriangleEqual;\", n: 8402, o: \"&nvltrie;\" }], [0, { v: \"&RightTriangleEqual;\", n: 8402, o: \"&nvrtrie;\" }], [0, \"&origof;\"], [0, \"&imof;\"], [0, \"&multimap;\"], [0, \"&hercon;\"], [0, \"&intcal;\"], [0, \"&veebar;\"], [1, \"&barvee;\"], [0, \"&angrtvb;\"], [0, \"&lrtri;\"], [0, \"&bigwedge;\"], [0, \"&bigvee;\"], [0, \"&bigcap;\"], [0, \"&bigcup;\"], [0, \"&diam;\"], [0, \"&sdot;\"], [0, \"&sstarf;\"], [0, \"&divideontimes;\"], [0, \"&bowtie;\"], [0, \"&ltimes;\"], [0, \"&rtimes;\"], [0, \"&leftthreetimes;\"], [0, \"&rightthreetimes;\"], [0, \"&backsimeq;\"], [0, \"&curlyvee;\"], [0, \"&curlywedge;\"], [0, \"&Sub;\"], [0, \"&Sup;\"], [0, \"&Cap;\"], [0, \"&Cup;\"], [0, \"&fork;\"], [0, \"&epar;\"], [0, \"&lessdot;\"], [0, \"&gtdot;\"], [0, { v: \"&Ll;\", n: 824, o: \"&nLl;\" }], [0, { v: \"&Gg;\", n: 824, o: \"&nGg;\" }], [0, { v: \"&leg;\", n: 65024, o: \"&lesg;\" }], [0, { v: \"&gel;\", n: 65024, o: \"&gesl;\" }], [2, \"&cuepr;\"], [0, \"&cuesc;\"], [0, \"&NotPrecedesSlantEqual;\"], [0, \"&NotSucceedsSlantEqual;\"], [0, \"&NotSquareSubsetEqual;\"], [0, \"&NotSquareSupersetEqual;\"], [2, \"&lnsim;\"], [0, \"&gnsim;\"], [0, \"&precnsim;\"], [0, \"&scnsim;\"], [0, \"&nltri;\"], [0, \"&NotRightTriangle;\"], [0, \"&nltrie;\"], [0, \"&NotRightTriangleEqual;\"], [0, \"&vellip;\"], [0, \"&ctdot;\"], [0, \"&utdot;\"], [0, \"&dtdot;\"], [0, \"&disin;\"], [0, \"&isinsv;\"], [0, \"&isins;\"], [0, { v: \"&isindot;\", n: 824, o: \"&notindot;\" }], [0, \"&notinvc;\"], [0, \"&notinvb;\"], [1, { v: \"&isinE;\", n: 824, o: \"&notinE;\" }], [0, \"&nisd;\"], [0, \"&xnis;\"], [0, \"&nis;\"], [0, \"&notnivc;\"], [0, \"&notnivb;\"], [6, \"&barwed;\"], [0, \"&Barwed;\"], [1, \"&lceil;\"], [0, \"&rceil;\"], [0, \"&LeftFloor;\"], [0, \"&rfloor;\"], [0, \"&drcrop;\"], [0, \"&dlcrop;\"], [0, \"&urcrop;\"], [0, \"&ulcrop;\"], [0, \"&bnot;\"], [1, \"&profline;\"], [0, \"&profsurf;\"], [1, \"&telrec;\"], [0, \"&target;\"], [5, \"&ulcorn;\"], [0, \"&urcorn;\"], [0, \"&dlcorn;\"], [0, \"&drcorn;\"], [2, \"&frown;\"], [0, \"&smile;\"], [9, \"&cylcty;\"], [0, \"&profalar;\"], [7, \"&topbot;\"], [6, \"&ovbar;\"], [1, \"&solbar;\"], [60, \"&angzarr;\"], [51, \"&lmoustache;\"], [0, \"&rmoustache;\"], [2, \"&OverBracket;\"], [0, \"&bbrk;\"], [0, \"&bbrktbrk;\"], [37, \"&OverParenthesis;\"], [0, \"&UnderParenthesis;\"], [0, \"&OverBrace;\"], [0, \"&UnderBrace;\"], [2, \"&trpezium;\"], [4, \"&elinters;\"], [59, \"&blank;\"], [164, \"&circledS;\"], [55, \"&boxh;\"], [1, \"&boxv;\"], [9, \"&boxdr;\"], [3, \"&boxdl;\"], [3, \"&boxur;\"], [3, \"&boxul;\"], [3, \"&boxvr;\"], [7, \"&boxvl;\"], [7, \"&boxhd;\"], [7, \"&boxhu;\"], [7, \"&boxvh;\"], [19, \"&boxH;\"], [0, \"&boxV;\"], [0, \"&boxdR;\"], [0, \"&boxDr;\"], [0, \"&boxDR;\"], [0, \"&boxdL;\"], [0, \"&boxDl;\"], [0, \"&boxDL;\"], [0, \"&boxuR;\"], [0, \"&boxUr;\"], [0, \"&boxUR;\"], [0, \"&boxuL;\"], [0, \"&boxUl;\"], [0, \"&boxUL;\"], [0, \"&boxvR;\"], [0, \"&boxVr;\"], [0, \"&boxVR;\"], [0, \"&boxvL;\"], [0, \"&boxVl;\"], [0, \"&boxVL;\"], [0, \"&boxHd;\"], [0, \"&boxhD;\"], [0, \"&boxHD;\"], [0, \"&boxHu;\"], [0, \"&boxhU;\"], [0, \"&boxHU;\"], [0, \"&boxvH;\"], [0, \"&boxVh;\"], [0, \"&boxVH;\"], [19, \"&uhblk;\"], [3, \"&lhblk;\"], [3, \"&block;\"], [8, \"&blk14;\"], [0, \"&blk12;\"], [0, \"&blk34;\"], [13, \"&square;\"], [8, \"&blacksquare;\"], [0, \"&EmptyVerySmallSquare;\"], [1, \"&rect;\"], [0, \"&marker;\"], [2, \"&fltns;\"], [1, \"&bigtriangleup;\"], [0, \"&blacktriangle;\"], [0, \"&triangle;\"], [2, \"&blacktriangleright;\"], [0, \"&rtri;\"], [3, \"&bigtriangledown;\"], [0, \"&blacktriangledown;\"], [0, \"&dtri;\"], [2, \"&blacktriangleleft;\"], [0, \"&ltri;\"], [6, \"&loz;\"], [0, \"&cir;\"], [32, \"&tridot;\"], [2, \"&bigcirc;\"], [8, \"&ultri;\"], [0, \"&urtri;\"], [0, \"&lltri;\"], [0, \"&EmptySmallSquare;\"], [0, \"&FilledSmallSquare;\"], [8, \"&bigstar;\"], [0, \"&star;\"], [7, \"&phone;\"], [49, \"&female;\"], [1, \"&male;\"], [29, \"&spades;\"], [2, \"&clubs;\"], [1, \"&hearts;\"], [0, \"&diamondsuit;\"], [3, \"&sung;\"], [2, \"&flat;\"], [0, \"&natural;\"], [0, \"&sharp;\"], [163, \"&check;\"], [3, \"&cross;\"], [8, \"&malt;\"], [21, \"&sext;\"], [33, \"&VerticalSeparator;\"], [25, \"&lbbrk;\"], [0, \"&rbbrk;\"], [84, \"&bsolhsub;\"], [0, \"&suphsol;\"], [28, \"&LeftDoubleBracket;\"], [0, \"&RightDoubleBracket;\"], [0, \"&lang;\"], [0, \"&rang;\"], [0, \"&Lang;\"], [0, \"&Rang;\"], [0, \"&loang;\"], [0, \"&roang;\"], [7, \"&longleftarrow;\"], [0, \"&longrightarrow;\"], [0, \"&longleftrightarrow;\"], [0, \"&DoubleLongLeftArrow;\"], [0, \"&DoubleLongRightArrow;\"], [0, \"&DoubleLongLeftRightArrow;\"], [1, \"&longmapsto;\"], [2, \"&dzigrarr;\"], [258, \"&nvlArr;\"], [0, \"&nvrArr;\"], [0, \"&nvHarr;\"], [0, \"&Map;\"], [6, \"&lbarr;\"], [0, \"&bkarow;\"], [0, \"&lBarr;\"], [0, \"&dbkarow;\"], [0, \"&drbkarow;\"], [0, \"&DDotrahd;\"], [0, \"&UpArrowBar;\"], [0, \"&DownArrowBar;\"], [2, \"&Rarrtl;\"], [2, \"&latail;\"], [0, \"&ratail;\"], [0, \"&lAtail;\"], [0, \"&rAtail;\"], [0, \"&larrfs;\"], [0, \"&rarrfs;\"], [0, \"&larrbfs;\"], [0, \"&rarrbfs;\"], [2, \"&nwarhk;\"], [0, \"&nearhk;\"], [0, \"&hksearow;\"], [0, \"&hkswarow;\"], [0, \"&nwnear;\"], [0, \"&nesear;\"], [0, \"&seswar;\"], [0, \"&swnwar;\"], [8, { v: \"&rarrc;\", n: 824, o: \"&nrarrc;\" }], [1, \"&cudarrr;\"], [0, \"&ldca;\"], [0, \"&rdca;\"], [0, \"&cudarrl;\"], [0, \"&larrpl;\"], [2, \"&curarrm;\"], [0, \"&cularrp;\"], [7, \"&rarrpl;\"], [2, \"&harrcir;\"], [0, \"&Uarrocir;\"], [0, \"&lurdshar;\"], [0, \"&ldrushar;\"], [2, \"&LeftRightVector;\"], [0, \"&RightUpDownVector;\"], [0, \"&DownLeftRightVector;\"], [0, \"&LeftUpDownVector;\"], [0, \"&LeftVectorBar;\"], [0, \"&RightVectorBar;\"], [0, \"&RightUpVectorBar;\"], [0, \"&RightDownVectorBar;\"], [0, \"&DownLeftVectorBar;\"], [0, \"&DownRightVectorBar;\"], [0, \"&LeftUpVectorBar;\"], [0, \"&LeftDownVectorBar;\"], [0, \"&LeftTeeVector;\"], [0, \"&RightTeeVector;\"], [0, \"&RightUpTeeVector;\"], [0, \"&RightDownTeeVector;\"], [0, \"&DownLeftTeeVector;\"], [0, \"&DownRightTeeVector;\"], [0, \"&LeftUpTeeVector;\"], [0, \"&LeftDownTeeVector;\"], [0, \"&lHar;\"], [0, \"&uHar;\"], [0, \"&rHar;\"], [0, \"&dHar;\"], [0, \"&luruhar;\"], [0, \"&ldrdhar;\"], [0, \"&ruluhar;\"], [0, \"&rdldhar;\"], [0, \"&lharul;\"], [0, \"&llhard;\"], [0, \"&rharul;\"], [0, \"&lrhard;\"], [0, \"&udhar;\"], [0, \"&duhar;\"], [0, \"&RoundImplies;\"], [0, \"&erarr;\"], [0, \"&simrarr;\"], [0, \"&larrsim;\"], [0, \"&rarrsim;\"], [0, \"&rarrap;\"], [0, \"&ltlarr;\"], [1, \"&gtrarr;\"], [0, \"&subrarr;\"], [1, \"&suplarr;\"], [0, \"&lfisht;\"], [0, \"&rfisht;\"], [0, \"&ufisht;\"], [0, \"&dfisht;\"], [5, \"&lopar;\"], [0, \"&ropar;\"], [4, \"&lbrke;\"], [0, \"&rbrke;\"], [0, \"&lbrkslu;\"], [0, \"&rbrksld;\"], [0, \"&lbrksld;\"], [0, \"&rbrkslu;\"], [0, \"&langd;\"], [0, \"&rangd;\"], [0, \"&lparlt;\"], [0, \"&rpargt;\"], [0, \"&gtlPar;\"], [0, \"&ltrPar;\"], [3, \"&vzigzag;\"], [1, \"&vangrt;\"], [0, \"&angrtvbd;\"], [6, \"&ange;\"], [0, \"&range;\"], [0, \"&dwangle;\"], [0, \"&uwangle;\"], [0, \"&angmsdaa;\"], [0, \"&angmsdab;\"], [0, \"&angmsdac;\"], [0, \"&angmsdad;\"], [0, \"&angmsdae;\"], [0, \"&angmsdaf;\"], [0, \"&angmsdag;\"], [0, \"&angmsdah;\"], [0, \"&bemptyv;\"], [0, \"&demptyv;\"], [0, \"&cemptyv;\"], [0, \"&raemptyv;\"], [0, \"&laemptyv;\"], [0, \"&ohbar;\"], [0, \"&omid;\"], [0, \"&opar;\"], [1, \"&operp;\"], [1, \"&olcross;\"], [0, \"&odsold;\"], [1, \"&olcir;\"], [0, \"&ofcir;\"], [0, \"&olt;\"], [0, \"&ogt;\"], [0, \"&cirscir;\"], [0, \"&cirE;\"], [0, \"&solb;\"], [0, \"&bsolb;\"], [3, \"&boxbox;\"], [3, \"&trisb;\"], [0, \"&rtriltri;\"], [0, { v: \"&LeftTriangleBar;\", n: 824, o: \"&NotLeftTriangleBar;\" }], [0, { v: \"&RightTriangleBar;\", n: 824, o: \"&NotRightTriangleBar;\" }], [11, \"&iinfin;\"], [0, \"&infintie;\"], [0, \"&nvinfin;\"], [4, \"&eparsl;\"], [0, \"&smeparsl;\"], [0, \"&eqvparsl;\"], [5, \"&blacklozenge;\"], [8, \"&RuleDelayed;\"], [1, \"&dsol;\"], [9, \"&bigodot;\"], [0, \"&bigoplus;\"], [0, \"&bigotimes;\"], [1, \"&biguplus;\"], [1, \"&bigsqcup;\"], [5, \"&iiiint;\"], [0, \"&fpartint;\"], [2, \"&cirfnint;\"], [0, \"&awint;\"], [0, \"&rppolint;\"], [0, \"&scpolint;\"], [0, \"&npolint;\"], [0, \"&pointint;\"], [0, \"&quatint;\"], [0, \"&intlarhk;\"], [10, \"&pluscir;\"], [0, \"&plusacir;\"], [0, \"&simplus;\"], [0, \"&plusdu;\"], [0, \"&plussim;\"], [0, \"&plustwo;\"], [1, \"&mcomma;\"], [0, \"&minusdu;\"], [2, \"&loplus;\"], [0, \"&roplus;\"], [0, \"&Cross;\"], [0, \"&timesd;\"], [0, \"&timesbar;\"], [1, \"&smashp;\"], [0, \"&lotimes;\"], [0, \"&rotimes;\"], [0, \"&otimesas;\"], [0, \"&Otimes;\"], [0, \"&odiv;\"], [0, \"&triplus;\"], [0, \"&triminus;\"], [0, \"&tritime;\"], [0, \"&intprod;\"], [2, \"&amalg;\"], [0, \"&capdot;\"], [1, \"&ncup;\"], [0, \"&ncap;\"], [0, \"&capand;\"], [0, \"&cupor;\"], [0, \"&cupcap;\"], [0, \"&capcup;\"], [0, \"&cupbrcap;\"], [0, \"&capbrcup;\"], [0, \"&cupcup;\"], [0, \"&capcap;\"], [0, \"&ccups;\"], [0, \"&ccaps;\"], [2, \"&ccupssm;\"], [2, \"&And;\"], [0, \"&Or;\"], [0, \"&andand;\"], [0, \"&oror;\"], [0, \"&orslope;\"], [0, \"&andslope;\"], [1, \"&andv;\"], [0, \"&orv;\"], [0, \"&andd;\"], [0, \"&ord;\"], [1, \"&wedbar;\"], [6, \"&sdote;\"], [3, \"&simdot;\"], [2, { v: \"&congdot;\", n: 824, o: \"&ncongdot;\" }], [0, \"&easter;\"], [0, \"&apacir;\"], [0, { v: \"&apE;\", n: 824, o: \"&napE;\" }], [0, \"&eplus;\"], [0, \"&pluse;\"], [0, \"&Esim;\"], [0, \"&Colone;\"], [0, \"&Equal;\"], [1, \"&ddotseq;\"], [0, \"&equivDD;\"], [0, \"&ltcir;\"], [0, \"&gtcir;\"], [0, \"&ltquest;\"], [0, \"&gtquest;\"], [0, { v: \"&leqslant;\", n: 824, o: \"&nleqslant;\" }], [0, { v: \"&geqslant;\", n: 824, o: \"&ngeqslant;\" }], [0, \"&lesdot;\"], [0, \"&gesdot;\"], [0, \"&lesdoto;\"], [0, \"&gesdoto;\"], [0, \"&lesdotor;\"], [0, \"&gesdotol;\"], [0, \"&lap;\"], [0, \"&gap;\"], [0, \"&lne;\"], [0, \"&gne;\"], [0, \"&lnap;\"], [0, \"&gnap;\"], [0, \"&lEg;\"], [0, \"&gEl;\"], [0, \"&lsime;\"], [0, \"&gsime;\"], [0, \"&lsimg;\"], [0, \"&gsiml;\"], [0, \"&lgE;\"], [0, \"&glE;\"], [0, \"&lesges;\"], [0, \"&gesles;\"], [0, \"&els;\"], [0, \"&egs;\"], [0, \"&elsdot;\"], [0, \"&egsdot;\"], [0, \"&el;\"], [0, \"&eg;\"], [2, \"&siml;\"], [0, \"&simg;\"], [0, \"&simlE;\"], [0, \"&simgE;\"], [0, { v: \"&LessLess;\", n: 824, o: \"&NotNestedLessLess;\" }], [0, { v: \"&GreaterGreater;\", n: 824, o: \"&NotNestedGreaterGreater;\" }], [1, \"&glj;\"], [0, \"&gla;\"], [0, \"&ltcc;\"], [0, \"&gtcc;\"], [0, \"&lescc;\"], [0, \"&gescc;\"], [0, \"&smt;\"], [0, \"&lat;\"], [0, { v: \"&smte;\", n: 65024, o: \"&smtes;\" }], [0, { v: \"&late;\", n: 65024, o: \"&lates;\" }], [0, \"&bumpE;\"], [0, { v: \"&PrecedesEqual;\", n: 824, o: \"&NotPrecedesEqual;\" }], [0, { v: \"&sce;\", n: 824, o: \"&NotSucceedsEqual;\" }], [2, \"&prE;\"], [0, \"&scE;\"], [0, \"&precneqq;\"], [0, \"&scnE;\"], [0, \"&prap;\"], [0, \"&scap;\"], [0, \"&precnapprox;\"], [0, \"&scnap;\"], [0, \"&Pr;\"], [0, \"&Sc;\"], [0, \"&subdot;\"], [0, \"&supdot;\"], [0, \"&subplus;\"], [0, \"&supplus;\"], [0, \"&submult;\"], [0, \"&supmult;\"], [0, \"&subedot;\"], [0, \"&supedot;\"], [0, { v: \"&subE;\", n: 824, o: \"&nsubE;\" }], [0, { v: \"&supE;\", n: 824, o: \"&nsupE;\" }], [0, \"&subsim;\"], [0, \"&supsim;\"], [2, { v: \"&subnE;\", n: 65024, o: \"&varsubsetneqq;\" }], [0, { v: \"&supnE;\", n: 65024, o: \"&varsupsetneqq;\" }], [2, \"&csub;\"], [0, \"&csup;\"], [0, \"&csube;\"], [0, \"&csupe;\"], [0, \"&subsup;\"], [0, \"&supsub;\"], [0, \"&subsub;\"], [0, \"&supsup;\"], [0, \"&suphsub;\"], [0, \"&supdsub;\"], [0, \"&forkv;\"], [0, \"&topfork;\"], [0, \"&mlcp;\"], [8, \"&Dashv;\"], [1, \"&Vdashl;\"], [0, \"&Barv;\"], [0, \"&vBar;\"], [0, \"&vBarv;\"], [1, \"&Vbar;\"], [0, \"&Not;\"], [0, \"&bNot;\"], [0, \"&rnmid;\"], [0, \"&cirmid;\"], [0, \"&midcir;\"], [0, \"&topcir;\"], [0, \"&nhpar;\"], [0, \"&parsim;\"], [9, { v: \"&parsl;\", n: 8421, o: \"&nparsl;\" }], [44343, { n: new Map(/* #__PURE__ */ restoreDiff([[56476, \"&Ascr;\"], [1, \"&Cscr;\"], [0, \"&Dscr;\"], [2, \"&Gscr;\"], [2, \"&Jscr;\"], [0, \"&Kscr;\"], [2, \"&Nscr;\"], [0, \"&Oscr;\"], [0, \"&Pscr;\"], [0, \"&Qscr;\"], [1, \"&Sscr;\"], [0, \"&Tscr;\"], [0, \"&Uscr;\"], [0, \"&Vscr;\"], [0, \"&Wscr;\"], [0, \"&Xscr;\"], [0, \"&Yscr;\"], [0, \"&Zscr;\"], [0, \"&ascr;\"], [0, \"&bscr;\"], [0, \"&cscr;\"], [0, \"&dscr;\"], [1, \"&fscr;\"], [1, \"&hscr;\"], [0, \"&iscr;\"], [0, \"&jscr;\"], [0, \"&kscr;\"], [0, \"&lscr;\"], [0, \"&mscr;\"], [0, \"&nscr;\"], [1, \"&pscr;\"], [0, \"&qscr;\"], [0, \"&rscr;\"], [0, \"&sscr;\"], [0, \"&tscr;\"], [0, \"&uscr;\"], [0, \"&vscr;\"], [0, \"&wscr;\"], [0, \"&xscr;\"], [0, \"&yscr;\"], [0, \"&zscr;\"], [52, \"&Afr;\"], [0, \"&Bfr;\"], [1, \"&Dfr;\"], [0, \"&Efr;\"], [0, \"&Ffr;\"], [0, \"&Gfr;\"], [2, \"&Jfr;\"], [0, \"&Kfr;\"], [0, \"&Lfr;\"], [0, \"&Mfr;\"], [0, \"&Nfr;\"], [0, \"&Ofr;\"], [0, \"&Pfr;\"], [0, \"&Qfr;\"], [1, \"&Sfr;\"], [0, \"&Tfr;\"], [0, \"&Ufr;\"], [0, \"&Vfr;\"], [0, \"&Wfr;\"], [0, \"&Xfr;\"], [0, \"&Yfr;\"], [1, \"&afr;\"], [0, \"&bfr;\"], [0, \"&cfr;\"], [0, \"&dfr;\"], [0, \"&efr;\"], [0, \"&ffr;\"], [0, \"&gfr;\"], [0, \"&hfr;\"], [0, \"&ifr;\"], [0, \"&jfr;\"], [0, \"&kfr;\"], [0, \"&lfr;\"], [0, \"&mfr;\"], [0, \"&nfr;\"], [0, \"&ofr;\"], [0, \"&pfr;\"], [0, \"&qfr;\"], [0, \"&rfr;\"], [0, \"&sfr;\"], [0, \"&tfr;\"], [0, \"&ufr;\"], [0, \"&vfr;\"], [0, \"&wfr;\"], [0, \"&xfr;\"], [0, \"&yfr;\"], [0, \"&zfr;\"], [0, \"&Aopf;\"], [0, \"&Bopf;\"], [1, \"&Dopf;\"], [0, \"&Eopf;\"], [0, \"&Fopf;\"], [0, \"&Gopf;\"], [1, \"&Iopf;\"], [0, \"&Jopf;\"], [0, \"&Kopf;\"], [0, \"&Lopf;\"], [0, \"&Mopf;\"], [1, \"&Oopf;\"], [3, \"&Sopf;\"], [0, \"&Topf;\"], [0, \"&Uopf;\"], [0, \"&Vopf;\"], [0, \"&Wopf;\"], [0, \"&Xopf;\"], [0, \"&Yopf;\"], [1, \"&aopf;\"], [0, \"&bopf;\"], [0, \"&copf;\"], [0, \"&dopf;\"], [0, \"&eopf;\"], [0, \"&fopf;\"], [0, \"&gopf;\"], [0, \"&hopf;\"], [0, \"&iopf;\"], [0, \"&jopf;\"], [0, \"&kopf;\"], [0, \"&lopf;\"], [0, \"&mopf;\"], [0, \"&nopf;\"], [0, \"&oopf;\"], [0, \"&popf;\"], [0, \"&qopf;\"], [0, \"&ropf;\"], [0, \"&sopf;\"], [0, \"&topf;\"], [0, \"&uopf;\"], [0, \"&vopf;\"], [0, \"&wopf;\"], [0, \"&xopf;\"], [0, \"&yopf;\"], [0, \"&zopf;\"]])) }], [8906, \"&fflig;\"], [0, \"&filig;\"], [0, \"&fllig;\"], [0, \"&ffilig;\"], [0, \"&ffllig;\"]]));\n//# sourceMappingURL=encode-html.js.map",null,"export const xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nconst xmlCodeMap = new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [39, \"&apos;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexport const getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? (str, index) => str.codePointAt(index)\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        (c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800\n            ? (c.charCodeAt(index) - 0xd800) * 0x400 +\n                c.charCodeAt(index + 1) -\n                0xdc00 +\n                0x10000\n            : c.charCodeAt(index);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexport function encodeXML(str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while ((match = xmlReplacer.exec(str)) !== null) {\n        const i = match.index;\n        const char = str.charCodeAt(i);\n        const next = xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        }\n        else {\n            ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nexport const escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\nfunction getEscaper(regex, map) {\n    return function escape(data) {\n        let match;\n        let lastIdx = 0;\n        let result = \"\";\n        while ((match = regex.exec(data))) {\n            if (lastIdx !== match.index) {\n                result += data.substring(lastIdx, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nexport const escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [160, \"&nbsp;\"],\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([\n    [38, \"&amp;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n    [160, \"&nbsp;\"],\n]));\n//# sourceMappingURL=escape.js.map",null,"// Just a shortcut for bulk export\n\nimport parseLinkLabel from './parse_link_label.mjs'\nimport parseLinkDestination from './parse_link_destination.mjs'\nimport parseLinkTitle from './parse_link_title.mjs'\n\nexport {\n  parseLinkLabel,\n  parseLinkDestination,\n  parseLinkTitle\n}\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nexport default function parseLinkLabel (state, start, disableNested) {\n  let level, found, marker, prevPos\n\n  const max = state.posMax\n  const oldPos = state.pos\n\n  state.pos = start + 1\n  level = 1\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos)\n    if (marker === 0x5D /* ] */) {\n      level--\n      if (level === 0) {\n        found = true\n        break\n      }\n    }\n\n    prevPos = state.pos\n    state.md.inline.skipToken(state)\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++\n      } else if (disableNested) {\n        state.pos = oldPos\n        return -1\n      }\n    }\n  }\n\n  let labelEnd = -1\n\n  if (found) {\n    labelEnd = state.pos\n  }\n\n  // restore old state\n  state.pos = oldPos\n\n  return labelEnd\n}\n","// Parse link destination\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\nexport default function parseLinkDestination (str, start, max) {\n  let code\n  let pos = start\n\n  const result = {\n    ok: false,\n    pos: 0,\n    str: ''\n  }\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++\n    while (pos < max) {\n      code = str.charCodeAt(pos)\n      if (code === 0x0A /* \\n */) { return result }\n      if (code === 0x3C /* < */) { return result }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1\n        result.str = unescapeAll(str.slice(start + 1, pos))\n        result.ok = true\n        return result\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2\n        continue\n      }\n\n      pos++\n    }\n\n    // no closing '>'\n    return result\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n\n    if (code === 0x20) { break }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break }\n      pos += 2\n      continue\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++\n      if (level > 32) { return result }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break }\n      level--\n    }\n\n    pos++\n  }\n\n  if (start === pos) { return result }\n  if (level !== 0) { return result }\n\n  result.str = unescapeAll(str.slice(start, pos))\n  result.pos = pos\n  result.ok = true\n  return result\n}\n","// Parse link title\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\n// Parse link title within `str` in [start, max] range,\n// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n//\nexport default function parseLinkTitle (str, start, max, prev_state) {\n  let code\n  let pos = start\n\n  const state = {\n    // if `true`, this is a valid link title\n    ok: false,\n    // if `true`, this link can be continued on the next line\n    can_continue: false,\n    // if `ok`, it's the position of the first character after the closing marker\n    pos: 0,\n    // if `ok`, it's the unescaped title\n    str: '',\n    // expected closing marker character code\n    marker: 0\n  }\n\n  if (prev_state) {\n    // this is a continuation of a previous parseLinkTitle call on the next line,\n    // used in reference links only\n    state.str = prev_state.str\n    state.marker = prev_state.marker\n  } else {\n    if (pos >= max) { return state }\n\n    let marker = str.charCodeAt(pos)\n    if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return state }\n\n    start++\n    pos++\n\n    // if opening marker is \"(\", switch it to closing marker \")\"\n    if (marker === 0x28) { marker = 0x29 }\n\n    state.marker = marker\n  }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n    if (code === state.marker) {\n      state.pos = pos + 1\n      state.str += unescapeAll(str.slice(start, pos))\n      state.ok = true\n      return state\n    } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {\n      return state\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++\n    }\n\n    pos++\n  }\n\n  // no closing marker found, but this link title may continue on the next line (for references)\n  state.can_continue = true\n  state.str += unescapeAll(str.slice(start, pos))\n  return state\n}\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs'\n\nconst default_rules = {}\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>'\n}\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n'\n}\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n  const info = token.info ? unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let langAttrs = ''\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g)\n    langName = arr[0]\n    langAttrs = arr.slice(2).join('')\n  }\n\n  let highlighted\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)\n  } else {\n    highlighted = escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n'\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class')\n    const tmpAttrs = token.attrs ? token.attrs.slice() : []\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName])\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice()\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    }\n\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env)\n\n  return slf.renderToken(tokens, idx, options)\n}\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n'\n}\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n'\n}\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content)\n}\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer () {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules)\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs (token) {\n  let i, l, result\n\n  if (!token.attrs) { return '' }\n\n  result = ''\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"'\n  }\n\n  return result\n}\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken (tokens, idx, options) {\n  const token = tokens[idx]\n  let result = ''\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return ''\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n'\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token)\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /'\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false\n  if (token.block) {\n    needLf = true\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1]\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>'\n\n  return result\n}\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options)\n    }\n  }\n\n  return result\n}\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = ''\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content\n        break\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env)\n        break\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content\n        break\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n'\n        break\n      default:\n        // all other tokens are skipped\n    }\n  }\n\n  return result\n}\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env)\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options, env)\n    }\n  }\n\n  return result\n}\n\nexport default Renderer\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateCore from './rules_core/state_core.mjs'\n\nimport r_normalize from './rules_core/normalize.mjs'\nimport r_block from './rules_core/block.mjs'\nimport r_inline from './rules_core/inline.mjs'\nimport r_linkify from './rules_core/linkify.mjs'\nimport r_replacements from './rules_core/replacements.mjs'\nimport r_smartquotes from './rules_core/smartquotes.mjs'\nimport r_text_join from './rules_core/text_join.mjs'\n\nconst _rules = [\n  ['normalize',      r_normalize],\n  ['block',          r_block],\n  ['inline',         r_inline],\n  ['linkify',        r_linkify],\n  ['replacements',   r_replacements],\n  ['smartquotes',    r_smartquotes],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  ['text_join',      r_text_join]\n]\n\n/**\n * new Core()\n **/\nfunction Core () {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('')\n\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state)\n  }\n}\n\nCore.prototype.State = StateCore\n\nexport default Core\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler () {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = []\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i\n    }\n  }\n  return -1\n}\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this\n  const chains = ['']\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName)\n      }\n    })\n  })\n\n  self.__cache__ = {}\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = []\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return }\n\n      self.__cache__[chain].push(rule.fn)\n    })\n  })\n}\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name) }\n\n  this.__rules__[index].fn = fn\n  this.__rules__[index].alt = opt.alt || []\n  this.__cache__ = null\n}\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {}\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = true\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false })\n\n  this.enable(list, ignoreInvalid)\n}\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = false\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__()\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || []\n}\n\nexport default Ruler\n","// Core state object\n//\n\nimport Token from '../token.mjs'\n\nfunction StateCore (src, md, env) {\n  this.src = src\n  this.env = env\n  this.tokens = []\n  this.inlineMode = false\n  this.md = md // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token\n\nexport default StateCore\n","// Token class\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token (type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = ''\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = ''\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = ''\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex (name) {\n  if (!this.attrs) { return -1 }\n\n  const attrs = this.attrs\n\n  for (let i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i }\n  }\n  return -1\n}\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush (attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData)\n  } else {\n    this.attrs = [attrData]\n  }\n}\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet (name, value) {\n  const idx = this.attrIndex(name)\n  const attrData = [name, value]\n\n  if (idx < 0) {\n    this.attrPush(attrData)\n  } else {\n    this.attrs[idx] = attrData\n  }\n}\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet (name) {\n  const idx = this.attrIndex(name)\n  let value = null\n  if (idx >= 0) {\n    value = this.attrs[idx][1]\n  }\n  return value\n}\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin (name, value) {\n  const idx = this.attrIndex(name)\n\n  if (idx < 0) {\n    this.attrPush([name, value])\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value\n  }\n}\n\nexport default Token\n","// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE  = /\\r\\n?|\\n/g\nconst NULL_RE      = /\\0/g\n\nexport default function normalize (state) {\n  let str\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n')\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD')\n\n  state.src = str\n}\n","export default function block (state) {\n  let token\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0)\n    token.content  = state.src\n    token.map      = [0, 1]\n    token.children = []\n    state.tokens.push(token)\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens)\n  }\n}\n","export default function inline (state) {\n  const tokens = state.tokens\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i]\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children)\n    }\n  }\n}\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nimport { arrayReplaceAt } from '../common/utils.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nexport default function linkify (state) {\n  const blockTokens = state.tokens\n\n  if (!state.md.options.linkify) { return }\n\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue\n    }\n\n    let tokens = blockTokens[j].children\n\n    let htmlLinkLevel = 0\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i]\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--\n        }\n        continue\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++\n        }\n      }\n      if (htmlLinkLevel > 0) { continue }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content\n        let links = state.md.linkify.match(text)\n\n        // Now split string to nodes\n        const nodes = []\n        let level = currentToken.level\n        let lastPos = 0\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1)\n        }\n\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url\n          const fullUrl = state.md.normalizeLink(url)\n          if (!state.md.validateLink(fullUrl)) { continue }\n\n          let urlText = links[ln].text\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '')\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '')\n          } else {\n            urlText = state.md.normalizeLinkText(urlText)\n          }\n\n          const pos = links[ln].index\n\n          if (pos > lastPos) {\n            const token   = new state.Token('text', '', 0)\n            token.content = text.slice(lastPos, pos)\n            token.level   = level\n            nodes.push(token)\n          }\n\n          const token_o   = new state.Token('link_open', 'a', 1)\n          token_o.attrs   = [['href', fullUrl]]\n          token_o.level   = level++\n          token_o.markup  = 'linkify'\n          token_o.info    = 'auto'\n          nodes.push(token_o)\n\n          const token_t   = new state.Token('text', '', 0)\n          token_t.content = urlText\n          token_t.level   = level\n          nodes.push(token_t)\n\n          const token_c   = new state.Token('link_close', 'a', -1)\n          token_c.level   = --level\n          token_c.markup  = 'linkify'\n          token_c.info    = 'auto'\n          nodes.push(token_c)\n\n          lastPos = links[ln].lastIndex\n        }\n        if (lastPos < text.length) {\n          const token   = new state.Token('text', '', 0)\n          token.content = text.slice(lastPos)\n          token.level   = level\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n}\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i\n\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n}\n\nfunction replaceFn (match, name) {\n  return SCOPED_ABBR[name.toLowerCase()]\n}\n\nfunction replace_scoped (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nfunction replace_rare (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013')\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nexport default function replace (state) {\n  let blkIdx\n\n  if (!state.md.options.typographer) { return }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') { continue }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children)\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children)\n    }\n  }\n}\n","// Convert straight quotation marks to typographic ones\n//\n\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nconst QUOTE_TEST_RE = /['\"]/\nconst QUOTE_RE = /['\"]/g\nconst APOSTROPHE = '\\u2019' /* ’ */\n\nfunction replaceAt (str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1)\n}\n\nfunction process_inlines (tokens, state) {\n  let j\n\n  const stack = []\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n\n    const thisLevel = tokens[i].level\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break }\n    }\n    stack.length = j + 1\n\n    if (token.type !== 'text') { continue }\n\n    let text = token.content\n    let pos = 0\n    let max = text.length\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos\n      const t = QUOTE_RE.exec(text)\n      if (!t) { break }\n\n      let canOpen = true\n      let canClose = true\n      pos = t.index + 1\n      const isSingle = (t[0] === \"'\")\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1)\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // lastChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1)\n          break\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos)\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // nextChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0)\n          break\n        }\n      }\n\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n      const isLastWhiteSpace = isWhiteSpace(lastChar)\n      const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n      if (isNextWhiteSpace) {\n        canOpen = false\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar\n        canClose = isNextPunctChar\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE)\n        }\n        continue\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j]\n          if (stack[j].level < thisLevel) { break }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j]\n\n            let openQuote\n            let closeQuote\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2]\n              closeQuote = state.md.options.quotes[3]\n            } else {\n              openQuote = state.md.options.quotes[0]\n              closeQuote = state.md.options.quotes[1]\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote)\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote)\n\n            pos += closeQuote.length - 1\n            if (item.token === i) { pos += openQuote.length - 1 }\n\n            text = token.content\n            max = text.length\n\n            stack.length = j\n            continue OUTER\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        })\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE)\n      }\n    }\n  }\n}\n\nexport default function smartquotes (state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) { return }\n\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state)\n  }\n}\n","// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nexport default function text_join (state) {\n  let curr, last\n  const blockTokens = state.tokens\n  const l = blockTokens.length\n\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue\n\n    const tokens = blockTokens[j].children\n    const max = tokens.length\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text'\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr] }\n\n        last++\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last\n    }\n  }\n}\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateBlock from './rules_block/state_block.mjs'\n\nimport r_table from './rules_block/table.mjs'\nimport r_code from './rules_block/code.mjs'\nimport r_fence from './rules_block/fence.mjs'\nimport r_blockquote from './rules_block/blockquote.mjs'\nimport r_hr from './rules_block/hr.mjs'\nimport r_list from './rules_block/list.mjs'\nimport r_reference from './rules_block/reference.mjs'\nimport r_html_block from './rules_block/html_block.mjs'\nimport r_heading from './rules_block/heading.mjs'\nimport r_lheading from './rules_block/lheading.mjs'\nimport r_paragraph from './rules_block/paragraph.mjs'\n\nconst _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  ['table',      r_table,      ['paragraph', 'reference']],\n  ['code',       r_code],\n  ['fence',      r_fence,      ['paragraph', 'reference', 'blockquote', 'list']],\n  ['blockquote', r_blockquote, ['paragraph', 'reference', 'blockquote', 'list']],\n  ['hr',         r_hr,         ['paragraph', 'reference', 'blockquote', 'list']],\n  ['list',       r_list,       ['paragraph', 'reference', 'blockquote']],\n  ['reference',  r_reference],\n  ['html_block', r_html_block, ['paragraph', 'reference', 'blockquote']],\n  ['heading',    r_heading,    ['paragraph', 'reference', 'blockquote']],\n  ['lheading',   r_lheading],\n  ['paragraph',  r_paragraph]\n]\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock () {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() })\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  let line = startLine\n  let hasEmptyLines = false\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line)\n    if (line >= endLine) { break }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine\n      break\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line\n    let ok = false\n\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false)\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\")\n        }\n        break\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched')\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true\n    }\n\n    line = state.line\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true\n      line++\n      state.line = line\n    }\n  }\n}\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) { return }\n\n  const state = new this.State(src, md, env, outTokens)\n\n  this.tokenize(state, state.line, state.lineMax)\n}\n\nParserBlock.prototype.State = StateBlock\n\nexport default ParserBlock\n","// Parser state class\n\nimport Token from '../token.mjs'\nimport { isSpace } from '../common/utils.mjs'\n\nfunction StateBlock (src, md, env, tokens) {\n  this.src = src\n\n  // link to parser instance\n  this.md     = md\n\n  this.env = env\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens\n\n  this.bMarks = []  // line begin offsets for fast jumps\n  this.eMarks = []  // line end offsets for fast jumps\n  this.tShift = []  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = []\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent  = 0\n  this.line       = 0 // line index in src\n  this.lineMax    = 0 // lines count\n  this.tight      = false  // loose/tight mode for lists\n  this.ddIndent   = -1 // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1 // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root'\n\n  this.level = 0\n\n  // Create caches\n  // Generate markers.\n  const s = this.src\n\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos)\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4\n        } else {\n          offset++\n        }\n        continue\n      } else {\n        indent_found = true\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++ }\n      this.bMarks.push(start)\n      this.eMarks.push(pos)\n      this.tShift.push(indent)\n      this.sCount.push(offset)\n      this.bsCount.push(0)\n\n      indent_found = false\n      indent = 0\n      offset = 0\n      start = pos + 1\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length)\n  this.eMarks.push(s.length)\n  this.tShift.push(0)\n  this.sCount.push(0)\n  this.bsCount.push(0)\n\n  this.lineMax = this.bMarks.length - 1 // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting)\n  token.block = true\n\n  if (nesting < 0) this.level-- // closing tag\n  token.level = this.level\n  if (nesting > 0) this.level++ // opening tag\n\n  this.tokens.push(token)\n  return token\n}\n\nStateBlock.prototype.isEmpty = function isEmpty (line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line]\n}\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines (from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break\n    }\n  }\n  return from\n}\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces (pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n  }\n  return pos\n}\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack (pos, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1 }\n  }\n  return pos\n}\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars (pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break }\n  }\n  return pos\n}\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack (pos, code, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1 }\n  }\n  return pos\n}\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines (begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return ''\n  }\n\n  const queue = new Array(end - begin)\n\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0\n    const lineStart = this.bMarks[line]\n    let first = lineStart\n    let last\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1\n    } else {\n      last = this.eMarks[line]\n    }\n\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first)\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4\n        } else {\n          lineIndent++\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++\n      } else {\n        break\n      }\n\n      first++\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last)\n    } else {\n      queue[i] = this.src.slice(first, last)\n    }\n  }\n\n  return queue.join('')\n}\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token\n\nexport default StateBlock\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Limit the amount of empty autocompleted cells in a table,\n// see https://github.com/markdown-it/markdown-it/issues/1000,\n//\n// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.\n// We set it to 65k, which can expand user input by a factor of x370\n// (256x256 square is 1.8kB expanded into 650kB).\nconst MAX_AUTOCOMPLETED_CELLS = 0x10000\n\nfunction getLine (state, line) {\n  const pos = state.bMarks[line] + state.tShift[line]\n  const max = state.eMarks[line]\n\n  return state.src.slice(pos, max)\n}\n\nfunction escapedSplit (str) {\n  const result = []\n  const max = str.length\n\n  let pos = 0\n  let ch = str.charCodeAt(pos)\n  let isEscaped = false\n  let lastPos = 0\n  let current = ''\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos))\n        current = ''\n        lastPos = pos + 1\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1)\n        lastPos = pos\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */)\n    pos++\n\n    ch = str.charCodeAt(pos)\n  }\n\n  result.push(current + str.substring(lastPos))\n\n  return result\n}\n\nexport default function table (state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false }\n\n  let nextLine = startLine + 1\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const firstCh = state.src.charCodeAt(pos++)\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false }\n\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const secondCh = state.src.charCodeAt(pos++)\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false }\n\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false }\n\n    pos++\n  }\n\n  let lineText = getLine(state, startLine + 1)\n  let columns = lineText.split('|')\n  const aligns = []\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim()\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue\n      } else {\n        return false\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right')\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left')\n    } else {\n      aligns.push('')\n    }\n  }\n\n  lineText = getLine(state, startLine).trim()\n  if (lineText.indexOf('|') === -1) { return false }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n  columns = escapedSplit(lineText)\n  if (columns.length && columns[0] === '') columns.shift()\n  if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length\n  if (columnCount === 0 || columnCount !== aligns.length) { return false }\n\n  if (silent) { return true }\n\n  const oldParentType = state.parentType\n  state.parentType = 'table'\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const token_to = state.push('table_open', 'table', 1)\n  const tableLines = [startLine, 0]\n  token_to.map = tableLines\n\n  const token_tho = state.push('thead_open', 'thead', 1)\n  token_tho.map = [startLine, startLine + 1]\n\n  const token_htro = state.push('tr_open', 'tr', 1)\n  token_htro.map = [startLine, startLine + 1]\n\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1)\n    if (aligns[i]) {\n      token_ho.attrs  = [['style', 'text-align:' + aligns[i]]]\n    }\n\n    const token_il = state.push('inline', '', 0)\n    token_il.content  = columns[i].trim()\n    token_il.children = []\n\n    state.push('th_close', 'th', -1)\n  }\n\n  state.push('tr_close', 'tr', -1)\n  state.push('thead_close', 'thead', -1)\n\n  let tbodyLines\n  let autocompletedCells = 0\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) { break }\n    lineText = getLine(state, nextLine).trim()\n    if (!lineText) { break }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n    columns = escapedSplit(lineText)\n    if (columns.length && columns[0] === '') columns.shift()\n    if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n    // note: autocomplete count can be negative if user specifies more columns than header,\n    // but that does not affect intended use (which is limiting expansion)\n    autocompletedCells += columnCount - columns.length\n    if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) { break }\n\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1)\n      token_tbo.map = tbodyLines = [startLine + 2, 0]\n    }\n\n    const token_tro = state.push('tr_open', 'tr', 1)\n    token_tro.map = [nextLine, nextLine + 1]\n\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1)\n      if (aligns[i]) {\n        token_tdo.attrs  = [['style', 'text-align:' + aligns[i]]]\n      }\n\n      const token_il = state.push('inline', '', 0)\n      token_il.content  = columns[i] ? columns[i].trim() : ''\n      token_il.children = []\n\n      state.push('td_close', 'td', -1)\n    }\n    state.push('tr_close', 'tr', -1)\n  }\n\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1)\n    tbodyLines[1] = nextLine\n  }\n\n  state.push('table_close', 'table', -1)\n  tableLines[1] = nextLine\n\n  state.parentType = oldParentType\n  state.line = nextLine\n  return true\n}\n","// Code block (4 spaces padded)\n\nexport default function code (state, startLine, endLine/*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false }\n\n  let nextLine = startLine + 1\n  let last = nextLine\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++\n      continue\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++\n      last = nextLine\n      continue\n    }\n    break\n  }\n\n  state.line = last\n\n  const token   = state.push('code_block', 'code', 0)\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n'\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// fences (``` lang, ~~~ lang)\n\nexport default function fence (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (pos + 3 > max) { return false }\n\n  const marker = state.src.charCodeAt(pos)\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false\n  }\n\n  // scan marker length\n  let mem = pos\n  pos = state.skipChars(pos, marker)\n\n  let len = pos - mem\n\n  if (len < 3) { return false }\n\n  const markup = state.src.slice(mem, pos)\n  const params = state.src.slice(pos, max)\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true }\n\n  // search end of block\n  let nextLine = startLine\n  let haveEndMarker = false\n\n  for (;;) {\n    nextLine++\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue\n    }\n\n    pos = state.skipChars(pos, marker)\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos)\n\n    if (pos < max) { continue }\n\n    haveEndMarker = true\n    // found!\n    break\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine]\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0)\n\n  const token   = state.push('fence', 'code', 0)\n  token.info    = params\n  token.content = state.getLines(startLine + 1, nextLine, len, true)\n  token.markup  = markup\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// Block quotes\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function blockquote (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  const oldLineMax = state.lineMax\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true }\n\n  const oldBMarks  = []\n  const oldBSCount = []\n  const oldSCount  = []\n  const oldTShift  = []\n\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const oldParentType = state.parentType\n  state.parentType = 'blockquote'\n  let lastLineEmpty = false\n  let nextLine\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1\n      let spaceAfterMarker\n      let adjustTab\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++\n        initial++\n        adjustTab = false\n        spaceAfterMarker = true\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true\n\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++\n          initial++\n          adjustTab = false\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true\n        }\n      } else {\n        spaceAfterMarker = false\n      }\n\n      let offset = initial\n      oldBMarks.push(state.bMarks[nextLine])\n      state.bMarks[nextLine] = pos\n\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos)\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4\n          } else {\n            offset++\n          }\n        } else {\n          break\n        }\n\n        pos++\n      }\n\n      lastLineEmpty = pos >= max\n\n      oldBSCount.push(state.bsCount[nextLine])\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0)\n\n      oldSCount.push(state.sCount[nextLine])\n      state.sCount[nextLine] = offset - initial\n\n      oldTShift.push(state.tShift[nextLine])\n      state.tShift[nextLine] = pos - state.bMarks[nextLine]\n      continue\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break }\n\n    // Case 3: another tag found.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine])\n        oldBSCount.push(state.bsCount[nextLine])\n        oldTShift.push(state.tShift[nextLine])\n        oldSCount.push(state.sCount[nextLine])\n        state.sCount[nextLine] -= state.blkIndent\n      }\n\n      break\n    }\n\n    oldBMarks.push(state.bMarks[nextLine])\n    oldBSCount.push(state.bsCount[nextLine])\n    oldTShift.push(state.tShift[nextLine])\n    oldSCount.push(state.sCount[nextLine])\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1\n  }\n\n  const oldIndent = state.blkIndent\n  state.blkIndent = 0\n\n  const token_o  = state.push('blockquote_open', 'blockquote', 1)\n  token_o.markup = '>'\n  const lines = [startLine, 0]\n  token_o.map    = lines\n\n  state.md.block.tokenize(state, startLine, nextLine)\n\n  const token_c  = state.push('blockquote_close', 'blockquote', -1)\n  token_c.markup = '>'\n\n  state.lineMax = oldLineMax\n  state.parentType = oldParentType\n  lines[1] = state.line\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i]\n    state.tShift[i + startLine] = oldTShift[i]\n    state.sCount[i + startLine] = oldSCount[i]\n    state.bsCount[i + startLine] = oldBSCount[i]\n  }\n  state.blkIndent = oldIndent\n\n  return true\n}\n","// Horizontal rule\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function hr (state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine]\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  const marker = state.src.charCodeAt(pos++)\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++)\n    if (ch !== marker && !isSpace(ch)) { return false }\n    if (ch === marker) { cnt++ }\n  }\n\n  if (cnt < 3) { return false }\n\n  if (silent) { return true }\n\n  state.line = startLine + 1\n\n  const token  = state.push('hr', 'hr', 0)\n  token.map    = [startLine, state.line]\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker))\n\n  return true\n}\n","// Lists\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker (state, startLine) {\n  const max = state.eMarks[startLine]\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n\n  const marker = state.src.charCodeAt(pos++)\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1\n  }\n\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1\n    }\n  }\n\n  return pos\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker (state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine]\n  const max = state.eMarks[startLine]\n  let pos = start\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1 }\n\n  let ch = state.src.charCodeAt(pos++)\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1 }\n\n    ch = state.src.charCodeAt(pos++)\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1 }\n\n      continue\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break\n    }\n\n    return -1\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1\n    }\n  }\n  return pos\n}\n\nfunction markTightParagraphs (state, idx) {\n  const level = state.level + 2\n\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true\n      state.tokens[i].hidden = true\n      i += 2\n    }\n  }\n}\n\nexport default function list (state, startLine, endLine, silent) {\n  let max, pos, start, token\n  let nextLine = startLine\n  let tight = true\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[nextLine] - state.listIndent >= 4 &&\n      state.sCount[nextLine] < state.blkIndent) {\n    return false\n  }\n\n  let isTerminatingParagraph = false\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered\n  let markerValue\n  let posAfterMarker\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true\n    start = state.bMarks[nextLine] + state.tShift[nextLine]\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1))\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false\n  } else {\n    return false\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1)\n\n  // Start list\n  const listTokIdx = state.tokens.length\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1)\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]]\n    }\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1)\n  }\n\n  const listLines = [nextLine, 0]\n  token.map    = listLines\n  token.markup = String.fromCharCode(markerCharCode)\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false\n  const terminatorRules = state.md.block.ruler.getRules('list')\n\n  const oldParentType = state.parentType\n  state.parentType = 'list'\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker\n    max = state.eMarks[nextLine]\n\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine])\n    let offset = initial\n\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos)\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4\n      } else if (ch === 0x20) {\n        offset++\n      } else {\n        break\n      }\n\n      pos++\n    }\n\n    const contentStart = pos\n    let indentAfterMarker\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1\n    } else {\n      indentAfterMarker = offset - initial\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1 }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1)\n    token.markup = String.fromCharCode(markerCharCode)\n    const itemLines = [nextLine, 0]\n    token.map    = itemLines\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1)\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight\n    const oldTShift = state.tShift[nextLine]\n    const oldSCount = state.sCount[nextLine]\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent\n    state.listIndent = state.blkIndent\n    state.blkIndent = indent\n\n    state.tight = true\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine]\n    state.sCount[nextLine] = offset\n\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine)\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true)\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1)\n\n    state.blkIndent = state.listIndent\n    state.listIndent = oldListIndent\n    state.tShift[nextLine] = oldTShift\n    state.sCount[nextLine] = oldSCount\n    state.tight = oldTight\n\n    token        = state.push('list_item_close', 'li', -1)\n    token.markup = String.fromCharCode(markerCharCode)\n\n    nextLine = state.line\n    itemLines[1] = nextLine\n\n    if (nextLine >= endLine) { break }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n\n    // fail if terminating block found\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n      start = state.bMarks[nextLine] + state.tShift[nextLine]\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1)\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1)\n  }\n  token.markup = String.fromCharCode(markerCharCode)\n\n  listLines[1] = nextLine\n  state.line = nextLine\n\n  state.parentType = oldParentType\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx)\n  }\n\n  return true\n}\n","import { isSpace, normalizeReference } from '../common/utils.mjs'\n\nexport default function reference (state, startLine, _endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n  let nextLine = startLine + 1\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false }\n\n  function getNextLine (nextLine) {\n    const endLine = state.lineMax\n\n    if (nextLine >= endLine || state.isEmpty(nextLine)) {\n      // empty line or end of input\n      return null\n    }\n\n    let isContinuation = false\n\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { isContinuation = true }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { isContinuation = true }\n\n    if (!isContinuation) {\n      const terminatorRules = state.md.block.ruler.getRules('reference')\n      const oldParentType = state.parentType\n      state.parentType = 'reference'\n\n      // Some tags can terminate paragraph without empty line.\n      let terminate = false\n      for (let i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true\n          break\n        }\n      }\n\n      state.parentType = oldParentType\n      if (terminate) {\n        // terminated by another block\n        return null\n      }\n    }\n\n    const pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    const max = state.eMarks[nextLine]\n\n    // max + 1 explicitly includes the newline\n    return state.src.slice(pos, max + 1)\n  }\n\n  let str = state.src.slice(pos, max + 1)\n\n  max = str.length\n  let labelEnd = -1\n\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x5B /* [ */) {\n      return false\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos\n      break\n    } else if (ch === 0x0A /* \\n */) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (ch === 0x5C /* \\ */) {\n      pos++\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        const lineContent = getNextLine(nextLine)\n        if (lineContent !== null) {\n          str += lineContent\n          max = str.length\n          nextLine++\n        }\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max)\n  if (!destRes.ok) { return false }\n\n  const href = state.md.normalizeLink(destRes.str)\n  if (!state.md.validateLink(href)) { return false }\n\n  pos = destRes.pos\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos\n  const destEndLineNo = nextLine\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  let titleRes = state.md.helpers.parseLinkTitle(str, pos, max)\n  while (titleRes.can_continue) {\n    const lineContent = getNextLine(nextLine)\n    if (lineContent === null) break\n    str += lineContent\n    pos = max\n    max = str.length\n    nextLine++\n    titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes)\n  }\n  let title\n\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str\n    pos = titleRes.pos\n  } else {\n    title = ''\n    pos = destEndPos\n    nextLine = destEndLineNo\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n    pos++\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = ''\n      pos = destEndPos\n      nextLine = destEndLineNo\n      while (pos < max) {\n        const ch = str.charCodeAt(pos)\n        if (!isSpace(ch)) { break }\n        pos++\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false\n  }\n\n  const label = normalizeReference(str.slice(1, labelEnd))\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) { return true }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {}\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title, href }\n  }\n\n  state.line = nextLine\n  return true\n}\n","// HTML block\n\nimport block_names from '../common/html_blocks.mjs'\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [\n  [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n  [/^<!--/,        /-->/,   true],\n  [/^<\\?/,         /\\?>/,   true],\n  [/^<![A-Z]/,     />/,     true],\n  [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n  [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true],\n  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false]\n]\n\nexport default function html_block (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (!state.md.options.html) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  let lineText = state.src.slice(pos, max)\n\n  let i = 0\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break }\n  }\n  if (i === HTML_SEQUENCES.length) { return false }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2]\n  }\n\n  let nextLine = startLine + 1\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      max = state.eMarks[nextLine]\n      lineText = state.src.slice(pos, max)\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++ }\n        break\n      }\n    }\n  }\n\n  state.line = nextLine\n\n  const token   = state.push('html_block', '', 0)\n  token.map     = [startLine, nextLine]\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)\n\n  return true\n}\n","// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\n\nexport default [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n","// Regexps to match html elements\n\nconst attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*'\n\nconst unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+'\nconst single_quoted = \"'[^']*'\"\nconst double_quoted = '\"[^\"]*\"'\n\nconst attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')'\n\nconst attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)'\n\nconst open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>'\n\nconst close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>'\nconst comment     = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->'\nconst processing  = '<[?][\\\\s\\\\S]*?[?]>'\nconst declaration = '<![A-Za-z][^>]*>'\nconst cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>'\n\nconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')')\nconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')')\n\nexport { HTML_TAG_RE, HTML_OPEN_CLOSE_TAG_RE }\n","// heading (#, ##, ...)\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function heading (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let ch  = state.src.charCodeAt(pos)\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false }\n\n  // count heading level\n  let level = 1\n  ch = state.src.charCodeAt(++pos)\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++\n    ch = state.src.charCodeAt(++pos)\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false }\n\n  if (silent) { return true }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos)\n  const tmp = state.skipCharsBack(max, 0x23, pos) // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp\n  }\n\n  state.line = startLine + 1\n\n  const token_o  = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup = '########'.slice(0, level)\n  token_o.map    = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = state.src.slice(pos, max).trim()\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  const token_c  = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup = '########'.slice(0, level)\n\n  return true\n}\n","// lheading (---, ===)\n\nexport default function lheading (state, startLine, endLine/*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  const oldParentType = state.parentType\n  state.parentType = 'paragraph' // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0\n  let marker\n  let nextLine = startLine + 1\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      const max = state.eMarks[nextLine]\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos)\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker)\n          pos = state.skipSpaces(pos)\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2)\n            break\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine + 1\n\n  const token_o    = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup   = String.fromCharCode(marker)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line - 1]\n  token_i.children = []\n\n  const token_c    = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup   = String.fromCharCode(marker)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","// Paragraph\n\nexport default function paragraph (state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n  const oldParentType = state.parentType\n  let nextLine = startLine + 1\n  state.parentType = 'paragraph'\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine\n\n  const token_o    = state.push('paragraph_open', 'p', 1)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  state.push('paragraph_close', 'p', -1)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateInline from './rules_inline/state_inline.mjs'\n\nimport r_text from './rules_inline/text.mjs'\nimport r_linkify from './rules_inline/linkify.mjs'\nimport r_newline from './rules_inline/newline.mjs'\nimport r_escape from './rules_inline/escape.mjs'\nimport r_backticks from './rules_inline/backticks.mjs'\nimport r_strikethrough from './rules_inline/strikethrough.mjs'\nimport r_emphasis from './rules_inline/emphasis.mjs'\nimport r_link from './rules_inline/link.mjs'\nimport r_image from './rules_inline/image.mjs'\nimport r_autolink from './rules_inline/autolink.mjs'\nimport r_html_inline from './rules_inline/html_inline.mjs'\nimport r_entity from './rules_inline/entity.mjs'\n\nimport r_balance_pairs from './rules_inline/balance_pairs.mjs'\nimport r_fragments_join from './rules_inline/fragments_join.mjs'\n\n// Parser rules\n\nconst _rules = [\n  ['text',            r_text],\n  ['linkify',         r_linkify],\n  ['newline',         r_newline],\n  ['escape',          r_escape],\n  ['backticks',       r_backticks],\n  ['strikethrough',   r_strikethrough.tokenize],\n  ['emphasis',        r_emphasis.tokenize],\n  ['link',            r_link],\n  ['image',           r_image],\n  ['autolink',        r_autolink],\n  ['html_inline',     r_html_inline],\n  ['entity',          r_entity]\n]\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [\n  ['balance_pairs',   r_balance_pairs],\n  ['strikethrough',   r_strikethrough.postProcess],\n  ['emphasis',        r_emphasis.postProcess],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  ['fragments_join',  r_fragments_join]\n]\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline () {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler()\n\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1])\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  const cache = state.cache\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos]\n    return\n  }\n\n  let ok = false\n\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++\n      ok = rules[i](state, true)\n      state.level--\n\n      if (ok) {\n        if (pos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n        break\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax\n  }\n\n  if (!ok) { state.pos++ }\n  cache[pos] = state.pos\n}\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const end = state.posMax\n  const maxNesting = state.md.options.maxNesting\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos\n    let ok = false\n\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false)\n        if (ok) {\n          if (prevPos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n          break\n        }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break }\n      continue\n    }\n\n    state.pending += state.src[state.pos++]\n  }\n\n  if (state.pending) {\n    state.pushPending()\n  }\n}\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens)\n\n  this.tokenize(state)\n\n  const rules = this.ruler2.getRules('')\n  const len = rules.length\n\n  for (let i = 0; i < len; i++) {\n    rules[i](state)\n  }\n}\n\nParserInline.prototype.State = StateInline\n\nexport default ParserInline\n","// Inline parser state\n\nimport Token from '../token.mjs'\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nfunction StateInline (src, md, env, outTokens) {\n  this.src = src\n  this.env = env\n  this.md = md\n  this.tokens = outTokens\n  this.tokens_meta = Array(outTokens.length)\n\n  this.pos = 0\n  this.posMax = this.src.length\n  this.level = 0\n  this.pending = ''\n  this.pendingLevel = 0\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {}\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = []\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = []\n\n  // backtick length => last seen position\n  this.backticks = {}\n  this.backticksScanned = false\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0)\n  token.content = this.pending\n  token.level = this.pendingLevel\n  this.tokens.push(token)\n  this.pending = ''\n  return token\n}\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending()\n  }\n\n  const token = new Token(type, tag, nesting)\n  let token_meta = null\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--\n    this.delimiters = this._prev_delimiters.pop()\n  }\n\n  token.level = this.level\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++\n    this._prev_delimiters.push(this.delimiters)\n    this.delimiters = []\n    token_meta = { delimiters: this.delimiters }\n  }\n\n  this.pendingLevel = this.level\n  this.tokens.push(token)\n  this.tokens_meta.push(token_meta)\n  return token\n}\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  const max = this.posMax\n  const marker = this.src.charCodeAt(start)\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20\n\n  let pos = start\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++ }\n\n  const count = pos - start\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20\n\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n  const isLastWhiteSpace = isWhiteSpace(lastChar)\n  const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n  const left_flanking =\n    !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar)\n  const right_flanking =\n    !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar)\n\n  const can_open  = left_flanking  && (canSplitWord || !right_flanking || isLastPunctChar)\n  const can_close = right_flanking && (canSplitWord || !left_flanking  || isNextPunctChar)\n\n  return { can_open, can_close, length: count }\n}\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token\n\nexport default StateInline\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar (ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\nexport default function text (state, silent) {\n  let pos = state.pos\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++\n  }\n\n  if (pos === state.pos) { return false }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos) }\n\n  state.pos = pos\n\n  return true\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParserInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n","// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i\n\nexport default function linkify (state, silent) {\n  if (!state.md.options.linkify) return false\n  if (state.linkLevel > 0) return false\n\n  const pos = state.pos\n  const max = state.posMax\n\n  if (pos + 3 > max) return false\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false\n\n  const match = state.pending.match(SCHEME_RE)\n  if (!match) return false\n\n  const proto = match[1]\n\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))\n  if (!link) return false\n\n  let url = link.url\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '')\n\n  const fullUrl = state.md.normalizeLink(url)\n  if (!state.md.validateLink(fullUrl)) return false\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length)\n\n    const token_o = state.push('link_open', 'a', 1)\n    token_o.attrs = [['href', fullUrl]]\n    token_o.markup = 'linkify'\n    token_o.info = 'auto'\n\n    const token_t = state.push('text', '', 0)\n    token_t.content = state.md.normalizeLinkText(url)\n\n    const token_c = state.push('link_close', 'a', -1)\n    token_c.markup = 'linkify'\n    token_c.info = 'auto'\n  }\n\n  state.pos += url.length - proto.length\n  return true\n}\n","// Proceess '\\n'\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function newline (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false }\n\n  const pmax = state.pending.length - 1\n  const max = state.posMax\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--\n\n        state.pending = state.pending.slice(0, ws)\n        state.push('hardbreak', 'br', 0)\n      } else {\n        state.pending = state.pending.slice(0, -1)\n        state.push('softbreak', 'br', 0)\n      }\n    } else {\n      state.push('softbreak', 'br', 0)\n    }\n  }\n\n  pos++\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++ }\n\n  state.pos = pos\n  return true\n}\n","// Process escaped chars and hardbreaks\n\nimport { isSpace } from '../common/utils.mjs'\n\nconst ESCAPED = []\n\nfor (let i = 0; i < 256; i++) { ESCAPED.push(0) }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1 })\n\nexport default function escape (state, silent) {\n  let pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false\n  pos++\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false\n\n  let ch1 = state.src.charCodeAt(pos)\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0)\n    }\n\n    pos++\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos)\n      if (!isSpace(ch1)) break\n      pos++\n    }\n\n    state.pos = pos\n    return true\n  }\n\n  let escapedStr = state.src[pos]\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1)\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1]\n      pos++\n    }\n  }\n\n  const origStr = '\\\\' + escapedStr\n\n  if (!silent) {\n    const token = state.push('text_special', '', 0)\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr\n    } else {\n      token.content = origStr\n    }\n\n    token.markup = origStr\n    token.info   = 'escape'\n  }\n\n  state.pos = pos + 1\n  return true\n}\n","// Parse backticks\n\nexport default function backtick (state, silent) {\n  let pos = state.pos\n  const ch = state.src.charCodeAt(pos)\n\n  if (ch !== 0x60/* ` */) { return false }\n\n  const start = pos\n  pos++\n  const max = state.posMax\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++ }\n\n  const marker = state.src.slice(start, pos)\n  const openerLength = marker.length\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker\n    state.pos += openerLength\n    return true\n  }\n\n  let matchEnd = pos\n  let matchStart\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++ }\n\n    const closerLength = matchEnd - matchStart\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0)\n        token.markup = marker\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1')\n      }\n      state.pos = matchEnd\n      return true\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true\n\n  if (!silent) state.pending += marker\n  state.pos += openerLength\n  return true\n}\n","// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x7E/* ~ */) { return false }\n\n  const scanned = state.scanDelims(state.pos, true)\n  let len = scanned.length\n  const ch = String.fromCharCode(marker)\n\n  if (len < 2) { return false }\n\n  let token\n\n  if (len % 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch\n    len--\n  }\n\n  for (let i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch + ch\n\n    state.delimiters.push({\n      marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  let token\n  const loneMarkers = []\n  const max = delimiters.length\n\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue\n    }\n\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    token         = state.tokens[startDelim.token]\n    token.type    = 's_open'\n    token.tag     = 's'\n    token.nesting = 1\n    token.markup  = '~~'\n    token.content = ''\n\n    token         = state.tokens[endDelim.token]\n    token.type    = 's_close'\n    token.tag     = 's'\n    token.nesting = -1\n    token.markup  = '~~'\n    token.content = ''\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1)\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop()\n    let j = i + 1\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++\n    }\n\n    j--\n\n    if (i !== j) {\n      token = state.tokens[j]\n      state.tokens[j] = state.tokens[i]\n      state.tokens[i] = token\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n}\n","// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }\n\n  const scanned = state.scanDelims(state.pos, marker === 0x2A)\n\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0)\n    token.content = String.fromCharCode(marker)\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  const max = delimiters.length\n\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1\n\n    const ch = String.fromCharCode(startDelim.marker)\n\n    const token_o   = state.tokens[startDelim.token]\n    token_o.type    = isStrong ? 'strong_open' : 'em_open'\n    token_o.tag     = isStrong ? 'strong' : 'em'\n    token_o.nesting = 1\n    token_o.markup  = isStrong ? ch + ch : ch\n    token_o.content = ''\n\n    const token_c   = state.tokens[endDelim.token]\n    token_c.type    = isStrong ? 'strong_close' : 'em_close'\n    token_c.tag     = isStrong ? 'strong' : 'em'\n    token_c.nesting = -1\n    token_c.markup  = isStrong ? ch + ch : ch\n    token_c.content = ''\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = ''\n      state.tokens[delimiters[startDelim.end + 1].token].content = ''\n      i--\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n}\n","// Process [link](<to> \"stuff\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function link (state, silent) {\n  let code, label, res, ref\n  let href = ''\n  let title = ''\n  let start = state.pos\n  let parseReference = true\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n  const oldPos = state.pos\n  const max = state.posMax\n  const labelStart = state.pos + 1\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  let pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str\n        pos = res.pos\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos)\n          if (!isSpace(code) && code !== 0x0A) { break }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true\n    }\n    pos++\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart\n    state.posMax = labelEnd\n\n    const token_o = state.push('link_open', 'a', 1)\n    const attrs = [['href', href]]\n    token_o.attrs  = attrs\n    if (title) {\n      attrs.push(['title', title])\n    }\n\n    state.linkLevel++\n    state.md.inline.tokenize(state)\n    state.linkLevel--\n\n    state.push('link_close', 'a', -1)\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process ![image](<src> \"title\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function image (state, silent) {\n  let code, content, label, pos, ref, res, title, start\n  let href = ''\n  const oldPos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }\n\n  const labelStart = state.pos + 2\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str\n      pos = res.pos\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n    } else {\n      title = ''\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos\n      return false\n    }\n    pos++\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd)\n\n    const tokens = []\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens\n    )\n\n    const token = state.push('image', 'img', 0)\n    const attrs = [['src', href], ['alt', '']]\n    token.attrs = attrs\n    token.children = tokens\n    token.content = content\n\n    if (title) {\n      attrs.push(['title', title])\n    }\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/\n\nexport default function autolink (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  const start = state.pos\n  const max = state.posMax\n\n  for (;;) {\n    if (++pos >= max) return false\n\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch === 0x3C /* < */) return false\n    if (ch === 0x3E /* > */) break\n  }\n\n  const url = state.src.slice(start + 1, pos)\n\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  return false\n}\n","// Process html tags\n\nimport { HTML_TAG_RE } from '../common/html_re.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nfunction isLetter (ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20 // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)\n}\n\nexport default function html_inline (state, silent) {\n  if (!state.md.options.html) { return false }\n\n  // Check start\n  const max = state.posMax\n  const pos = state.pos\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1)\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false\n  }\n\n  const match = state.src.slice(pos).match(HTML_TAG_RE)\n  if (!match) { return false }\n\n  if (!silent) {\n    const token = state.push('html_inline', '', 0)\n    token.content = match[0]\n\n    if (isLinkOpen(token.content))  state.linkLevel++\n    if (isLinkClose(token.content)) state.linkLevel--\n  }\n  state.pos += match[0].length\n  return true\n}\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nimport { decodeHTML } from 'entities'\nimport { isValidEntityCode, fromCodePoint } from '../common/utils.mjs'\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i\nconst NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i\n\nexport default function entity (state, silent) {\n  const pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false\n\n  if (pos + 1 >= max) return false\n\n  const ch = state.src.charCodeAt(pos + 1)\n\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE)\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10)\n\n        const token   = state.push('text_special', '', 0)\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD)\n        token.markup  = match[0]\n        token.info    = 'entity'\n      }\n      state.pos += match[0].length\n      return true\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE)\n    if (match) {\n      const decoded = decodeHTML(match[0])\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token   = state.push('text_special', '', 0)\n          token.content = decoded\n          token.markup  = match[0]\n          token.info    = 'entity'\n        }\n        state.pos += match[0].length\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters (delimiters) {\n  const openersBottom = {}\n  const max = delimiters.length\n\n  if (!max) return\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0\n  let lastTokenIdx = -2 // needs any value lower than -1\n  const jumps = []\n\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx]\n\n    jumps.push(0)\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx\n    }\n\n    lastTokenIdx = closer.token\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0\n\n    if (!closer.close) continue\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1]\n    }\n\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)]\n\n    let openerIdx = headerIdx - jumps[headerIdx] - 1\n\n    let newMinOpenerIdx = openerIdx\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx]\n\n      if (opener.marker !== closer.marker) continue\n\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open\n            ? jumps[openerIdx - 1] + 1\n            : 0\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump\n          jumps[openerIdx] = lastJump\n\n          closer.open  = false\n          opener.end   = closerIdx\n          opener.close = false\n          newMinOpenerIdx = -1\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2\n          break\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx\n    }\n  }\n}\n\nexport default function link_pairs (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  processDelimiters(state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters)\n    }\n  }\n}\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nexport default function fragments_join (state) {\n  let curr, last\n  let level = 0\n  const tokens = state.tokens\n  const max = state.tokens.length\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level-- // closing tag\n    tokens[curr].level = level\n    if (tokens[curr].nesting > 0) level++ // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr] }\n\n      last++\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last\n  }\n}\n","import reFactory from './lib/re.mjs'\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\nfunction isString (obj) { return _class(obj) === '[object String]' }\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\n\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n}\n\nfunction isOptionsObj (obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k)\n  }, false)\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        )\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length\n      }\n      return 0\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        )\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\n        return tail.match(self.re.no_http)[0].length\n      }\n      return 0\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        )\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length\n      }\n      return 0\n    }\n  }\n}\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|')\n\nfunction resetScanCache (self) {\n  self.__index__ = -1\n  self.__text_cache__ = ''\n}\n\nfunction createValidator (re) {\n  return function (text, pos) {\n    const tail = text.slice(pos)\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length\n    }\n    return 0\n  }\n}\n\nfunction createNormalizer () {\n  return function (match, self) {\n    self.normalize(match)\n  }\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile (self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__)\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice()\n\n  self.onCompile()\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re)\n  }\n  tlds.push(re.src_xn)\n\n  re.src_tlds = tlds.join('|')\n\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i')\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i')\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i')\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i')\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = []\n\n  self.__compiled__ = {} // Reset compiled data\n\n  function schemaError (name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name]\n\n    // skip disabled methods\n    if (val === null) { return }\n\n    const compiled = { validate: null, link: null }\n\n    self.__compiled__[name] = compiled\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate)\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate\n      } else {\n        schemaError(name, val)\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer()\n      } else {\n        schemaError(name, val)\n      }\n\n      return\n    }\n\n    if (isString(val)) {\n      aliases.push(name)\n      return\n    }\n\n    schemaError(name, val)\n  })\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize\n  })\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() }\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__)\n    .filter(function (name) {\n      // Filter disabled & fake schemas\n      return name.length > 0 && self.__compiled__[name]\n    })\n    .map(escapeRE)\n    .join('|')\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i')\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig')\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i')\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  )\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self)\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match (self, shift) {\n  const start = self.__index__\n  const end = self.__last_index__\n  const text = self.__text_cache__.slice(start, end)\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase()\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text\n}\n\nfunction createMatch (self, shift) {\n  const match = new Match(self, shift)\n\n  self.__compiled__[match.schema].normalize(match, self)\n\n  return match\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt (schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options)\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas\n      schemas = {}\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options)\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1\n  this.__last_index__ = -1 // Next scan position\n  this.__schema__ = ''\n  this.__text_cache__ = ''\n\n  this.__schemas__ = assign({}, defaultSchemas, schemas)\n  this.__compiled__ = {}\n\n  this.__tlds__ = tlds_default\n  this.__tlds_replaced__ = false\n\n  this.re = {}\n\n  compile(this)\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add (schema, definition) {\n  this.__schemas__[schema] = definition\n  compile(this)\n  return this\n}\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set (options) {\n  this.__opts__ = assign(this.__opts__, options)\n  return this\n}\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) { return false }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search\n    re.lastIndex = 0\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex)\n      if (len) {\n        this.__schema__ = m[2]\n        this.__index__ = m.index + m[1].length\n        this.__last_index__ = m.index + m[0].length + len\n        break\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test)\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = ''\n            this.__index__ = shift\n            this.__last_index__ = ml.index + ml[0].length\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@')\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length\n        next = me.index + me[0].length\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__ = 'mailto:'\n          this.__index__ = shift\n          this.__last_index__ = next\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0\n}\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest (text) {\n  return this.re.pretest.test(text)\n}\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\n}\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match (text) {\n  const result = []\n  let shift = 0\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift))\n    shift = this.__last_index__\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift))\n\n    tail = tail.slice(this.__last_index__)\n    shift += this.__last_index__\n  }\n\n  if (result.length) {\n    return result\n  }\n\n  return null\n}\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) return null\n\n  const m = this.re.schema_at_start.exec(text)\n  if (!m) return null\n\n  const len = this.testSchemaAt(text, m[2], m[0].length)\n  if (!len) return null\n\n  this.__schema__ = m[2]\n  this.__index__ = m.index + m[1].length\n  this.__last_index__ = m.index + m[0].length + len\n\n  return createMatch(this, 0)\n}\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\n  list = Array.isArray(list) ? list : [list]\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice()\n    this.__tlds_replaced__ = true\n    compile(this)\n    return this\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n    .sort()\n    .filter(function (el, idx, arr) {\n      return el !== arr[idx - 1]\n    })\n    .reverse()\n\n  compile(this)\n  return this\n}\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize (match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url\n  }\n}\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile () {\n}\n\nexport default LinkifyIt\n","import { Any, Cc, Z, P } from 'uc.micro'\n\nexport default function (opts) {\n  const re = {}\n  opts = opts || {}\n\n  re.src_Any = Any.source\n  re.src_Cc = Cc.source\n  re.src_Z = Z.source\n  re.src_P = P.source\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|')\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|')\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]'\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?'\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?'\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))'\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n\n          // allow `I'm_king` if no pair found\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n\n          // google has many dots in \"google search\" links (#66, #81).\n          // github has ... in commit range links,\n          // Restrict to\n          // - english\n          // - percent-encoded\n          // - parts of file path\n          // - params separator\n          // until more examples found.\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\n\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---']\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            : '\\\\-+|'\n          ) +\n          // allow `,,,` in paths\n          ',(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `;` if not followed by space-like char\n          ';(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `!!!` in paths, but not at the end\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\n\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?'\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*'\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}'\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')'\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')'\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\n    ')'\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')'\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))'\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))'\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')'\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')'\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')'\n\n  return re\n}\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// markdown-it default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n}\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n}\n","// Commonmark default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n}\n"],"names":["$1c9b5713e0e7c6c5$var$ws","$1c9b5713e0e7c6c5$var$user","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","EntityLevel","EncodingMode","u","p","$10632aaf914d6bd1$var$_a","$21b54aeefac41b63$var$CharCodes","$21b54aeefac41b63$export$6a4325c613e0faec","$21b54aeefac41b63$var$EntityDecoderState","$21b54aeefac41b63$export$8c8f129ce60f53c","$19c65afdc12482fd$export$b8c86583d9718b50","$19c65afdc12482fd$export$1851b20d614eb756","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$b3GRM","$6rMz3","$hJaXz","filterXSS","html","options","xss","process","FilterXSS","i","j","window","self","DedicatedWorkerGlobalScope","$80d139ea8f389177$export$81959c441b85a1ce","$80d139ea8f389177$export$df33d771471df647","$80d139ea8f389177$export$8ee080b6f5c498c5","$80d139ea8f389177$export$6a8dcd2af568ef73","$80d139ea8f389177$export$68f34a033c535f39","$80d139ea8f389177$export$c08c9f0d730a9b5f","$80d139ea8f389177$export$3b380fb6422d8d92","$80d139ea8f389177$export$4cf11838cdc2a8a8","$80d139ea8f389177$export$b34053251219d4d","$80d139ea8f389177$export$b8b43266c0fd884b","$80d139ea8f389177$export$2bf939f54de7f222","$80d139ea8f389177$export$23813bdaf7b05b02","$80d139ea8f389177$export$a940bb329b7402b7","$80d139ea8f389177$export$474346ac3b97b91e","$80d139ea8f389177$export$3182ddfe050dbeb2","$80d139ea8f389177$export$8662d7a29d0836de","$80d139ea8f389177$export$c5207ac5d2688c71","$80d139ea8f389177$export$89570102812ee0df","$80d139ea8f389177$export$d540559455185e53","$80d139ea8f389177$export$8581cab6b127478e","$80d139ea8f389177$export$39da57ce707585be","$80d139ea8f389177$export$c47b8d41609c6a49","$1uar2","$80d139ea8f389177$require$FilterCSS","FilterCSS","$80d139ea8f389177$require$getDefaultCSSWhiteList","getDefaultWhiteList","$5HyOV","$80d139ea8f389177$var$getDefaultWhiteList","abbr","address","area","article","aside","audio","b","bdi","bdo","big","blockquote","br","caption","center","cite","col","colgroup","dd","del","details","div","dl","dt","em","figcaption","figure","font","footer","h1","h2","h3","h4","h5","h6","header","hr","img","ins","kbd","li","mark","nav","ol","pre","section","small","span","sub","summary","sup","strong","strike","table","tbody","td","tfoot","th","thead","tr","tt","ul","video","$80d139ea8f389177$var$defaultCSSFilter","$80d139ea8f389177$var$escapeHtml","replace","$80d139ea8f389177$var$REGEXP_LT","$80d139ea8f389177$var$REGEXP_GT","$80d139ea8f389177$var$REGEXP_QUOTE","$80d139ea8f389177$var$REGEXP_QUOTE_2","$80d139ea8f389177$var$REGEXP_ATTR_VALUE_1","$80d139ea8f389177$var$REGEXP_ATTR_VALUE_COLON","$80d139ea8f389177$var$REGEXP_ATTR_VALUE_NEWLINE","$80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_4","$80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_7","$80d139ea8f389177$var$REGEXP_DEFAULT_ON_TAG_ATTR_8","$80d139ea8f389177$var$escapeQuote","str","$80d139ea8f389177$var$unescapeQuote","$80d139ea8f389177$var$escapeHtmlEntities","String","fromCharCode","parseInt","substr","$80d139ea8f389177$var$escapeDangerHtml5Entities","$80d139ea8f389177$var$clearNonPrintableCharacter","str2","len","length","charCodeAt","charAt","trim","$80d139ea8f389177$var$friendlyAttrValue","$80d139ea8f389177$var$escapeAttrValue","tag","name","value","cssFilter","lastIndex","test","tags","next","isRemoveAllTag","Array","isArray","removeList","posStart","onIgnoreTag","indexOf","isClosing","position","ret","end","push","remove","rethtml","lastPos","forEach","pos","slice","retHtml","chars","split","filter","char","c","join","$esr9B","$3qir5","filterCSS","$a868be6f47ce52c3$var$getDefaultWhiteList","whiteList","$a868be6f47ce52c3$export$81959c441b85a1ce","$a868be6f47ce52c3$export$df33d771471df647","$a868be6f47ce52c3$export$4f8a1255fd179c1f","$a868be6f47ce52c3$export$6d1d10ce80791ec5","$a868be6f47ce52c3$export$3b380fb6422d8d92","$a868be6f47ce52c3$var$REGEXP_URL_JAVASCRIPT","$kOdtA","$27e219c7c1f5937f$var$FilterCSS","$27e219c7c1f5937f$var$shallowCopyObject","obj","onAttr","onIgnoreAttr","safeAttrValue","prototype","css","toString","me","sourcePosition","source","check","isWhite","RegExp","opts","$bF0jR","trimRight","cssLength","isParenthesisOpen","retCSS","addNewAttr","arr","item","fn","scope","spaceIndex","match","reg","exec","index","$4b1aef9885a3bb02$export$99bca2eadc127ad2","$4b1aef9885a3bb02$export$d543073c23be49b9","$4b1aef9885a3bb02$var$REGEXP_ILLEGAL_ATTR_NAME","$4b1aef9885a3bb02$var$stripQuoteWrap","text","onTag","escapeHtml","tagStart","quoteStart","currentPos","currentTagName","currentHtml","chariterator","$4b1aef9885a3bb02$var$getTagName","tagName","toLowerCase","ic","lastMarkPos","retAttrs","tmpName","addAttr","$4b1aef9885a3bb02$var$findNextQuotationMark","$4b1aef9885a3bb02$var$findNextEqual","$4b1aef9885a3bb02$var$findBeforeEqual","$ce7f240583551851$require$FilterCSS","$ce7f240583551851$var$parseTag","parseTag","$ce7f240583551851$var$parseAttr","parseAttr","$ce7f240583551851$var$FilterXSS","$ce7f240583551851$var$shallowCopyObject","stripIgnoreTag","console","error","onIgnoreTagStripAll","allowList","$ce7f240583551851$var$keysToLowerCase","map","attributeWrapSign","singleQuotedAttributeValue","onTagAttr","onIgnoreTagAttr","stripBlankChar","allowCommentTag","stripCommentTag","stripIgnoreTagBody","StripTagBody","info","hasOwnProperty","attrs","$ce7f240583551851$var$getAttrs","closing","whiteAttrList","attrsHtml","isWhiteAttr","$baC4Q","$acb166200129f66e$exports","$acb166200129f66e$export$844ec244b1367d54","$acb166200129f66e$export$a4f4bb6b1453fff5","$acb166200129f66e$export$e6e34fd1f2686227","$acb166200129f66e$export$f78478f71955b6bc","$acb166200129f66e$export$644a8f5b13b2a36d","$acb166200129f66e$export$73bfc63873071f74","$acb166200129f66e$export$5ccde1ea0c14bb03","$acb166200129f66e$export$db8a17c6655f7e2c","$acb166200129f66e$export$4cf11838cdc2a8a8","$acb166200129f66e$export$bc616c8f7dc20d5d","$acb166200129f66e$export$1d5ccafae59b4926","$acb166200129f66e$export$3c52dd84024ae72c","$acb166200129f66e$export$4888a643af800fc1","$acb166200129f66e$export$829a0d33ae4e744","$acb166200129f66e$export$20ef46802c8744b","$acb166200129f66e$export$16c08b91f883959a","$cfe8e16a3976eb73$exports","$0d34e69e6f2a0359$export$2e2bcd8739ae039","$a16db32880174ee4$export$2e2bcd8739ae039","$555640cbd60e2fdc$export$2e2bcd8739ae039","$544ec39afc7ce01f$export$2e2bcd8739ae039","$0d34e69e6f2a0359$var$decodeCache","$0d34e69e6f2a0359$var$decode","string","exclude","defaultChars","cache","$0d34e69e6f2a0359$var$getDecodeCache","ch","toUpperCase","seq","result","l","b1","b2","chr","b3","b4","componentChars","$a16db32880174ee4$var$encodeCache","$a16db32880174ee4$var$encode","keepEscaped","$a16db32880174ee4$var$getEncodeCache","nextCode","encodeURIComponent","url","protocol","slashes","auth","hostname","port","pathname","search","hash","$544ec39afc7ce01f$var$Url","$544ec39afc7ce01f$var$protocolPattern","$544ec39afc7ce01f$var$portPattern","$544ec39afc7ce01f$var$simplePathPattern","$544ec39afc7ce01f$var$nonHostChars","concat","$544ec39afc7ce01f$var$hostEndingChars","$544ec39afc7ce01f$var$hostnamePartPattern","$544ec39afc7ce01f$var$hostnamePartStart","$544ec39afc7ce01f$var$hostlessProtocol","javascript","$544ec39afc7ce01f$var$slashedProtocol","http","https","ftp","gopher","file","parse","slashesDenoteHost","lowerProto","hec","rest","simplePath","proto","atSign","hostEnd","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","k","validParts","notHost","bit","unshift","qm","$d55a0620136dd6aa$exports","$cbc832af4f488565$export$2e2bcd8739ae039","$c23f5f283a1bf321$export$2e2bcd8739ae039","$8b025739c405fffe$export$2e2bcd8739ae039","$e24366eb89af439c$export$2e2bcd8739ae039","$add59bdd531def5c$export$2e2bcd8739ae039","$df20dc3bfc54166a$export$2e2bcd8739ae039","$955886d6453f1f75$export$2e2bcd8739ae039","Uint16Array","$79538e6bbdd097a4$export$2e2bcd8739ae039","$10632aaf914d6bd1$var$decodeMap","Map","$10632aaf914d6bd1$export$73bfc63873071f74","fromCodePoint","codePoint","output","$21b54aeefac41b63$var$isNumber","ZERO","NINE","$21b54aeefac41b63$export$15263a93ff7ec8ba","constructor","decodeTree","emitCodePoint","errors","state","EntityStart","consumed","treeIndex","excess","decodeMode","Strict","startEntity","write","offset","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","start","base","digitCount","Math","pow","startIdx","UPPER_A","UPPER_F","LOWER_A","LOWER_F","emitNumericEntity","lastCp","expectedLength","_a","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","current","valueLength","VALUE_LENGTH","$21b54aeefac41b63$export$44c08d99945e6276","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","max","Attribute","$21b54aeefac41b63$var$isEntityInAttributeInvalidEnd","EQUALS","UPPER_Z","LOWER_Z","emitNotTerminatedNamedEntity","emitNamedEntityData","$21b54aeefac41b63$var$getDecoder","decoder","$21b54aeefac41b63$var$htmlDecoder","$21b54aeefac41b63$export$f045cb747ce77a19","mode","Legacy","$e72123220ae6606b$var$xmlCodeMap","$e72123220ae6606b$var$getEscaper","regex","data","lastIdx","substring","$acb166200129f66e$var$_class","codePointAt","$acb166200129f66e$var$_hasOwnProperty","object","key","sources","arguments","TypeError","keys","src","newElements","$acb166200129f66e$var$UNESCAPE_MD_RE","$acb166200129f66e$var$UNESCAPE_ALL_RE","$acb166200129f66e$var$ENTITY_RE","$acb166200129f66e$var$DIGITAL_ENTITY_TEST_RE","escaped","entity","$acb166200129f66e$var$replaceEntityPattern","decoded","$acb166200129f66e$var$HTML_ESCAPE_TEST_RE","$acb166200129f66e$var$HTML_ESCAPE_REPLACE_RE","$acb166200129f66e$var$HTML_REPLACEMENTS","$acb166200129f66e$var$replaceUnsafeChar","$acb166200129f66e$var$REGEXP_ESCAPE_RE","mdurl","ucmicro","$99119f957fdc25f6$exports","$abd2f48303995751$export$2e2bcd8739ae039","disableNested","level","found","marker","prevPos","posMax","oldPos","md","inline","skipToken","labelEnd","$edde6865825d92e7$export$2e2bcd8739ae039","ok","$f1d3017a5ae96057$export$2e2bcd8739ae039","prev_state","can_continue","$1aad198f750e42d7$var$default_rules","$1aad198f750e42d7$var$Renderer","rules","$41ea3ea6c70806b8$var$Ruler","__rules__","__cache__","$59ac17e6d91b036a$var$Token","type","nesting","children","content","markup","meta","block","hidden","$8993a444d7ae3c83$var$StateCore","env","tokens","inlineMode","code_inline","idx","slf","token","renderAttrs","code_block","fence","highlighted","langName","langAttrs","highlight","attrIndex","tmpAttrs","langPrefix","image","renderInlineAsText","renderToken","hardbreak","xhtmlOut","softbreak","breaks","html_block","html_inline","needLf","nextToken","renderInline","render","__find__","__compile__","chains","rule","enabled","alt","altName","chain","at","opt","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","enableOnly","disable","getRules","chainName","attrPush","attrData","attrSet","attrGet","attrJoin","Token","$5203c6838a32c344$var$NEWLINES_RE","$5203c6838a32c344$var$NULL_RE","$71faf318b045012d$var$RARE_RE","$71faf318b045012d$var$SCOPED_ABBR_TEST_RE","$71faf318b045012d$var$SCOPED_ABBR_RE","$71faf318b045012d$var$SCOPED_ABBR","r","tm","$71faf318b045012d$var$replaceFn","$18c84f826c38cf40$var$QUOTE_TEST_RE","$18c84f826c38cf40$var$QUOTE_RE","$18c84f826c38cf40$var$replaceAt","$1dbd8732bf2ea1e5$var$_rules","tok","blockTokens","linkify","pretest","htmlLinkLevel","currentToken","$e017aabd93d74ca7$var$isLinkOpen","links","nodes","ln","fullUrl","normalizeLink","validateLink","urlText","schema","normalizeLinkText","token_o","token_t","token_c","blkIdx","typographer","$71faf318b045012d$var$replace_scoped","inlineTokens","inside_autolink","$71faf318b045012d$var$replace_rare","$18c84f826c38cf40$var$process_inlines","stack","thisLevel","OUTER","t","canOpen","canClose","isSingle","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","single","openQuote","closeQuote","quotes","curr","last","$1dbd8732bf2ea1e5$var$Core","ruler","$ad2420667aa7c8e8$var$StateBlock","bMarks","eMarks","tShift","sCount","bsCount","blkIndent","line","lineMax","tight","ddIndent","listIndent","parentType","indent","indent_found","$2ef92aecf350006a$var$getLine","$2ef92aecf350006a$var$escapedSplit","isEscaped","$3b7cbf7838646e8a$var$skipBulletListMarker","startLine","$3b7cbf7838646e8a$var$skipOrderedListMarker","State","isEmpty","skipEmptyLines","from","skipSpaces","skipSpacesBack","min","skipChars","skipCharsBack","getLines","begin","keepLastLF","queue","lineIndent","lineStart","first","$08e6c33d10f51cc6$var$open_tag","$08e6c33d10f51cc6$var$close_tag","$08e6c33d10f51cc6$export$6db61d2c3a16e419","$08e6c33d10f51cc6$export$cd48660d06f74639","$d9386c6e85fc1b48$var$HTML_SEQUENCES","$3349c57a2e9a47a9$var$_rules","endLine","silent","tbodyLines","nextLine","firstCh","secondCh","lineText","columns","aligns","shift","pop","columnCount","oldParentType","terminatorRules","token_to","tableLines","token_tho","token_htro","token_ho","token_il","autocompletedCells","terminate","token_tbo","token_tro","token_tdo","mem","params","haveEndMarker","oldLineMax","oldBMarks","oldBSCount","oldSCount","oldTShift","lastLineEmpty","isOutdented","spaceAfterMarker","adjustTab","initial","oldIndent","lines","tokenize","cnt","isOrdered","markerValue","posAfterMarker","isTerminatingParagraph","Number","markerCharCode","listTokIdx","listLines","prevEmptyEnd","indentAfterMarker","contentStart","itemLines","oldTight","oldListIndent","$3b7cbf7838646e8a$var$markTightParagraphs","_endLine","title","getNextLine","isContinuation","lineContent","destRes","helpers","parseLinkDestination","href","destEndPos","destEndLineNo","titleRes","parseLinkTitle","label","references","tmp","token_i","$3349c57a2e9a47a9$var$ParserBlock","$78766ebe20d230e1$var$StateInline","outTokens","tokens_meta","pending","pendingLevel","delimiters","_prev_delimiters","backticks","backticksScanned","linkLevel","maxNesting","hasEmptyLines","prevLine","pushPending","token_meta","scanDelims","canSplitWord","count","left_flanking","right_flanking","can_open","can_close","$d922190b2670a68c$var$SCHEME_RE","$b91dce80827c08a1$var$ESCAPED","$c4e44d3b61071958$var$postProcess","loneMarkers","startDelim","endDelim","$354922e1ef651ea3$var$postProcess","isStrong","$38fe1de13dbca06b$var$EMAIL_RE","$38fe1de13dbca06b$var$AUTOLINK_RE","$2605af2f776ac07c$var$DIGITAL_RE","$2605af2f776ac07c$var$NAMED_RE","$86b620d722e5f8d3$var$processDelimiters","openersBottom","headerIdx","lastTokenIdx","jumps","closerIdx","closer","close","minOpenerIdx","open","openerIdx","newMinOpenerIdx","opener","isOddMatch","lastJump","$086c870d02d0d269$var$_rules","$52dad52dbdb68874$var$isTerminatorChar","link","matchAtStart","pmax","ws","ch1","escapedStr","ch2","origStr","matchStart","openerLength","matchEnd","closerLength","scanned","res","ref","parseReference","labelStart","parseLinkLabel","$c398d6df9e0474f7$var$isLetter","lc","$086c870d02d0d269$var$_rules2","$086c870d02d0d269$var$ParserInline","ruler2","$fdfb0b45a2ba540e$var$assign","$fdfb0b45a2ba540e$var$_class","$fdfb0b45a2ba540e$var$isFunction","$fdfb0b45a2ba540e$var$escapeRE","$fdfb0b45a2ba540e$var$defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","$fdfb0b45a2ba540e$var$defaultSchemas","validate","tail","re","src_auth","src_host_port_strict","src_path","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","$fdfb0b45a2ba540e$var$tlds_default","$fdfb0b45a2ba540e$var$createNormalizer","normalize","$fdfb0b45a2ba540e$var$compile","src_Any","src_Cc","src_Z","src_P","src_ZPCc","src_ZCc","text_separators","src_pseudo_letter","src_ip4","src_xn","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","alias","slist","schema_test","schema_search","schema_at_start","__index__","__text_cache__","$fdfb0b45a2ba540e$var$Match","__last_index__","__schema__","raw","$fdfb0b45a2ba540e$var$createMatch","$fdfb0b45a2ba540e$var$LinkifyIt","schemas","reduce","acc","add","definition","m","ml","tld_pos","testSchemaAt","at_pos","keepOld","sort","el","reverse","$cc1c99c5745bccf3$var$regexPunycode","$cc1c99c5745bccf3$var$regexNonASCII","$cc1c99c5745bccf3$var$regexSeparators","$cc1c99c5745bccf3$var$errors","$cc1c99c5745bccf3$var$floor","floor","$cc1c99c5745bccf3$var$stringFromCharCode","$cc1c99c5745bccf3$var$error","RangeError","$cc1c99c5745bccf3$var$mapDomain","domain","callback","parts","$cc1c99c5745bccf3$var$map","array","$cc1c99c5745bccf3$var$digitToBasic","digit","flag","$cc1c99c5745bccf3$var$adapt","delta","numPoints","firstTime","$cc1c99c5745bccf3$var$baseMinusTMin","$cc1c99c5745bccf3$var$base","$cc1c99c5745bccf3$export$2f872c0f2117be69","input","inputLength","bias","basic","oldi","w","$cc1c99c5745bccf3$var$maxInt","baseMinusT","out","$cc1c99c5745bccf3$export$c564cdbbe6da493","$cc1c99c5745bccf3$export$c1700176c90f250f","counter","extra","currentValue","basicLength","handledCPCount","handledCPCountPlusOne","q","qMinusT","$cc1c99c5745bccf3$export$2e2bcd8739ae039","$0d15360f132ce1e2$var$config","components","core","zero","rules2","commonmark","$0d15360f132ce1e2$var$BAD_PROTO_RE","$0d15360f132ce1e2$var$GOOD_DATA_RE","$0d15360f132ce1e2$var$validateLink","$0d15360f132ce1e2$var$RECODE_HOSTNAME_FOR","$0d15360f132ce1e2$var$normalizeLink","parsed","toASCII","er","$0d15360f132ce1e2$var$normalizeLinkText","toUnicode","$0d15360f132ce1e2$var$MarkdownIt","presetName","isString","renderer","utils","assign","configure","$2a3fd41f2d8265f9$export$e1bef8d96c7ba086","post","convertedToTimeStamp","Date","created","message","attachmentsHtml","attachments","attachment","postReplies","replies","reply","author","avatar","username","display_name","toLocaleString","presets","missed","use","plugin","args","apply","parseInline","$1c9b5713e0e7c6c5$var$replies","$1c9b5713e0e7c6c5$var$attachmentURls","$1c9b5713e0e7c6c5$var$replies_details","document","getElementById","$1c9b5713e0e7c6c5$var$clearReplies","innerHTML","localStorage","getItem","location","$1c9b5713e0e7c6c5$var$u","$1c9b5713e0e7c6c5$var$getUserCredentials","d","JSON","password","$1c9b5713e0e7c6c5$var$sendPost","readyState","WebSocket","OPEN","postCommand","stringify","command","send","$1c9b5713e0e7c6c5$var$showPageFromHash","startsWith","hashParts","pageId","query","allPages","querySelectorAll","page","classList","pageToShow","$1c9b5713e0e7c6c5$var$loadProfilePage","URLSearchParams","handleUserData","userData","mdBio","bio","userPermissions","permissions","permission","log","contentDiv","sendGetUserCommand","onmessage","parsedData","user","waitForWebSocket","setTimeout","$1c9b5713e0e7c6c5$var$loadHomePage","sendButton","addEventListener","$1c9b5713e0e7c6c5$var$loadLoginPage","storedUserData","querySelector","onclick","event","preventDefault","onopen","listener","response","setItem","onerror","onclose","Promise","resolve","reject","client","posts","postsContainer","postHtml","messages","ulist","ulistHtml","ulistElement","users","userCount","then","webSocket","catch","onload","$1c9b5713e0e7c6c5$var$contentDiv","target","matches","getAttribute","postId","removeAll","$1c9b5713e0e7c6c5$var$attachButton","prompt"],"version":3,"file":"index.31fdb665.js.map"}